// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: short_video/short_video.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_ShortVideoProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 商品ID
  var productID: Int64 = 0

  /// 商品推广信息
  var productPromotionText: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShortVideoShop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 店铺ID
  var shopID: Int64 = 0

  /// 店铺名称
  var shopName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShortVideoUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户ID
  var userID: Int64 = 0

  /// 用户名称
  var userName: String = String()

  /// 用户头像URL
  var avatarURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShortVideo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 短视频ID
  var shortVideoID: Int64 {
    get {return _storage._shortVideoID}
    set {_uniqueStorage()._shortVideoID = newValue}
  }

  /// 短视频URL
  var videoURL: String {
    get {return _storage._videoURL}
    set {_uniqueStorage()._videoURL = newValue}
  }

  /// 视频封面URL
  var coverURL: String {
    get {return _storage._coverURL}
    set {_uniqueStorage()._coverURL = newValue}
  }

  /// 短视频描述
  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// 视频可见性：1. 公开，2: 隐私，仅自己可见
  var visibility: Int32 {
    get {return _storage._visibility}
    set {_uniqueStorage()._visibility = newValue}
  }

  /// 视频文件大小
  var videoLength: Int32 {
    get {return _storage._videoLength}
    set {_uniqueStorage()._videoLength = newValue}
  }

  /// 视频时长
  var videoDuration: Int32 {
    get {return _storage._videoDuration}
    set {_uniqueStorage()._videoDuration = newValue}
  }

  /// 审核状态：1: 待审核，2: 审核通过，3:审核被驳回
  var censorStatus: Int32 {
    get {return _storage._censorStatus}
    set {_uniqueStorage()._censorStatus = newValue}
  }

  ///视频被驳回原因
  var censorRejectedReason: String {
    get {return _storage._censorRejectedReason}
    set {_uniqueStorage()._censorRejectedReason = newValue}
  }

  /// 商品列表
  var products: [GloryApi_ShortVideoProduct] {
    get {return _storage._products}
    set {_uniqueStorage()._products = newValue}
  }

  /// 店铺信息
  var shop: GloryApi_ShortVideoShop {
    get {return _storage._shop ?? GloryApi_ShortVideoShop()}
    set {_uniqueStorage()._shop = newValue}
  }
  /// Returns true if `shop` has been explicitly set.
  var hasShop: Bool {return _storage._shop != nil}
  /// Clears the value of `shop`. Subsequent reads from it will return its default value.
  mutating func clearShop() {_uniqueStorage()._shop = nil}

  /// 用户信息
  var userInfo: GloryApi_ShortVideoUser {
    get {return _storage._userInfo ?? GloryApi_ShortVideoUser()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}

  /// 是否喜欢
  var isLike: Bool {
    get {return _storage._isLike}
    set {_uniqueStorage()._isLike = newValue}
  }

  /// 喜欢数量
  var likeCount: Int32 {
    get {return _storage._likeCount}
    set {_uniqueStorage()._likeCount = newValue}
  }

  /// 是否收藏
  var isFavorite: Bool {
    get {return _storage._isFavorite}
    set {_uniqueStorage()._isFavorite = newValue}
  }

  /// 收藏数量
  var favoriteCount: Int32 {
    get {return _storage._favoriteCount}
    set {_uniqueStorage()._favoriteCount = newValue}
  }

  /// 评论数量
  var commentCount: Int32 {
    get {return _storage._commentCount}
    set {_uniqueStorage()._commentCount = newValue}
  }

  /// 创建时间
  var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_StageVideo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 暂存视频ID
  var stageVideoID: Int64 = 0

  /// 短视频URL
  var videoURL: String = String()

  /// 视频文件大小
  var videoLength: Int32 = 0

  /// 视频时长
  var videoDuration: Int32 = 0

  /// 创建时间
  var createdAt: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_CreateShortVideoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  /// 短视频描述
  var description_p: String = String()

  /// 视频可见性：1.公开；2:隐私，仅自己可见
  var visibility: Int32 = 0

  /// JSON序列化的商品信息
  var products: String = String()

  /// 店铺ID
  var shopID: Int64 = 0

  /// 暂存视频ID（如果是发布暂存视频的话）
  var stageVideoID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_CreateShortVideoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shortVideoID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_StageShortVideoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_StageShortVideoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var stageVideoID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_ShortVideoProduct: @unchecked Sendable {}
extension GloryApi_ShortVideoShop: @unchecked Sendable {}
extension GloryApi_ShortVideoUser: @unchecked Sendable {}
extension GloryApi_ShortVideo: @unchecked Sendable {}
extension GloryApi_StageVideo: @unchecked Sendable {}
extension GloryApi_CreateShortVideoRequest: @unchecked Sendable {}
extension GloryApi_CreateShortVideoResponse: @unchecked Sendable {}
extension GloryApi_StageShortVideoRequest: @unchecked Sendable {}
extension GloryApi_StageShortVideoResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_ShortVideoProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShortVideoProduct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .standard(proto: "product_promotion_text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.productID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productPromotionText) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.productID != 0 {
      try visitor.visitSingularInt64Field(value: self.productID, fieldNumber: 1)
    }
    if !self.productPromotionText.isEmpty {
      try visitor.visitSingularStringField(value: self.productPromotionText, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShortVideoProduct, rhs: GloryApi_ShortVideoProduct) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs.productPromotionText != rhs.productPromotionText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShortVideoShop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShortVideoShop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_id"),
    2: .standard(proto: "shop_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 1)
    }
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShortVideoShop, rhs: GloryApi_ShortVideoShop) -> Bool {
    if lhs.shopID != rhs.shopID {return false}
    if lhs.shopName != rhs.shopName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShortVideoUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShortVideoUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "user_name"),
    3: .standard(proto: "avatar_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.avatarURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 2)
    }
    if !self.avatarURL.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShortVideoUser, rhs: GloryApi_ShortVideoUser) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.avatarURL != rhs.avatarURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShortVideo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShortVideo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "short_video_id"),
    2: .standard(proto: "video_url"),
    3: .standard(proto: "cover_url"),
    4: .same(proto: "description"),
    5: .same(proto: "visibility"),
    6: .standard(proto: "video_length"),
    7: .standard(proto: "video_duration"),
    8: .standard(proto: "censor_status"),
    9: .standard(proto: "censor_rejected_reason"),
    10: .same(proto: "products"),
    11: .same(proto: "shop"),
    12: .standard(proto: "user_info"),
    13: .standard(proto: "is_like"),
    14: .standard(proto: "like_count"),
    15: .standard(proto: "is_favorite"),
    16: .standard(proto: "favorite_count"),
    17: .standard(proto: "comment_count"),
    18: .standard(proto: "created_at"),
  ]

  fileprivate class _StorageClass {
    var _shortVideoID: Int64 = 0
    var _videoURL: String = String()
    var _coverURL: String = String()
    var _description_p: String = String()
    var _visibility: Int32 = 0
    var _videoLength: Int32 = 0
    var _videoDuration: Int32 = 0
    var _censorStatus: Int32 = 0
    var _censorRejectedReason: String = String()
    var _products: [GloryApi_ShortVideoProduct] = []
    var _shop: GloryApi_ShortVideoShop? = nil
    var _userInfo: GloryApi_ShortVideoUser? = nil
    var _isLike: Bool = false
    var _likeCount: Int32 = 0
    var _isFavorite: Bool = false
    var _favoriteCount: Int32 = 0
    var _commentCount: Int32 = 0
    var _createdAt: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _shortVideoID = source._shortVideoID
      _videoURL = source._videoURL
      _coverURL = source._coverURL
      _description_p = source._description_p
      _visibility = source._visibility
      _videoLength = source._videoLength
      _videoDuration = source._videoDuration
      _censorStatus = source._censorStatus
      _censorRejectedReason = source._censorRejectedReason
      _products = source._products
      _shop = source._shop
      _userInfo = source._userInfo
      _isLike = source._isLike
      _likeCount = source._likeCount
      _isFavorite = source._isFavorite
      _favoriteCount = source._favoriteCount
      _commentCount = source._commentCount
      _createdAt = source._createdAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._shortVideoID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._videoURL) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._coverURL) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._visibility) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._videoLength) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._videoDuration) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._censorStatus) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._censorRejectedReason) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._products) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._shop) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._userInfo) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._isLike) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._likeCount) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._isFavorite) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._favoriteCount) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._commentCount) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._createdAt) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._shortVideoID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shortVideoID, fieldNumber: 1)
      }
      if !_storage._videoURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._videoURL, fieldNumber: 2)
      }
      if !_storage._coverURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._coverURL, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if _storage._visibility != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visibility, fieldNumber: 5)
      }
      if _storage._videoLength != 0 {
        try visitor.visitSingularInt32Field(value: _storage._videoLength, fieldNumber: 6)
      }
      if _storage._videoDuration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._videoDuration, fieldNumber: 7)
      }
      if _storage._censorStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._censorStatus, fieldNumber: 8)
      }
      if !_storage._censorRejectedReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._censorRejectedReason, fieldNumber: 9)
      }
      if !_storage._products.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._products, fieldNumber: 10)
      }
      try { if let v = _storage._shop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if _storage._isLike != false {
        try visitor.visitSingularBoolField(value: _storage._isLike, fieldNumber: 13)
      }
      if _storage._likeCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._likeCount, fieldNumber: 14)
      }
      if _storage._isFavorite != false {
        try visitor.visitSingularBoolField(value: _storage._isFavorite, fieldNumber: 15)
      }
      if _storage._favoriteCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._favoriteCount, fieldNumber: 16)
      }
      if _storage._commentCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._commentCount, fieldNumber: 17)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShortVideo, rhs: GloryApi_ShortVideo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._shortVideoID != rhs_storage._shortVideoID {return false}
        if _storage._videoURL != rhs_storage._videoURL {return false}
        if _storage._coverURL != rhs_storage._coverURL {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._visibility != rhs_storage._visibility {return false}
        if _storage._videoLength != rhs_storage._videoLength {return false}
        if _storage._videoDuration != rhs_storage._videoDuration {return false}
        if _storage._censorStatus != rhs_storage._censorStatus {return false}
        if _storage._censorRejectedReason != rhs_storage._censorRejectedReason {return false}
        if _storage._products != rhs_storage._products {return false}
        if _storage._shop != rhs_storage._shop {return false}
        if _storage._userInfo != rhs_storage._userInfo {return false}
        if _storage._isLike != rhs_storage._isLike {return false}
        if _storage._likeCount != rhs_storage._likeCount {return false}
        if _storage._isFavorite != rhs_storage._isFavorite {return false}
        if _storage._favoriteCount != rhs_storage._favoriteCount {return false}
        if _storage._commentCount != rhs_storage._commentCount {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StageVideo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StageVideo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stage_video_id"),
    2: .standard(proto: "video_url"),
    3: .standard(proto: "video_length"),
    4: .standard(proto: "video_duration"),
    5: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.stageVideoID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.videoURL) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.videoLength) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.videoDuration) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.stageVideoID != 0 {
      try visitor.visitSingularInt64Field(value: self.stageVideoID, fieldNumber: 1)
    }
    if !self.videoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.videoURL, fieldNumber: 2)
    }
    if self.videoLength != 0 {
      try visitor.visitSingularInt32Field(value: self.videoLength, fieldNumber: 3)
    }
    if self.videoDuration != 0 {
      try visitor.visitSingularInt32Field(value: self.videoDuration, fieldNumber: 4)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StageVideo, rhs: GloryApi_StageVideo) -> Bool {
    if lhs.stageVideoID != rhs.stageVideoID {return false}
    if lhs.videoURL != rhs.videoURL {return false}
    if lhs.videoLength != rhs.videoLength {return false}
    if lhs.videoDuration != rhs.videoDuration {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateShortVideoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateShortVideoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "description"),
    3: .same(proto: "visibility"),
    4: .same(proto: "products"),
    5: .standard(proto: "shop_id"),
    6: .standard(proto: "stage_video_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.visibility) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.products) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.stageVideoID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.visibility != 0 {
      try visitor.visitSingularInt32Field(value: self.visibility, fieldNumber: 3)
    }
    if !self.products.isEmpty {
      try visitor.visitSingularStringField(value: self.products, fieldNumber: 4)
    }
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 5)
    }
    if self.stageVideoID != 0 {
      try visitor.visitSingularInt64Field(value: self.stageVideoID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateShortVideoRequest, rhs: GloryApi_CreateShortVideoRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.visibility != rhs.visibility {return false}
    if lhs.products != rhs.products {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.stageVideoID != rhs.stageVideoID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateShortVideoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateShortVideoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "short_video_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shortVideoID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shortVideoID != 0 {
      try visitor.visitSingularInt64Field(value: self.shortVideoID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateShortVideoResponse, rhs: GloryApi_CreateShortVideoResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shortVideoID != rhs.shortVideoID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StageShortVideoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StageShortVideoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StageShortVideoRequest, rhs: GloryApi_StageShortVideoRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StageShortVideoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StageShortVideoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "stage_video_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.stageVideoID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.stageVideoID != 0 {
      try visitor.visitSingularInt64Field(value: self.stageVideoID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StageShortVideoResponse, rhs: GloryApi_StageShortVideoResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.stageVideoID != rhs.stageVideoID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
