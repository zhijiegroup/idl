// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: course/nmodule.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_NmCourse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var courseID: Int64 = 0

  var courseName: String = String()

  var courseOrganization: String = String()

  var courseTeacherName: String = String()

  var skillHours: Double = 0

  var knowledgeHours: Double = 0

  var courseDescription: String = String()

  var coverURL: String = String()

  var courseClassification: Int64 = 0

  var courseMajor: String = String()

  var courseLevel: Int64 = 0

  var courseType: Int64 = 0

  var courseIndustry: String = String()

  var courseHours: Double = 0

  var chapters: [GloryApi_NmChapter] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_CreateNmCourseChapterResourceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var resourceName: String = String()

  var resourceType: Int64 = 0

  var resourcePath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_CreateNmCourseChapterResourceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var resourceID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_CreateNmCourseChapterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var chapterName: String = String()

  var parentID: Int64 = 0

  var resourceID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_CreateNmCourseChapterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var chapterID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_CreateNmCourseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var courseName: String = String()

  var courseOrgination: String = String()

  var teacherName: String = String()

  var courseHours: Double = 0

  var courseDescription: String = String()

  var courseCoverPath: String = String()

  var courseClassfication: Int64 = 0

  /// 课程层次：1.中职 2.高职 3.中高职
  var courseLevel: Int64 = 0

  var courseMajor: String = String()

  /// 课程类型：1:核心课程 2:名师公开课
  var courseType: Int64 = 0

  var courseIndustry: String = String()

  var chapters: [GloryApi_NmChapter] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_NmChapter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chapterID: Int64 {
    get {return _storage._chapterID}
    set {_uniqueStorage()._chapterID = newValue}
  }

  var chapterName: String {
    get {return _storage._chapterName}
    set {_uniqueStorage()._chapterName = newValue}
  }

  var childChapter: GloryApi_NmChapter {
    get {return _storage._childChapter ?? GloryApi_NmChapter()}
    set {_uniqueStorage()._childChapter = newValue}
  }
  /// Returns true if `childChapter` has been explicitly set.
  var hasChildChapter: Bool {return _storage._childChapter != nil}
  /// Clears the value of `childChapter`. Subsequent reads from it will return its default value.
  mutating func clearChildChapter() {_uniqueStorage()._childChapter = nil}

  var resources: [GloryApi_NmResource] {
    get {return _storage._resources}
    set {_uniqueStorage()._resources = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_NmResource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resourceID: Int64 = 0

  var resourceName: String = String()

  var resourceType: Int64 = 0

  var resourcePath: String = String()

  var resourceURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_CreateNmCourseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var courseID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_NmCourseDetailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var courseID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_NmCourseDetailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _storage._baseResp ?? Base_BaseResponse()}
    set {_uniqueStorage()._baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return _storage._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {_uniqueStorage()._baseResp = nil}

  var course: GloryApi_NmCourse {
    get {return _storage._course ?? GloryApi_NmCourse()}
    set {_uniqueStorage()._course = newValue}
  }
  /// Returns true if `course` has been explicitly set.
  var hasCourse: Bool {return _storage._course != nil}
  /// Clears the value of `course`. Subsequent reads from it will return its default value.
  mutating func clearCourse() {_uniqueStorage()._course = nil}

  var isJoined: Bool {
    get {return _storage._isJoined}
    set {_uniqueStorage()._isJoined = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_ListNmCourseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var classfication: Int32 = 0

  var value: String = String()

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListNmCourseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var courses: [GloryApi_NmCourse] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_DeleteNmCourseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var courseID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_DeleteNmCourseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_NmCourse: @unchecked Sendable {}
extension GloryApi_CreateNmCourseChapterResourceRequest: @unchecked Sendable {}
extension GloryApi_CreateNmCourseChapterResourceResponse: @unchecked Sendable {}
extension GloryApi_CreateNmCourseChapterRequest: @unchecked Sendable {}
extension GloryApi_CreateNmCourseChapterResponse: @unchecked Sendable {}
extension GloryApi_CreateNmCourseRequest: @unchecked Sendable {}
extension GloryApi_NmChapter: @unchecked Sendable {}
extension GloryApi_NmResource: @unchecked Sendable {}
extension GloryApi_CreateNmCourseResponse: @unchecked Sendable {}
extension GloryApi_NmCourseDetailRequest: @unchecked Sendable {}
extension GloryApi_NmCourseDetailResponse: @unchecked Sendable {}
extension GloryApi_ListNmCourseRequest: @unchecked Sendable {}
extension GloryApi_ListNmCourseResponse: @unchecked Sendable {}
extension GloryApi_DeleteNmCourseRequest: @unchecked Sendable {}
extension GloryApi_DeleteNmCourseResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_NmCourse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NmCourse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "course_id"),
    2: .standard(proto: "course_name"),
    3: .standard(proto: "course_organization"),
    4: .standard(proto: "course_teacher_name"),
    5: .standard(proto: "skill_hours"),
    6: .standard(proto: "knowledge_hours"),
    7: .standard(proto: "course_description"),
    8: .standard(proto: "cover_url"),
    9: .standard(proto: "course_classification"),
    10: .standard(proto: "course_major"),
    11: .standard(proto: "course_level"),
    12: .standard(proto: "course_type"),
    13: .standard(proto: "course_industry"),
    14: .standard(proto: "course_hours"),
    15: .same(proto: "chapters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.courseID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.courseName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.courseOrganization) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.courseTeacherName) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.skillHours) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.knowledgeHours) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.courseDescription) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.coverURL) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.courseClassification) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.courseMajor) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.courseLevel) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.courseType) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.courseIndustry) }()
      case 14: try { try decoder.decodeSingularDoubleField(value: &self.courseHours) }()
      case 15: try { try decoder.decodeRepeatedMessageField(value: &self.chapters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if !self.courseName.isEmpty {
      try visitor.visitSingularStringField(value: self.courseName, fieldNumber: 2)
    }
    if !self.courseOrganization.isEmpty {
      try visitor.visitSingularStringField(value: self.courseOrganization, fieldNumber: 3)
    }
    if !self.courseTeacherName.isEmpty {
      try visitor.visitSingularStringField(value: self.courseTeacherName, fieldNumber: 4)
    }
    if self.skillHours != 0 {
      try visitor.visitSingularDoubleField(value: self.skillHours, fieldNumber: 5)
    }
    if self.knowledgeHours != 0 {
      try visitor.visitSingularDoubleField(value: self.knowledgeHours, fieldNumber: 6)
    }
    if !self.courseDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.courseDescription, fieldNumber: 7)
    }
    if !self.coverURL.isEmpty {
      try visitor.visitSingularStringField(value: self.coverURL, fieldNumber: 8)
    }
    if self.courseClassification != 0 {
      try visitor.visitSingularInt64Field(value: self.courseClassification, fieldNumber: 9)
    }
    if !self.courseMajor.isEmpty {
      try visitor.visitSingularStringField(value: self.courseMajor, fieldNumber: 10)
    }
    if self.courseLevel != 0 {
      try visitor.visitSingularInt64Field(value: self.courseLevel, fieldNumber: 11)
    }
    if self.courseType != 0 {
      try visitor.visitSingularInt64Field(value: self.courseType, fieldNumber: 12)
    }
    if !self.courseIndustry.isEmpty {
      try visitor.visitSingularStringField(value: self.courseIndustry, fieldNumber: 13)
    }
    if self.courseHours != 0 {
      try visitor.visitSingularDoubleField(value: self.courseHours, fieldNumber: 14)
    }
    if !self.chapters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chapters, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_NmCourse, rhs: GloryApi_NmCourse) -> Bool {
    if lhs.courseID != rhs.courseID {return false}
    if lhs.courseName != rhs.courseName {return false}
    if lhs.courseOrganization != rhs.courseOrganization {return false}
    if lhs.courseTeacherName != rhs.courseTeacherName {return false}
    if lhs.skillHours != rhs.skillHours {return false}
    if lhs.knowledgeHours != rhs.knowledgeHours {return false}
    if lhs.courseDescription != rhs.courseDescription {return false}
    if lhs.coverURL != rhs.coverURL {return false}
    if lhs.courseClassification != rhs.courseClassification {return false}
    if lhs.courseMajor != rhs.courseMajor {return false}
    if lhs.courseLevel != rhs.courseLevel {return false}
    if lhs.courseType != rhs.courseType {return false}
    if lhs.courseIndustry != rhs.courseIndustry {return false}
    if lhs.courseHours != rhs.courseHours {return false}
    if lhs.chapters != rhs.chapters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateNmCourseChapterResourceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateNmCourseChapterResourceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "resource_name"),
    3: .standard(proto: "resource_type"),
    4: .standard(proto: "resource_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resourceName) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.resourceType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.resourcePath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.resourceName.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceName, fieldNumber: 2)
    }
    if self.resourceType != 0 {
      try visitor.visitSingularInt64Field(value: self.resourceType, fieldNumber: 3)
    }
    if !self.resourcePath.isEmpty {
      try visitor.visitSingularStringField(value: self.resourcePath, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateNmCourseChapterResourceRequest, rhs: GloryApi_CreateNmCourseChapterResourceRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.resourceName != rhs.resourceName {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.resourcePath != rhs.resourcePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateNmCourseChapterResourceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateNmCourseChapterResourceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "resource_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.resourceID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.resourceID != 0 {
      try visitor.visitSingularInt64Field(value: self.resourceID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateNmCourseChapterResourceResponse, rhs: GloryApi_CreateNmCourseChapterResourceResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateNmCourseChapterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateNmCourseChapterRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "chapter_name"),
    3: .standard(proto: "parent_id"),
    4: .standard(proto: "resource_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chapterName) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.parentID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.resourceID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.chapterName.isEmpty {
      try visitor.visitSingularStringField(value: self.chapterName, fieldNumber: 2)
    }
    if self.parentID != 0 {
      try visitor.visitSingularInt64Field(value: self.parentID, fieldNumber: 3)
    }
    if self.resourceID != 0 {
      try visitor.visitSingularInt64Field(value: self.resourceID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateNmCourseChapterRequest, rhs: GloryApi_CreateNmCourseChapterRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.chapterName != rhs.chapterName {return false}
    if lhs.parentID != rhs.parentID {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateNmCourseChapterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateNmCourseChapterResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "chapter_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.chapterID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.chapterID != 0 {
      try visitor.visitSingularInt64Field(value: self.chapterID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateNmCourseChapterResponse, rhs: GloryApi_CreateNmCourseChapterResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.chapterID != rhs.chapterID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateNmCourseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateNmCourseRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "course_name"),
    3: .standard(proto: "course_orgination"),
    4: .standard(proto: "teacher_name"),
    5: .standard(proto: "course_hours"),
    6: .standard(proto: "course_description"),
    7: .standard(proto: "course_cover_path"),
    8: .standard(proto: "course_classfication"),
    9: .standard(proto: "course_level"),
    10: .standard(proto: "course_major"),
    11: .standard(proto: "course_type"),
    12: .standard(proto: "course_industry"),
    13: .same(proto: "chapters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.courseName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.courseOrgination) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.teacherName) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.courseHours) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.courseDescription) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.courseCoverPath) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.courseClassfication) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.courseLevel) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.courseMajor) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.courseType) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.courseIndustry) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.chapters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.courseName.isEmpty {
      try visitor.visitSingularStringField(value: self.courseName, fieldNumber: 2)
    }
    if !self.courseOrgination.isEmpty {
      try visitor.visitSingularStringField(value: self.courseOrgination, fieldNumber: 3)
    }
    if !self.teacherName.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherName, fieldNumber: 4)
    }
    if self.courseHours != 0 {
      try visitor.visitSingularDoubleField(value: self.courseHours, fieldNumber: 5)
    }
    if !self.courseDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.courseDescription, fieldNumber: 6)
    }
    if !self.courseCoverPath.isEmpty {
      try visitor.visitSingularStringField(value: self.courseCoverPath, fieldNumber: 7)
    }
    if self.courseClassfication != 0 {
      try visitor.visitSingularInt64Field(value: self.courseClassfication, fieldNumber: 8)
    }
    if self.courseLevel != 0 {
      try visitor.visitSingularInt64Field(value: self.courseLevel, fieldNumber: 9)
    }
    if !self.courseMajor.isEmpty {
      try visitor.visitSingularStringField(value: self.courseMajor, fieldNumber: 10)
    }
    if self.courseType != 0 {
      try visitor.visitSingularInt64Field(value: self.courseType, fieldNumber: 11)
    }
    if !self.courseIndustry.isEmpty {
      try visitor.visitSingularStringField(value: self.courseIndustry, fieldNumber: 12)
    }
    if !self.chapters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chapters, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateNmCourseRequest, rhs: GloryApi_CreateNmCourseRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.courseName != rhs.courseName {return false}
    if lhs.courseOrgination != rhs.courseOrgination {return false}
    if lhs.teacherName != rhs.teacherName {return false}
    if lhs.courseHours != rhs.courseHours {return false}
    if lhs.courseDescription != rhs.courseDescription {return false}
    if lhs.courseCoverPath != rhs.courseCoverPath {return false}
    if lhs.courseClassfication != rhs.courseClassfication {return false}
    if lhs.courseLevel != rhs.courseLevel {return false}
    if lhs.courseMajor != rhs.courseMajor {return false}
    if lhs.courseType != rhs.courseType {return false}
    if lhs.courseIndustry != rhs.courseIndustry {return false}
    if lhs.chapters != rhs.chapters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_NmChapter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NmChapter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chapter_id"),
    2: .standard(proto: "chapter_name"),
    3: .standard(proto: "child_chapter"),
    4: .same(proto: "resources"),
  ]

  fileprivate class _StorageClass {
    var _chapterID: Int64 = 0
    var _chapterName: String = String()
    var _childChapter: GloryApi_NmChapter? = nil
    var _resources: [GloryApi_NmResource] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chapterID = source._chapterID
      _chapterName = source._chapterName
      _childChapter = source._childChapter
      _resources = source._resources
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._chapterID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._chapterName) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._childChapter) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._resources) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._chapterID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._chapterID, fieldNumber: 1)
      }
      if !_storage._chapterName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chapterName, fieldNumber: 2)
      }
      try { if let v = _storage._childChapter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._resources.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._resources, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_NmChapter, rhs: GloryApi_NmChapter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chapterID != rhs_storage._chapterID {return false}
        if _storage._chapterName != rhs_storage._chapterName {return false}
        if _storage._childChapter != rhs_storage._childChapter {return false}
        if _storage._resources != rhs_storage._resources {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_NmResource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NmResource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_id"),
    2: .standard(proto: "resource_name"),
    3: .standard(proto: "resource_type"),
    4: .standard(proto: "resource_path"),
    5: .standard(proto: "resource_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.resourceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resourceName) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.resourceType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.resourcePath) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.resourceURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resourceID != 0 {
      try visitor.visitSingularInt64Field(value: self.resourceID, fieldNumber: 1)
    }
    if !self.resourceName.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceName, fieldNumber: 2)
    }
    if self.resourceType != 0 {
      try visitor.visitSingularInt64Field(value: self.resourceType, fieldNumber: 3)
    }
    if !self.resourcePath.isEmpty {
      try visitor.visitSingularStringField(value: self.resourcePath, fieldNumber: 4)
    }
    if !self.resourceURL.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_NmResource, rhs: GloryApi_NmResource) -> Bool {
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.resourceName != rhs.resourceName {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.resourcePath != rhs.resourcePath {return false}
    if lhs.resourceURL != rhs.resourceURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateNmCourseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateNmCourseResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "course_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.courseID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateNmCourseResponse, rhs: GloryApi_CreateNmCourseResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.courseID != rhs.courseID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_NmCourseDetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NmCourseDetailRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "course_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.courseID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_NmCourseDetailRequest, rhs: GloryApi_NmCourseDetailRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.courseID != rhs.courseID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_NmCourseDetailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NmCourseDetailResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .same(proto: "course"),
    4: .standard(proto: "is_joined"),
  ]

  fileprivate class _StorageClass {
    var _baseResp: Base_BaseResponse? = nil
    var _course: GloryApi_NmCourse? = nil
    var _isJoined: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseResp = source._baseResp
      _course = source._course
      _isJoined = source._isJoined
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._baseResp) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._course) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isJoined) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._baseResp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._course {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._isJoined != false {
        try visitor.visitSingularBoolField(value: _storage._isJoined, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_NmCourseDetailResponse, rhs: GloryApi_NmCourseDetailResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseResp != rhs_storage._baseResp {return false}
        if _storage._course != rhs_storage._course {return false}
        if _storage._isJoined != rhs_storage._isJoined {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListNmCourseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListNmCourseRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "classfication"),
    3: .same(proto: "value"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.classfication) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.classfication != 0 {
      try visitor.visitSingularInt32Field(value: self.classfication, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListNmCourseRequest, rhs: GloryApi_ListNmCourseRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.classfication != rhs.classfication {return false}
    if lhs.value != rhs.value {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListNmCourseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListNmCourseResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .same(proto: "courses"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.courses) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.courses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.courses, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListNmCourseResponse, rhs: GloryApi_ListNmCourseResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.courses != rhs.courses {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteNmCourseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteNmCourseRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "course_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.courseID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteNmCourseRequest, rhs: GloryApi_DeleteNmCourseRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.courseID != rhs.courseID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteNmCourseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteNmCourseResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteNmCourseResponse, rhs: GloryApi_DeleteNmCourseResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
