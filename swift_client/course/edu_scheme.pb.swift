// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: course/edu_scheme.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_EduScheme {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eduSchemeID: Int64 = 0

  var name: String = String()

  var major: String = String()

  var goal: String = String()

  var totalHours: Double = 0

  var knowledgeHours: Double = 0

  var skillHours: Double = 0

  var createdAt: String = String()

  var knowledgeStandard: String = String()

  var abilityStandard: String = String()

  var characterStandard: String = String()

  /// 能力方向名称
  var courseGroupName: String = String()

  /// 能力方向ID
  var courseGroupID: Int64 = 0

  var createdBy: Int64 = 0

  /// 能力指标
  var courseModules: [GloryApi_CourseModule] = []

  /// 应用班级
  var classes: [GloryApi_TenantDept] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_CreateEduSchemeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var name: String = String()

  var major: String = String()

  var goal: String = String()

  var type: Int32 = 0

  var knowledgeStandard: String = String()

  var abilityStandard: String = String()

  var characterStandard: String = String()

  var groupName: String = String()

  var skillHours: Float = 0

  var knowledgeHours: Float = 0

  /// 能力指标或能力方向
  var courseModules: [GloryApi_CourseModule] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_CreateEduSchemeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var eduSchemeID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_UpdateEduSchemeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var name: String = String()

  var major: String = String()

  var goal: String = String()

  var type: Int32 = 0

  var knowledgeStandard: String = String()

  var abilityStandard: String = String()

  var characterStandard: String = String()

  var groupName: String = String()

  var eduSchemeID: Int64 = 0

  var skillHours: Float = 0

  var knowledgeHours: Float = 0

  /// 能力指标或能力方向
  var courseModules: [GloryApi_CourseModule] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_UpdateEduSchemeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_DeleteEduSchemeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var eduSchemeID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_DeleteEduSchemeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ListEduSchemeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var type: Int32 = 0

  var name: String = String()

  var major: String = String()

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListEduSchemeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var eduSchemeList: [GloryApi_EduScheme] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_EduSchemeDetailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var eduSchemeID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_EduSchemeDetailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _storage._baseResp ?? Base_BaseResponse()}
    set {_uniqueStorage()._baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return _storage._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {_uniqueStorage()._baseResp = nil}

  var schemeDetail: GloryApi_EduScheme {
    get {return _storage._schemeDetail ?? GloryApi_EduScheme()}
    set {_uniqueStorage()._schemeDetail = newValue}
  }
  /// Returns true if `schemeDetail` has been explicitly set.
  var hasSchemeDetail: Bool {return _storage._schemeDetail != nil}
  /// Clears the value of `schemeDetail`. Subsequent reads from it will return its default value.
  mutating func clearSchemeDetail() {_uniqueStorage()._schemeDetail = nil}

  var clasIds: [Int64] {
    get {return _storage._clasIds}
    set {_uniqueStorage()._clasIds = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_DistributeEduSchemeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var eduSchemeID: Int64 = 0

  var clasIds: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_DistributeEduSchemeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

/// 获取模块化课程
struct GloryApi_GetEduSchemeLikeCourseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  /// 培养方案ID
  var eduSchemeID: Int64 = 0

  /// 角色，学生或老师 student teacher
  var role: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetEduSchemeLikeCourseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var course: GloryApi_Course {
    get {return _course ?? GloryApi_Course()}
    set {_course = newValue}
  }
  /// Returns true if `course` has been explicitly set.
  var hasCourse: Bool {return self._course != nil}
  /// Clears the value of `course`. Subsequent reads from it will return its default value.
  mutating func clearCourse() {self._course = nil}

  var courseProgress: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _course: GloryApi_Course? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_EduScheme: @unchecked Sendable {}
extension GloryApi_CreateEduSchemeRequest: @unchecked Sendable {}
extension GloryApi_CreateEduSchemeResponse: @unchecked Sendable {}
extension GloryApi_UpdateEduSchemeRequest: @unchecked Sendable {}
extension GloryApi_UpdateEduSchemeResponse: @unchecked Sendable {}
extension GloryApi_DeleteEduSchemeRequest: @unchecked Sendable {}
extension GloryApi_DeleteEduSchemeResponse: @unchecked Sendable {}
extension GloryApi_ListEduSchemeRequest: @unchecked Sendable {}
extension GloryApi_ListEduSchemeResponse: @unchecked Sendable {}
extension GloryApi_EduSchemeDetailRequest: @unchecked Sendable {}
extension GloryApi_EduSchemeDetailResponse: @unchecked Sendable {}
extension GloryApi_DistributeEduSchemeRequest: @unchecked Sendable {}
extension GloryApi_DistributeEduSchemeResponse: @unchecked Sendable {}
extension GloryApi_GetEduSchemeLikeCourseRequest: @unchecked Sendable {}
extension GloryApi_GetEduSchemeLikeCourseResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_EduScheme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EduScheme"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "edu_scheme_id"),
    2: .same(proto: "name"),
    3: .same(proto: "major"),
    4: .same(proto: "goal"),
    5: .standard(proto: "total_hours"),
    6: .standard(proto: "knowledge_hours"),
    7: .standard(proto: "skill_hours"),
    8: .standard(proto: "created_at"),
    9: .standard(proto: "knowledge_standard"),
    10: .standard(proto: "ability_standard"),
    11: .standard(proto: "character_standard"),
    12: .standard(proto: "course_group_name"),
    13: .standard(proto: "course_group_id"),
    14: .standard(proto: "created_by"),
    15: .standard(proto: "course_modules"),
    16: .same(proto: "classes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.eduSchemeID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.goal) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.totalHours) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.knowledgeHours) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.skillHours) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.knowledgeStandard) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.abilityStandard) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.characterStandard) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.courseGroupName) }()
      case 13: try { try decoder.decodeSingularInt64Field(value: &self.courseGroupID) }()
      case 14: try { try decoder.decodeSingularInt64Field(value: &self.createdBy) }()
      case 15: try { try decoder.decodeRepeatedMessageField(value: &self.courseModules) }()
      case 16: try { try decoder.decodeRepeatedMessageField(value: &self.classes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.eduSchemeID != 0 {
      try visitor.visitSingularInt64Field(value: self.eduSchemeID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.goal.isEmpty {
      try visitor.visitSingularStringField(value: self.goal, fieldNumber: 4)
    }
    if self.totalHours != 0 {
      try visitor.visitSingularDoubleField(value: self.totalHours, fieldNumber: 5)
    }
    if self.knowledgeHours != 0 {
      try visitor.visitSingularDoubleField(value: self.knowledgeHours, fieldNumber: 6)
    }
    if self.skillHours != 0 {
      try visitor.visitSingularDoubleField(value: self.skillHours, fieldNumber: 7)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 8)
    }
    if !self.knowledgeStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.knowledgeStandard, fieldNumber: 9)
    }
    if !self.abilityStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.abilityStandard, fieldNumber: 10)
    }
    if !self.characterStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.characterStandard, fieldNumber: 11)
    }
    if !self.courseGroupName.isEmpty {
      try visitor.visitSingularStringField(value: self.courseGroupName, fieldNumber: 12)
    }
    if self.courseGroupID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseGroupID, fieldNumber: 13)
    }
    if self.createdBy != 0 {
      try visitor.visitSingularInt64Field(value: self.createdBy, fieldNumber: 14)
    }
    if !self.courseModules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.courseModules, fieldNumber: 15)
    }
    if !self.classes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classes, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_EduScheme, rhs: GloryApi_EduScheme) -> Bool {
    if lhs.eduSchemeID != rhs.eduSchemeID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.major != rhs.major {return false}
    if lhs.goal != rhs.goal {return false}
    if lhs.totalHours != rhs.totalHours {return false}
    if lhs.knowledgeHours != rhs.knowledgeHours {return false}
    if lhs.skillHours != rhs.skillHours {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.knowledgeStandard != rhs.knowledgeStandard {return false}
    if lhs.abilityStandard != rhs.abilityStandard {return false}
    if lhs.characterStandard != rhs.characterStandard {return false}
    if lhs.courseGroupName != rhs.courseGroupName {return false}
    if lhs.courseGroupID != rhs.courseGroupID {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs.courseModules != rhs.courseModules {return false}
    if lhs.classes != rhs.classes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateEduSchemeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateEduSchemeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "name"),
    3: .same(proto: "major"),
    4: .same(proto: "goal"),
    5: .same(proto: "type"),
    6: .standard(proto: "knowledge_standard"),
    7: .standard(proto: "ability_standard"),
    8: .standard(proto: "character_standard"),
    9: .standard(proto: "group_name"),
    10: .standard(proto: "skill_hours"),
    11: .standard(proto: "knowledge_hours"),
    15: .standard(proto: "course_modules"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.goal) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.knowledgeStandard) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.abilityStandard) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.characterStandard) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.skillHours) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.knowledgeHours) }()
      case 15: try { try decoder.decodeRepeatedMessageField(value: &self.courseModules) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.goal.isEmpty {
      try visitor.visitSingularStringField(value: self.goal, fieldNumber: 4)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 5)
    }
    if !self.knowledgeStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.knowledgeStandard, fieldNumber: 6)
    }
    if !self.abilityStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.abilityStandard, fieldNumber: 7)
    }
    if !self.characterStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.characterStandard, fieldNumber: 8)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 9)
    }
    if self.skillHours != 0 {
      try visitor.visitSingularFloatField(value: self.skillHours, fieldNumber: 10)
    }
    if self.knowledgeHours != 0 {
      try visitor.visitSingularFloatField(value: self.knowledgeHours, fieldNumber: 11)
    }
    if !self.courseModules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.courseModules, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateEduSchemeRequest, rhs: GloryApi_CreateEduSchemeRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.name != rhs.name {return false}
    if lhs.major != rhs.major {return false}
    if lhs.goal != rhs.goal {return false}
    if lhs.type != rhs.type {return false}
    if lhs.knowledgeStandard != rhs.knowledgeStandard {return false}
    if lhs.abilityStandard != rhs.abilityStandard {return false}
    if lhs.characterStandard != rhs.characterStandard {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.skillHours != rhs.skillHours {return false}
    if lhs.knowledgeHours != rhs.knowledgeHours {return false}
    if lhs.courseModules != rhs.courseModules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateEduSchemeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateEduSchemeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "edu_scheme_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.eduSchemeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.eduSchemeID != 0 {
      try visitor.visitSingularInt64Field(value: self.eduSchemeID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateEduSchemeResponse, rhs: GloryApi_CreateEduSchemeResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.eduSchemeID != rhs.eduSchemeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateEduSchemeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateEduSchemeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "name"),
    3: .same(proto: "major"),
    4: .same(proto: "goal"),
    5: .same(proto: "type"),
    6: .standard(proto: "knowledge_standard"),
    7: .standard(proto: "ability_standard"),
    8: .standard(proto: "character_standard"),
    9: .standard(proto: "group_name"),
    10: .standard(proto: "edu_scheme_id"),
    11: .standard(proto: "skill_hours"),
    12: .standard(proto: "knowledge_hours"),
    13: .standard(proto: "course_modules"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.goal) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.knowledgeStandard) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.abilityStandard) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.characterStandard) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.eduSchemeID) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.skillHours) }()
      case 12: try { try decoder.decodeSingularFloatField(value: &self.knowledgeHours) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.courseModules) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.goal.isEmpty {
      try visitor.visitSingularStringField(value: self.goal, fieldNumber: 4)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 5)
    }
    if !self.knowledgeStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.knowledgeStandard, fieldNumber: 6)
    }
    if !self.abilityStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.abilityStandard, fieldNumber: 7)
    }
    if !self.characterStandard.isEmpty {
      try visitor.visitSingularStringField(value: self.characterStandard, fieldNumber: 8)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 9)
    }
    if self.eduSchemeID != 0 {
      try visitor.visitSingularInt64Field(value: self.eduSchemeID, fieldNumber: 10)
    }
    if self.skillHours != 0 {
      try visitor.visitSingularFloatField(value: self.skillHours, fieldNumber: 11)
    }
    if self.knowledgeHours != 0 {
      try visitor.visitSingularFloatField(value: self.knowledgeHours, fieldNumber: 12)
    }
    if !self.courseModules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.courseModules, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateEduSchemeRequest, rhs: GloryApi_UpdateEduSchemeRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.name != rhs.name {return false}
    if lhs.major != rhs.major {return false}
    if lhs.goal != rhs.goal {return false}
    if lhs.type != rhs.type {return false}
    if lhs.knowledgeStandard != rhs.knowledgeStandard {return false}
    if lhs.abilityStandard != rhs.abilityStandard {return false}
    if lhs.characterStandard != rhs.characterStandard {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.eduSchemeID != rhs.eduSchemeID {return false}
    if lhs.skillHours != rhs.skillHours {return false}
    if lhs.knowledgeHours != rhs.knowledgeHours {return false}
    if lhs.courseModules != rhs.courseModules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateEduSchemeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateEduSchemeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateEduSchemeResponse, rhs: GloryApi_UpdateEduSchemeResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteEduSchemeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteEduSchemeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "edu_scheme_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.eduSchemeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.eduSchemeID != 0 {
      try visitor.visitSingularInt64Field(value: self.eduSchemeID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteEduSchemeRequest, rhs: GloryApi_DeleteEduSchemeRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.eduSchemeID != rhs.eduSchemeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteEduSchemeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteEduSchemeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteEduSchemeResponse, rhs: GloryApi_DeleteEduSchemeResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListEduSchemeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListEduSchemeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .same(proto: "major"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 4)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListEduSchemeRequest, rhs: GloryApi_ListEduSchemeRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.major != rhs.major {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListEduSchemeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListEduSchemeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "edu_scheme_list"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.eduSchemeList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.eduSchemeList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.eduSchemeList, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListEduSchemeResponse, rhs: GloryApi_ListEduSchemeResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.eduSchemeList != rhs.eduSchemeList {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_EduSchemeDetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EduSchemeDetailRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "edu_scheme_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.eduSchemeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.eduSchemeID != 0 {
      try visitor.visitSingularInt64Field(value: self.eduSchemeID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_EduSchemeDetailRequest, rhs: GloryApi_EduSchemeDetailRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.eduSchemeID != rhs.eduSchemeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_EduSchemeDetailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EduSchemeDetailResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "scheme_detail"),
    3: .standard(proto: "clas_ids"),
  ]

  fileprivate class _StorageClass {
    var _baseResp: Base_BaseResponse? = nil
    var _schemeDetail: GloryApi_EduScheme? = nil
    var _clasIds: [Int64] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _baseResp = source._baseResp
      _schemeDetail = source._schemeDetail
      _clasIds = source._clasIds
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._baseResp) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._schemeDetail) }()
        case 3: try { try decoder.decodeRepeatedInt64Field(value: &_storage._clasIds) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._baseResp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._schemeDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._clasIds.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._clasIds, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_EduSchemeDetailResponse, rhs: GloryApi_EduSchemeDetailResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseResp != rhs_storage._baseResp {return false}
        if _storage._schemeDetail != rhs_storage._schemeDetail {return false}
        if _storage._clasIds != rhs_storage._clasIds {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DistributeEduSchemeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DistributeEduSchemeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "edu_scheme_id"),
    3: .standard(proto: "clas_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.eduSchemeID) }()
      case 3: try { try decoder.decodeRepeatedInt64Field(value: &self.clasIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.eduSchemeID != 0 {
      try visitor.visitSingularInt64Field(value: self.eduSchemeID, fieldNumber: 2)
    }
    if !self.clasIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.clasIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DistributeEduSchemeRequest, rhs: GloryApi_DistributeEduSchemeRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.eduSchemeID != rhs.eduSchemeID {return false}
    if lhs.clasIds != rhs.clasIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DistributeEduSchemeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DistributeEduSchemeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DistributeEduSchemeResponse, rhs: GloryApi_DistributeEduSchemeResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetEduSchemeLikeCourseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEduSchemeLikeCourseRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "edu_scheme_id"),
    3: .same(proto: "role"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.eduSchemeID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.role) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.eduSchemeID != 0 {
      try visitor.visitSingularInt64Field(value: self.eduSchemeID, fieldNumber: 2)
    }
    if !self.role.isEmpty {
      try visitor.visitSingularStringField(value: self.role, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetEduSchemeLikeCourseRequest, rhs: GloryApi_GetEduSchemeLikeCourseRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.eduSchemeID != rhs.eduSchemeID {return false}
    if lhs.role != rhs.role {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetEduSchemeLikeCourseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEduSchemeLikeCourseResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .same(proto: "course"),
    3: .standard(proto: "course_progress"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._course) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.courseProgress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._course {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.courseProgress != 0 {
      try visitor.visitSingularInt64Field(value: self.courseProgress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetEduSchemeLikeCourseResponse, rhs: GloryApi_GetEduSchemeLikeCourseResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._course != rhs._course {return false}
    if lhs.courseProgress != rhs.courseProgress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
