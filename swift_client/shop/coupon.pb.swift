// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shop/coupon.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_CreateCouponRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var couponType: String = String()

  var couponTitle: String = String()

  var couponMinUseAmount: Double = 0

  var couponAmount: Double = 0

  var couponTotal: Int64 = 0

  var couponLimit: String = String()

  var personMaxTotal: Int64 = 0

  var distributedStartTime: Int64 = 0

  var distributedEndTime: Int64 = 0

  var useStartTime: Int64 = 0

  var useEndTime: Int64 = 0

  var productIds: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_CreateCouponResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ListCouponRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_CouponDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var couponID: Int64 {
    get {return _storage._couponID}
    set {_uniqueStorage()._couponID = newValue}
  }

  var shopID: Int64 {
    get {return _storage._shopID}
    set {_uniqueStorage()._shopID = newValue}
  }

  var couponType: String {
    get {return _storage._couponType}
    set {_uniqueStorage()._couponType = newValue}
  }

  var couponTitle: String {
    get {return _storage._couponTitle}
    set {_uniqueStorage()._couponTitle = newValue}
  }

  var couponMinUseAmount: Double {
    get {return _storage._couponMinUseAmount}
    set {_uniqueStorage()._couponMinUseAmount = newValue}
  }

  var couponAmount: Double {
    get {return _storage._couponAmount}
    set {_uniqueStorage()._couponAmount = newValue}
  }

  var couponTotal: Int64 {
    get {return _storage._couponTotal}
    set {_uniqueStorage()._couponTotal = newValue}
  }

  var couponLimit: String {
    get {return _storage._couponLimit}
    set {_uniqueStorage()._couponLimit = newValue}
  }

  var personMaxTotal: Int64 {
    get {return _storage._personMaxTotal}
    set {_uniqueStorage()._personMaxTotal = newValue}
  }

  var distributedStartTime: Int64 {
    get {return _storage._distributedStartTime}
    set {_uniqueStorage()._distributedStartTime = newValue}
  }

  var distributedEndTime: Int64 {
    get {return _storage._distributedEndTime}
    set {_uniqueStorage()._distributedEndTime = newValue}
  }

  var useStartTime: Int64 {
    get {return _storage._useStartTime}
    set {_uniqueStorage()._useStartTime = newValue}
  }

  var useEndTime: Int64 {
    get {return _storage._useEndTime}
    set {_uniqueStorage()._useEndTime = newValue}
  }

  var couponStatus: String {
    get {return _storage._couponStatus}
    set {_uniqueStorage()._couponStatus = newValue}
  }

  var distributedStatus: String {
    get {return _storage._distributedStatus}
    set {_uniqueStorage()._distributedStatus = newValue}
  }

  var distributedTotal: Int64 {
    get {return _storage._distributedTotal}
    set {_uniqueStorage()._distributedTotal = newValue}
  }

  var usedTotal: Int64 {
    get {return _storage._usedTotal}
    set {_uniqueStorage()._usedTotal = newValue}
  }

  var productIds: [Int64] {
    get {return _storage._productIds}
    set {_uniqueStorage()._productIds = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_ListCouponResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var couponDetail: [GloryApi_CouponDetail] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_GetCouponDetailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var couponID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetCouponDetailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var couponDetail: GloryApi_CouponDetail {
    get {return _couponDetail ?? GloryApi_CouponDetail()}
    set {_couponDetail = newValue}
  }
  /// Returns true if `couponDetail` has been explicitly set.
  var hasCouponDetail: Bool {return self._couponDetail != nil}
  /// Clears the value of `couponDetail`. Subsequent reads from it will return its default value.
  mutating func clearCouponDetail() {self._couponDetail = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _couponDetail: GloryApi_CouponDetail? = nil
}

struct GloryApi_UpdateCouponRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var couponID: Int64 = 0

  var couponType: String = String()

  var couponTitle: String = String()

  var couponMinUseAmount: Double = 0

  var couponAmount: Double = 0

  var couponTotal: Int64 = 0

  var couponLimit: String = String()

  var personMaxTotal: Int64 = 0

  var distributedStartTime: Int64 = 0

  var distributedEndTime: Int64 = 0

  var useStartTime: Int64 = 0

  var useEndTime: Int64 = 0

  var productIds: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_UpdateCouponResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_AbolishCouponRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var couponID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_AbolishCouponResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_UpdateCouponDistributionStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var couponID: Int64 = 0

  var distributionAction: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_UpdateCouponDistributionStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_DeleteCouponRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var couponID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_DeleteCouponResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_CreateCouponRequest: @unchecked Sendable {}
extension GloryApi_CreateCouponResponse: @unchecked Sendable {}
extension GloryApi_ListCouponRequest: @unchecked Sendable {}
extension GloryApi_CouponDetail: @unchecked Sendable {}
extension GloryApi_ListCouponResponse: @unchecked Sendable {}
extension GloryApi_GetCouponDetailRequest: @unchecked Sendable {}
extension GloryApi_GetCouponDetailResponse: @unchecked Sendable {}
extension GloryApi_UpdateCouponRequest: @unchecked Sendable {}
extension GloryApi_UpdateCouponResponse: @unchecked Sendable {}
extension GloryApi_AbolishCouponRequest: @unchecked Sendable {}
extension GloryApi_AbolishCouponResponse: @unchecked Sendable {}
extension GloryApi_UpdateCouponDistributionStatusRequest: @unchecked Sendable {}
extension GloryApi_UpdateCouponDistributionStatusResponse: @unchecked Sendable {}
extension GloryApi_DeleteCouponRequest: @unchecked Sendable {}
extension GloryApi_DeleteCouponResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_CreateCouponRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateCouponRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    3: .standard(proto: "coupon_type"),
    4: .standard(proto: "coupon_title"),
    5: .standard(proto: "coupon_min_use_amount"),
    6: .standard(proto: "coupon_amount"),
    7: .standard(proto: "coupon_total"),
    8: .standard(proto: "coupon_limit"),
    9: .standard(proto: "person_max_total"),
    10: .standard(proto: "distributed_start_time"),
    11: .standard(proto: "distributed_end_time"),
    12: .standard(proto: "use_start_time"),
    13: .standard(proto: "use_end_time"),
    14: .standard(proto: "product_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.couponType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.couponTitle) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.couponMinUseAmount) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.couponAmount) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.couponTotal) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.couponLimit) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.personMaxTotal) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.distributedStartTime) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.distributedEndTime) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.useStartTime) }()
      case 13: try { try decoder.decodeSingularInt64Field(value: &self.useEndTime) }()
      case 14: try { try decoder.decodeRepeatedInt64Field(value: &self.productIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if !self.couponType.isEmpty {
      try visitor.visitSingularStringField(value: self.couponType, fieldNumber: 3)
    }
    if !self.couponTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.couponTitle, fieldNumber: 4)
    }
    if self.couponMinUseAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.couponMinUseAmount, fieldNumber: 5)
    }
    if self.couponAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.couponAmount, fieldNumber: 6)
    }
    if self.couponTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.couponTotal, fieldNumber: 7)
    }
    if !self.couponLimit.isEmpty {
      try visitor.visitSingularStringField(value: self.couponLimit, fieldNumber: 8)
    }
    if self.personMaxTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.personMaxTotal, fieldNumber: 9)
    }
    if self.distributedStartTime != 0 {
      try visitor.visitSingularInt64Field(value: self.distributedStartTime, fieldNumber: 10)
    }
    if self.distributedEndTime != 0 {
      try visitor.visitSingularInt64Field(value: self.distributedEndTime, fieldNumber: 11)
    }
    if self.useStartTime != 0 {
      try visitor.visitSingularInt64Field(value: self.useStartTime, fieldNumber: 12)
    }
    if self.useEndTime != 0 {
      try visitor.visitSingularInt64Field(value: self.useEndTime, fieldNumber: 13)
    }
    if !self.productIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.productIds, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateCouponRequest, rhs: GloryApi_CreateCouponRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.couponType != rhs.couponType {return false}
    if lhs.couponTitle != rhs.couponTitle {return false}
    if lhs.couponMinUseAmount != rhs.couponMinUseAmount {return false}
    if lhs.couponAmount != rhs.couponAmount {return false}
    if lhs.couponTotal != rhs.couponTotal {return false}
    if lhs.couponLimit != rhs.couponLimit {return false}
    if lhs.personMaxTotal != rhs.personMaxTotal {return false}
    if lhs.distributedStartTime != rhs.distributedStartTime {return false}
    if lhs.distributedEndTime != rhs.distributedEndTime {return false}
    if lhs.useStartTime != rhs.useStartTime {return false}
    if lhs.useEndTime != rhs.useEndTime {return false}
    if lhs.productIds != rhs.productIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateCouponResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateCouponResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateCouponResponse, rhs: GloryApi_CreateCouponResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListCouponRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListCouponRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListCouponRequest, rhs: GloryApi_ListCouponRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CouponDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CouponDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "coupon_id"),
    2: .standard(proto: "shop_id"),
    3: .standard(proto: "coupon_type"),
    4: .standard(proto: "coupon_title"),
    5: .standard(proto: "coupon_min_use_amount"),
    6: .standard(proto: "coupon_amount"),
    7: .standard(proto: "coupon_total"),
    8: .standard(proto: "coupon_limit"),
    9: .standard(proto: "person_max_total"),
    10: .standard(proto: "distributed_start_time"),
    11: .standard(proto: "distributed_end_time"),
    12: .standard(proto: "use_start_time"),
    13: .standard(proto: "use_end_time"),
    14: .standard(proto: "coupon_status"),
    15: .standard(proto: "distributed_status"),
    16: .standard(proto: "distributed_total"),
    17: .standard(proto: "used_total"),
    18: .standard(proto: "product_ids"),
  ]

  fileprivate class _StorageClass {
    var _couponID: Int64 = 0
    var _shopID: Int64 = 0
    var _couponType: String = String()
    var _couponTitle: String = String()
    var _couponMinUseAmount: Double = 0
    var _couponAmount: Double = 0
    var _couponTotal: Int64 = 0
    var _couponLimit: String = String()
    var _personMaxTotal: Int64 = 0
    var _distributedStartTime: Int64 = 0
    var _distributedEndTime: Int64 = 0
    var _useStartTime: Int64 = 0
    var _useEndTime: Int64 = 0
    var _couponStatus: String = String()
    var _distributedStatus: String = String()
    var _distributedTotal: Int64 = 0
    var _usedTotal: Int64 = 0
    var _productIds: [Int64] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _couponID = source._couponID
      _shopID = source._shopID
      _couponType = source._couponType
      _couponTitle = source._couponTitle
      _couponMinUseAmount = source._couponMinUseAmount
      _couponAmount = source._couponAmount
      _couponTotal = source._couponTotal
      _couponLimit = source._couponLimit
      _personMaxTotal = source._personMaxTotal
      _distributedStartTime = source._distributedStartTime
      _distributedEndTime = source._distributedEndTime
      _useStartTime = source._useStartTime
      _useEndTime = source._useEndTime
      _couponStatus = source._couponStatus
      _distributedStatus = source._distributedStatus
      _distributedTotal = source._distributedTotal
      _usedTotal = source._usedTotal
      _productIds = source._productIds
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._couponID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._shopID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._couponType) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._couponTitle) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._couponMinUseAmount) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._couponAmount) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._couponTotal) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._couponLimit) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._personMaxTotal) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._distributedStartTime) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._distributedEndTime) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._useStartTime) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._useEndTime) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._couponStatus) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._distributedStatus) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._distributedTotal) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._usedTotal) }()
        case 18: try { try decoder.decodeRepeatedInt64Field(value: &_storage._productIds) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._couponID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._couponID, fieldNumber: 1)
      }
      if _storage._shopID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shopID, fieldNumber: 2)
      }
      if !_storage._couponType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._couponType, fieldNumber: 3)
      }
      if !_storage._couponTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._couponTitle, fieldNumber: 4)
      }
      if _storage._couponMinUseAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._couponMinUseAmount, fieldNumber: 5)
      }
      if _storage._couponAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._couponAmount, fieldNumber: 6)
      }
      if _storage._couponTotal != 0 {
        try visitor.visitSingularInt64Field(value: _storage._couponTotal, fieldNumber: 7)
      }
      if !_storage._couponLimit.isEmpty {
        try visitor.visitSingularStringField(value: _storage._couponLimit, fieldNumber: 8)
      }
      if _storage._personMaxTotal != 0 {
        try visitor.visitSingularInt64Field(value: _storage._personMaxTotal, fieldNumber: 9)
      }
      if _storage._distributedStartTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._distributedStartTime, fieldNumber: 10)
      }
      if _storage._distributedEndTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._distributedEndTime, fieldNumber: 11)
      }
      if _storage._useStartTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._useStartTime, fieldNumber: 12)
      }
      if _storage._useEndTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._useEndTime, fieldNumber: 13)
      }
      if !_storage._couponStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._couponStatus, fieldNumber: 14)
      }
      if !_storage._distributedStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._distributedStatus, fieldNumber: 15)
      }
      if _storage._distributedTotal != 0 {
        try visitor.visitSingularInt64Field(value: _storage._distributedTotal, fieldNumber: 16)
      }
      if _storage._usedTotal != 0 {
        try visitor.visitSingularInt64Field(value: _storage._usedTotal, fieldNumber: 17)
      }
      if !_storage._productIds.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._productIds, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CouponDetail, rhs: GloryApi_CouponDetail) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._couponID != rhs_storage._couponID {return false}
        if _storage._shopID != rhs_storage._shopID {return false}
        if _storage._couponType != rhs_storage._couponType {return false}
        if _storage._couponTitle != rhs_storage._couponTitle {return false}
        if _storage._couponMinUseAmount != rhs_storage._couponMinUseAmount {return false}
        if _storage._couponAmount != rhs_storage._couponAmount {return false}
        if _storage._couponTotal != rhs_storage._couponTotal {return false}
        if _storage._couponLimit != rhs_storage._couponLimit {return false}
        if _storage._personMaxTotal != rhs_storage._personMaxTotal {return false}
        if _storage._distributedStartTime != rhs_storage._distributedStartTime {return false}
        if _storage._distributedEndTime != rhs_storage._distributedEndTime {return false}
        if _storage._useStartTime != rhs_storage._useStartTime {return false}
        if _storage._useEndTime != rhs_storage._useEndTime {return false}
        if _storage._couponStatus != rhs_storage._couponStatus {return false}
        if _storage._distributedStatus != rhs_storage._distributedStatus {return false}
        if _storage._distributedTotal != rhs_storage._distributedTotal {return false}
        if _storage._usedTotal != rhs_storage._usedTotal {return false}
        if _storage._productIds != rhs_storage._productIds {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListCouponResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListCouponResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "coupon_detail"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.couponDetail) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.couponDetail.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.couponDetail, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListCouponResponse, rhs: GloryApi_ListCouponResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.couponDetail != rhs.couponDetail {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetCouponDetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCouponDetailRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "coupon_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.couponID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.couponID != 0 {
      try visitor.visitSingularInt64Field(value: self.couponID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetCouponDetailRequest, rhs: GloryApi_GetCouponDetailRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.couponID != rhs.couponID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetCouponDetailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCouponDetailResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "coupon_detail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._couponDetail) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._couponDetail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetCouponDetailResponse, rhs: GloryApi_GetCouponDetailResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._couponDetail != rhs._couponDetail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateCouponRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCouponRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "coupon_id"),
    3: .standard(proto: "coupon_type"),
    4: .standard(proto: "coupon_title"),
    5: .standard(proto: "coupon_min_use_amount"),
    6: .standard(proto: "coupon_amount"),
    7: .standard(proto: "coupon_total"),
    8: .standard(proto: "coupon_limit"),
    9: .standard(proto: "person_max_total"),
    10: .standard(proto: "distributed_start_time"),
    11: .standard(proto: "distributed_end_time"),
    12: .standard(proto: "use_start_time"),
    13: .standard(proto: "use_end_time"),
    14: .standard(proto: "product_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.couponID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.couponType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.couponTitle) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.couponMinUseAmount) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.couponAmount) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.couponTotal) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.couponLimit) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.personMaxTotal) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.distributedStartTime) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.distributedEndTime) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.useStartTime) }()
      case 13: try { try decoder.decodeSingularInt64Field(value: &self.useEndTime) }()
      case 14: try { try decoder.decodeRepeatedInt64Field(value: &self.productIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.couponID != 0 {
      try visitor.visitSingularInt64Field(value: self.couponID, fieldNumber: 2)
    }
    if !self.couponType.isEmpty {
      try visitor.visitSingularStringField(value: self.couponType, fieldNumber: 3)
    }
    if !self.couponTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.couponTitle, fieldNumber: 4)
    }
    if self.couponMinUseAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.couponMinUseAmount, fieldNumber: 5)
    }
    if self.couponAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.couponAmount, fieldNumber: 6)
    }
    if self.couponTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.couponTotal, fieldNumber: 7)
    }
    if !self.couponLimit.isEmpty {
      try visitor.visitSingularStringField(value: self.couponLimit, fieldNumber: 8)
    }
    if self.personMaxTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.personMaxTotal, fieldNumber: 9)
    }
    if self.distributedStartTime != 0 {
      try visitor.visitSingularInt64Field(value: self.distributedStartTime, fieldNumber: 10)
    }
    if self.distributedEndTime != 0 {
      try visitor.visitSingularInt64Field(value: self.distributedEndTime, fieldNumber: 11)
    }
    if self.useStartTime != 0 {
      try visitor.visitSingularInt64Field(value: self.useStartTime, fieldNumber: 12)
    }
    if self.useEndTime != 0 {
      try visitor.visitSingularInt64Field(value: self.useEndTime, fieldNumber: 13)
    }
    if !self.productIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.productIds, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateCouponRequest, rhs: GloryApi_UpdateCouponRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.couponID != rhs.couponID {return false}
    if lhs.couponType != rhs.couponType {return false}
    if lhs.couponTitle != rhs.couponTitle {return false}
    if lhs.couponMinUseAmount != rhs.couponMinUseAmount {return false}
    if lhs.couponAmount != rhs.couponAmount {return false}
    if lhs.couponTotal != rhs.couponTotal {return false}
    if lhs.couponLimit != rhs.couponLimit {return false}
    if lhs.personMaxTotal != rhs.personMaxTotal {return false}
    if lhs.distributedStartTime != rhs.distributedStartTime {return false}
    if lhs.distributedEndTime != rhs.distributedEndTime {return false}
    if lhs.useStartTime != rhs.useStartTime {return false}
    if lhs.useEndTime != rhs.useEndTime {return false}
    if lhs.productIds != rhs.productIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateCouponResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCouponResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateCouponResponse, rhs: GloryApi_UpdateCouponResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_AbolishCouponRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AbolishCouponRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "coupon_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.couponID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.couponID != 0 {
      try visitor.visitSingularInt64Field(value: self.couponID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_AbolishCouponRequest, rhs: GloryApi_AbolishCouponRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.couponID != rhs.couponID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_AbolishCouponResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AbolishCouponResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_AbolishCouponResponse, rhs: GloryApi_AbolishCouponResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateCouponDistributionStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCouponDistributionStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "coupon_id"),
    3: .standard(proto: "distribution_action"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.couponID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.distributionAction) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.couponID != 0 {
      try visitor.visitSingularInt64Field(value: self.couponID, fieldNumber: 2)
    }
    if !self.distributionAction.isEmpty {
      try visitor.visitSingularStringField(value: self.distributionAction, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateCouponDistributionStatusRequest, rhs: GloryApi_UpdateCouponDistributionStatusRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.couponID != rhs.couponID {return false}
    if lhs.distributionAction != rhs.distributionAction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateCouponDistributionStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCouponDistributionStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateCouponDistributionStatusResponse, rhs: GloryApi_UpdateCouponDistributionStatusResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteCouponRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteCouponRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "coupon_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.couponID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.couponID != 0 {
      try visitor.visitSingularInt64Field(value: self.couponID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteCouponRequest, rhs: GloryApi_DeleteCouponRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.couponID != rhs.couponID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteCouponResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteCouponResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteCouponResponse, rhs: GloryApi_DeleteCouponResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
