// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shop/order.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_Order {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  var userID: Int64 = 0

  var shopID: Int64 = 0

  var sellerID: Int64 = 0

  var tenantID: Int64 = 0

  var orderStatus: String = String()

  var totalAmount: Double = 0

  var originalAmount: Double = 0

  var tax: Double = 0

  var deliverFee: Double = 0

  var currency: String = String()

  var deliverAddress: String = String()

  var deliverPost: Int32 = 0

  var contactName: String = String()

  var contactPhone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_Images {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productImageID: Int64 = 0

  var imageType: String = String()

  var imageURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_CreateOrderInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  var userID: Int64 {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var shopID: Int64 {
    get {return _storage._shopID}
    set {_uniqueStorage()._shopID = newValue}
  }

  var sellerID: Int64 {
    get {return _storage._sellerID}
    set {_uniqueStorage()._sellerID = newValue}
  }

  var tenantID: Int64 {
    get {return _storage._tenantID}
    set {_uniqueStorage()._tenantID = newValue}
  }

  var totalAmount: Double {
    get {return _storage._totalAmount}
    set {_uniqueStorage()._totalAmount = newValue}
  }

  var originalAmount: Double {
    get {return _storage._originalAmount}
    set {_uniqueStorage()._originalAmount = newValue}
  }

  var tax: Double {
    get {return _storage._tax}
    set {_uniqueStorage()._tax = newValue}
  }

  var deliverFee: Double {
    get {return _storage._deliverFee}
    set {_uniqueStorage()._deliverFee = newValue}
  }

  ///货币类型  CNY :人民币 , COIN:虚拟币 不区分大小写
  var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  var deliverAddress: String {
    get {return _storage._deliverAddress}
    set {_uniqueStorage()._deliverAddress = newValue}
  }

  var deliverPost: Int32 {
    get {return _storage._deliverPost}
    set {_uniqueStorage()._deliverPost = newValue}
  }

  var contactName: String {
    get {return _storage._contactName}
    set {_uniqueStorage()._contactName = newValue}
  }

  var contactPhone: String {
    get {return _storage._contactPhone}
    set {_uniqueStorage()._contactPhone = newValue}
  }

  var skuInfo: [GloryApi_SkuInfo] {
    get {return _storage._skuInfo}
    set {_uniqueStorage()._skuInfo = newValue}
  }

  var message: String {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  var buyerName: String {
    get {return _storage._buyerName}
    set {_uniqueStorage()._buyerName = newValue}
  }

  ///直播房间id
  var roomID: Int64 {
    get {return _storage._roomID}
    set {_uniqueStorage()._roomID = newValue}
  }

  ///live:直播间订单,normal:商城订单;video:短视频订单
  var channel: String {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  ///流水id,下单时候 货币订单、虚拟币订单,分别进行合并,合并后称之为 trans_id(流水id)
  var transID: Int64 {
    get {return _storage._transID}
    set {_uniqueStorage()._transID = newValue}
  }

  /// 订单使用优惠券ID
  var couponID: Int64 {
    get {return _storage._couponID}
    set {_uniqueStorage()._couponID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_SkuInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var skuID: Int64 = 0

  var number: Int32 = 0

  var activityID: Int64 = 0

  /// 短视频: video; 商城: normal; 直播: live
  var channel: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_OrderSku {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderSkuID: Int64 = 0

  var orderID: Int64 = 0

  var skuID: Int64 = 0

  var sellerID: Int64 = 0

  var shopID: Int64 = 0

  var quantity: Int32 = 0

  var freightTemplateID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///订单信息
struct GloryApi_OrderInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///订单id
  var orderID: Int64 {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  ///订单状态
  var orderStatus: String {
    get {return _storage._orderStatus}
    set {_uniqueStorage()._orderStatus = newValue}
  }

  /// 订单取消原因
  var orderCancelledReason: String {
    get {return _storage._orderCancelledReason}
    set {_uniqueStorage()._orderCancelledReason = newValue}
  }

  ///下单时间
  var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  ///订单类型 created 待支付   paid 待发货   shipped 已发货   after_sales 售后中    completed 已完成  closed 已关闭
  var orderType: String {
    get {return _storage._orderType}
    set {_uniqueStorage()._orderType = newValue}
  }

  ///支付方式  coin 虚拟币支付  weixin 微信支付
  var payType: String {
    get {return _storage._payType}
    set {_uniqueStorage()._payType = newValue}
  }

  ///付款时间
  var payTime: String {
    get {return _storage._payTime}
    set {_uniqueStorage()._payTime = newValue}
  }

  ///商品总价 = 原价+运费
  var totalAmount: Double {
    get {return _storage._totalAmount}
    set {_uniqueStorage()._totalAmount = newValue}
  }

  ///原价
  var originalAmount: Double {
    get {return _storage._originalAmount}
    set {_uniqueStorage()._originalAmount = newValue}
  }

  ///运费
  var deliverFee: Double {
    get {return _storage._deliverFee}
    set {_uniqueStorage()._deliverFee = newValue}
  }

  ///优惠金额
  var discountAmount: Double {
    get {return _storage._discountAmount}
    set {_uniqueStorage()._discountAmount = newValue}
  }

  ///实付金额
  var paymentAmount: Double {
    get {return _storage._paymentAmount}
    set {_uniqueStorage()._paymentAmount = newValue}
  }

  ///应付金额
  var payableAmount: Double {
    get {return _storage._payableAmount}
    set {_uniqueStorage()._payableAmount = newValue}
  }

  ///商品信息
  var productInfo: [GloryApi_ProductInfo] {
    get {return _storage._productInfo}
    set {_uniqueStorage()._productInfo = newValue}
  }

  var shopID: Int64 {
    get {return _storage._shopID}
    set {_uniqueStorage()._shopID = newValue}
  }

  ///商店名字
  var shopName: String {
    get {return _storage._shopName}
    set {_uniqueStorage()._shopName = newValue}
  }

  ///商店logo
  var shopLogo: String {
    get {return _storage._shopLogo}
    set {_uniqueStorage()._shopLogo = newValue}
  }

  ///货币单位  CNY :人民币    COIN:虚拟币 不区分大小写
  var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  ///收货人
  var contactName: String {
    get {return _storage._contactName}
    set {_uniqueStorage()._contactName = newValue}
  }

  ///购买人
  var buyerName: String {
    get {return _storage._buyerName}
    set {_uniqueStorage()._buyerName = newValue}
  }

  ///收获地址
  var deliverAddress: String {
    get {return _storage._deliverAddress}
    set {_uniqueStorage()._deliverAddress = newValue}
  }

  /// 优惠券详情
  var couponDetail: GloryApi_CouponDetail {
    get {return _storage._couponDetail ?? GloryApi_CouponDetail()}
    set {_uniqueStorage()._couponDetail = newValue}
  }
  /// Returns true if `couponDetail` has been explicitly set.
  var hasCouponDetail: Bool {return _storage._couponDetail != nil}
  /// Clears the value of `couponDetail`. Subsequent reads from it will return its default value.
  mutating func clearCouponDetail() {_uniqueStorage()._couponDetail = nil}

  var channel: String {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///收获与配送信息
struct GloryApi_DeliverInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///收获地址
  var deliverAddress: String = String()

  ///邮编
  var deliverPost: Int32 = 0

  ///收获人
  var contactName: String = String()

  ///收货人手机
  var contactPhone: String = String()

  ///买家名字 或昵称
  var buyerName: String = String()

  ///买家留言
  var buyerComment: String = String()

  ///配送方式
  var deliveryMethod: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///商品信息
struct GloryApi_ProductInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productID: Int64 = 0

  var productName: String = String()

  var sku: GloryApi_Sku {
    get {return _sku ?? GloryApi_Sku()}
    set {_sku = newValue}
  }
  /// Returns true if `sku` has been explicitly set.
  var hasSku: Bool {return self._sku != nil}
  /// Clears the value of `sku`. Subsequent reads from it will return its default value.
  mutating func clearSku() {self._sku = nil}

  ///售后信息
  var serviceInfo: String = String()

  ///单价
  var unitPrice: Double = 0

  ///数量
  var quantity: Int32 = 0

  ///优惠信息
  var discountInfo: String = String()

  ///商品图片
  var images: [GloryApi_Images] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sku: GloryApi_Sku? = nil
}

struct GloryApi_OrderWithAuthor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderInfo: GloryApi_OrderInfo {
    get {return _orderInfo ?? GloryApi_OrderInfo()}
    set {_orderInfo = newValue}
  }
  /// Returns true if `orderInfo` has been explicitly set.
  var hasOrderInfo: Bool {return self._orderInfo != nil}
  /// Clears the value of `orderInfo`. Subsequent reads from it will return its default value.
  mutating func clearOrderInfo() {self._orderInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _orderInfo: GloryApi_OrderInfo? = nil
}

struct GloryApi_CreateOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderInfo: [GloryApi_CreateOrderInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_CreateOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var transRes: [GloryApi_TransResponseInfo] = []

  ///人民币总金额，单位为分 微信支付使用
  var cnyTotal: Double = 0

  ///虚拟币总金额
  var coinTotal: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_TransResponseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transID: Int64 = 0

  var order: [GloryApi_OrderResponse] = []

  ///货币类型  CNY :人民币 , COIN:虚拟币
  var currency: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_OrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: Int64 = 0

  ///货币类型  CNY :人民币 , COIN:虚拟币
  var currency: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_GetOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var orderInfo: GloryApi_OrderInfo {
    get {return _orderInfo ?? GloryApi_OrderInfo()}
    set {_orderInfo = newValue}
  }
  /// Returns true if `orderInfo` has been explicitly set.
  var hasOrderInfo: Bool {return self._orderInfo != nil}
  /// Clears the value of `orderInfo`. Subsequent reads from it will return its default value.
  mutating func clearOrderInfo() {self._orderInfo = nil}

  ///repeated ProductInfo productInfo = 3;
  var deliverInfo: GloryApi_DeliverInfo {
    get {return _deliverInfo ?? GloryApi_DeliverInfo()}
    set {_deliverInfo = newValue}
  }
  /// Returns true if `deliverInfo` has been explicitly set.
  var hasDeliverInfo: Bool {return self._deliverInfo != nil}
  /// Clears the value of `deliverInfo`. Subsequent reads from it will return its default value.
  mutating func clearDeliverInfo() {self._deliverInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _orderInfo: GloryApi_OrderInfo? = nil
  fileprivate var _deliverInfo: GloryApi_DeliverInfo? = nil
}

struct GloryApi_UpdateOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var order: GloryApi_Order {
    get {return _order ?? GloryApi_Order()}
    set {_order = newValue}
  }
  /// Returns true if `order` has been explicitly set.
  var hasOrder: Bool {return self._order != nil}
  /// Clears the value of `order`. Subsequent reads from it will return its default value.
  mutating func clearOrder() {self._order = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _order: GloryApi_Order? = nil
}

struct GloryApi_UpdateOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ListOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var userID: Int64 = 0

  var sellerID: Int64 = 0

  var tenantID: Int64 = 0

  var shopID: Int64 = 0

  var orderStatus: String = String()

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var orderDetail: [GloryApi_OrderWithAuthor] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_DeleteOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_DeleteOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ShipGoodsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ShipGoodsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ConfirmReceiptGoodsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ConfirmReceiptGoodsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_GetOrderStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetOrderStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var orderStatus: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_CancelOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_CancelOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ShipGoodsInBatchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderID: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ShipGoodsInBatchesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_FreeShippingInBatchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var orderID: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_FreeShippingInBatchesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_Order: @unchecked Sendable {}
extension GloryApi_Images: @unchecked Sendable {}
extension GloryApi_CreateOrderInfo: @unchecked Sendable {}
extension GloryApi_SkuInfo: @unchecked Sendable {}
extension GloryApi_OrderSku: @unchecked Sendable {}
extension GloryApi_OrderInfo: @unchecked Sendable {}
extension GloryApi_DeliverInfo: @unchecked Sendable {}
extension GloryApi_ProductInfo: @unchecked Sendable {}
extension GloryApi_OrderWithAuthor: @unchecked Sendable {}
extension GloryApi_CreateOrderRequest: @unchecked Sendable {}
extension GloryApi_CreateOrderResponse: @unchecked Sendable {}
extension GloryApi_TransResponseInfo: @unchecked Sendable {}
extension GloryApi_OrderResponse: @unchecked Sendable {}
extension GloryApi_GetOrderRequest: @unchecked Sendable {}
extension GloryApi_GetOrderResponse: @unchecked Sendable {}
extension GloryApi_UpdateOrderRequest: @unchecked Sendable {}
extension GloryApi_UpdateOrderResponse: @unchecked Sendable {}
extension GloryApi_ListOrderRequest: @unchecked Sendable {}
extension GloryApi_ListOrderResponse: @unchecked Sendable {}
extension GloryApi_DeleteOrderRequest: @unchecked Sendable {}
extension GloryApi_DeleteOrderResponse: @unchecked Sendable {}
extension GloryApi_ShipGoodsRequest: @unchecked Sendable {}
extension GloryApi_ShipGoodsResponse: @unchecked Sendable {}
extension GloryApi_ConfirmReceiptGoodsRequest: @unchecked Sendable {}
extension GloryApi_ConfirmReceiptGoodsResponse: @unchecked Sendable {}
extension GloryApi_GetOrderStatusRequest: @unchecked Sendable {}
extension GloryApi_GetOrderStatusResponse: @unchecked Sendable {}
extension GloryApi_CancelOrderRequest: @unchecked Sendable {}
extension GloryApi_CancelOrderResponse: @unchecked Sendable {}
extension GloryApi_ShipGoodsInBatchesRequest: @unchecked Sendable {}
extension GloryApi_ShipGoodsInBatchesResponse: @unchecked Sendable {}
extension GloryApi_FreeShippingInBatchesRequest: @unchecked Sendable {}
extension GloryApi_FreeShippingInBatchesResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_Order: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Order"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "shop_id"),
    4: .standard(proto: "seller_id"),
    5: .standard(proto: "tenant_id"),
    6: .standard(proto: "order_status"),
    7: .standard(proto: "total_amount"),
    8: .standard(proto: "original_amount"),
    9: .same(proto: "tax"),
    10: .standard(proto: "deliver_fee"),
    11: .same(proto: "currency"),
    12: .standard(proto: "deliver_address"),
    13: .standard(proto: "deliver_post"),
    14: .standard(proto: "contact_name"),
    15: .standard(proto: "contact_phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.sellerID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.orderStatus) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.totalAmount) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self.originalAmount) }()
      case 9: try { try decoder.decodeSingularDoubleField(value: &self.tax) }()
      case 10: try { try decoder.decodeSingularDoubleField(value: &self.deliverFee) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.deliverAddress) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.deliverPost) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.contactName) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.contactPhone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 3)
    }
    if self.sellerID != 0 {
      try visitor.visitSingularInt64Field(value: self.sellerID, fieldNumber: 4)
    }
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 5)
    }
    if !self.orderStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.orderStatus, fieldNumber: 6)
    }
    if self.totalAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.totalAmount, fieldNumber: 7)
    }
    if self.originalAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.originalAmount, fieldNumber: 8)
    }
    if self.tax != 0 {
      try visitor.visitSingularDoubleField(value: self.tax, fieldNumber: 9)
    }
    if self.deliverFee != 0 {
      try visitor.visitSingularDoubleField(value: self.deliverFee, fieldNumber: 10)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 11)
    }
    if !self.deliverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.deliverAddress, fieldNumber: 12)
    }
    if self.deliverPost != 0 {
      try visitor.visitSingularInt32Field(value: self.deliverPost, fieldNumber: 13)
    }
    if !self.contactName.isEmpty {
      try visitor.visitSingularStringField(value: self.contactName, fieldNumber: 14)
    }
    if !self.contactPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.contactPhone, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_Order, rhs: GloryApi_Order) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.orderStatus != rhs.orderStatus {return false}
    if lhs.totalAmount != rhs.totalAmount {return false}
    if lhs.originalAmount != rhs.originalAmount {return false}
    if lhs.tax != rhs.tax {return false}
    if lhs.deliverFee != rhs.deliverFee {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.deliverAddress != rhs.deliverAddress {return false}
    if lhs.deliverPost != rhs.deliverPost {return false}
    if lhs.contactName != rhs.contactName {return false}
    if lhs.contactPhone != rhs.contactPhone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_Images: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Images"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_image_id"),
    2: .standard(proto: "image_type"),
    3: .standard(proto: "image_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.productImageID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imageType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.productImageID != 0 {
      try visitor.visitSingularInt64Field(value: self.productImageID, fieldNumber: 1)
    }
    if !self.imageType.isEmpty {
      try visitor.visitSingularStringField(value: self.imageType, fieldNumber: 2)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_Images, rhs: GloryApi_Images) -> Bool {
    if lhs.productImageID != rhs.productImageID {return false}
    if lhs.imageType != rhs.imageType {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateOrderInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateOrderInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "shop_id"),
    4: .standard(proto: "seller_id"),
    5: .standard(proto: "tenant_id"),
    7: .standard(proto: "total_amount"),
    8: .standard(proto: "original_amount"),
    9: .same(proto: "tax"),
    10: .standard(proto: "deliver_fee"),
    11: .same(proto: "currency"),
    12: .standard(proto: "deliver_address"),
    13: .standard(proto: "deliver_post"),
    14: .standard(proto: "contact_name"),
    15: .standard(proto: "contact_phone"),
    16: .standard(proto: "sku_info"),
    17: .same(proto: "message"),
    18: .standard(proto: "buyer_name"),
    19: .standard(proto: "room_id"),
    20: .same(proto: "channel"),
    21: .standard(proto: "trans_id"),
    22: .standard(proto: "coupon_id"),
  ]

  fileprivate class _StorageClass {
    var _orderID: Int64 = 0
    var _userID: Int64 = 0
    var _shopID: Int64 = 0
    var _sellerID: Int64 = 0
    var _tenantID: Int64 = 0
    var _totalAmount: Double = 0
    var _originalAmount: Double = 0
    var _tax: Double = 0
    var _deliverFee: Double = 0
    var _currency: String = String()
    var _deliverAddress: String = String()
    var _deliverPost: Int32 = 0
    var _contactName: String = String()
    var _contactPhone: String = String()
    var _skuInfo: [GloryApi_SkuInfo] = []
    var _message: String = String()
    var _buyerName: String = String()
    var _roomID: Int64 = 0
    var _channel: String = String()
    var _transID: Int64 = 0
    var _couponID: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orderID = source._orderID
      _userID = source._userID
      _shopID = source._shopID
      _sellerID = source._sellerID
      _tenantID = source._tenantID
      _totalAmount = source._totalAmount
      _originalAmount = source._originalAmount
      _tax = source._tax
      _deliverFee = source._deliverFee
      _currency = source._currency
      _deliverAddress = source._deliverAddress
      _deliverPost = source._deliverPost
      _contactName = source._contactName
      _contactPhone = source._contactPhone
      _skuInfo = source._skuInfo
      _message = source._message
      _buyerName = source._buyerName
      _roomID = source._roomID
      _channel = source._channel
      _transID = source._transID
      _couponID = source._couponID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._orderID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._userID) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._shopID) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._sellerID) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._tenantID) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._totalAmount) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._originalAmount) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._tax) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._deliverFee) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._deliverAddress) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._deliverPost) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._contactName) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._contactPhone) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._skuInfo) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._message) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._buyerName) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._roomID) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._channel) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._transID) }()
        case 22: try { try decoder.decodeSingularInt64Field(value: &_storage._couponID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._orderID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._orderID, fieldNumber: 1)
      }
      if _storage._userID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._userID, fieldNumber: 2)
      }
      if _storage._shopID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shopID, fieldNumber: 3)
      }
      if _storage._sellerID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sellerID, fieldNumber: 4)
      }
      if _storage._tenantID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._tenantID, fieldNumber: 5)
      }
      if _storage._totalAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalAmount, fieldNumber: 7)
      }
      if _storage._originalAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._originalAmount, fieldNumber: 8)
      }
      if _storage._tax != 0 {
        try visitor.visitSingularDoubleField(value: _storage._tax, fieldNumber: 9)
      }
      if _storage._deliverFee != 0 {
        try visitor.visitSingularDoubleField(value: _storage._deliverFee, fieldNumber: 10)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 11)
      }
      if !_storage._deliverAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deliverAddress, fieldNumber: 12)
      }
      if _storage._deliverPost != 0 {
        try visitor.visitSingularInt32Field(value: _storage._deliverPost, fieldNumber: 13)
      }
      if !_storage._contactName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contactName, fieldNumber: 14)
      }
      if !_storage._contactPhone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contactPhone, fieldNumber: 15)
      }
      if !_storage._skuInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._skuInfo, fieldNumber: 16)
      }
      if !_storage._message.isEmpty {
        try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 17)
      }
      if !_storage._buyerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._buyerName, fieldNumber: 18)
      }
      if _storage._roomID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._roomID, fieldNumber: 19)
      }
      if !_storage._channel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channel, fieldNumber: 20)
      }
      if _storage._transID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._transID, fieldNumber: 21)
      }
      if _storage._couponID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._couponID, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateOrderInfo, rhs: GloryApi_CreateOrderInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._orderID != rhs_storage._orderID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._shopID != rhs_storage._shopID {return false}
        if _storage._sellerID != rhs_storage._sellerID {return false}
        if _storage._tenantID != rhs_storage._tenantID {return false}
        if _storage._totalAmount != rhs_storage._totalAmount {return false}
        if _storage._originalAmount != rhs_storage._originalAmount {return false}
        if _storage._tax != rhs_storage._tax {return false}
        if _storage._deliverFee != rhs_storage._deliverFee {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._deliverAddress != rhs_storage._deliverAddress {return false}
        if _storage._deliverPost != rhs_storage._deliverPost {return false}
        if _storage._contactName != rhs_storage._contactName {return false}
        if _storage._contactPhone != rhs_storage._contactPhone {return false}
        if _storage._skuInfo != rhs_storage._skuInfo {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._buyerName != rhs_storage._buyerName {return false}
        if _storage._roomID != rhs_storage._roomID {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._transID != rhs_storage._transID {return false}
        if _storage._couponID != rhs_storage._couponID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SkuInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SkuInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sku_id"),
    2: .same(proto: "number"),
    3: .standard(proto: "activity_id"),
    4: .same(proto: "channel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.skuID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.number) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.activityID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.skuID != 0 {
      try visitor.visitSingularInt64Field(value: self.skuID, fieldNumber: 1)
    }
    if self.number != 0 {
      try visitor.visitSingularInt32Field(value: self.number, fieldNumber: 2)
    }
    if self.activityID != 0 {
      try visitor.visitSingularInt64Field(value: self.activityID, fieldNumber: 3)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SkuInfo, rhs: GloryApi_SkuInfo) -> Bool {
    if lhs.skuID != rhs.skuID {return false}
    if lhs.number != rhs.number {return false}
    if lhs.activityID != rhs.activityID {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_OrderSku: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderSku"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_sku_id"),
    2: .standard(proto: "order_id"),
    3: .standard(proto: "sku_id"),
    4: .standard(proto: "seller_id"),
    5: .standard(proto: "shop_id"),
    6: .same(proto: "quantity"),
    7: .standard(proto: "freight_template_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.orderSkuID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.skuID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.sellerID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.quantity) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.freightTemplateID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderSkuID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderSkuID, fieldNumber: 1)
    }
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 2)
    }
    if self.skuID != 0 {
      try visitor.visitSingularInt64Field(value: self.skuID, fieldNumber: 3)
    }
    if self.sellerID != 0 {
      try visitor.visitSingularInt64Field(value: self.sellerID, fieldNumber: 4)
    }
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 5)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 6)
    }
    if self.freightTemplateID != 0 {
      try visitor.visitSingularInt64Field(value: self.freightTemplateID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_OrderSku, rhs: GloryApi_OrderSku) -> Bool {
    if lhs.orderSkuID != rhs.orderSkuID {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.skuID != rhs.skuID {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.freightTemplateID != rhs.freightTemplateID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_OrderInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "order_status"),
    3: .standard(proto: "order_cancelled_reason"),
    4: .standard(proto: "created_at"),
    5: .same(proto: "orderType"),
    6: .same(proto: "payType"),
    7: .same(proto: "payTime"),
    8: .standard(proto: "total_amount"),
    9: .standard(proto: "original_amount"),
    10: .standard(proto: "deliver_fee"),
    11: .standard(proto: "discount_amount"),
    12: .standard(proto: "payment_amount"),
    13: .standard(proto: "payable_amount"),
    14: .same(proto: "productInfo"),
    15: .standard(proto: "shop_id"),
    16: .standard(proto: "shop_name"),
    17: .standard(proto: "shop_logo"),
    18: .same(proto: "currency"),
    19: .standard(proto: "contact_name"),
    20: .standard(proto: "buyer_name"),
    21: .standard(proto: "deliver_address"),
    22: .standard(proto: "coupon_detail"),
    23: .same(proto: "channel"),
  ]

  fileprivate class _StorageClass {
    var _orderID: Int64 = 0
    var _orderStatus: String = String()
    var _orderCancelledReason: String = String()
    var _createdAt: String = String()
    var _orderType: String = String()
    var _payType: String = String()
    var _payTime: String = String()
    var _totalAmount: Double = 0
    var _originalAmount: Double = 0
    var _deliverFee: Double = 0
    var _discountAmount: Double = 0
    var _paymentAmount: Double = 0
    var _payableAmount: Double = 0
    var _productInfo: [GloryApi_ProductInfo] = []
    var _shopID: Int64 = 0
    var _shopName: String = String()
    var _shopLogo: String = String()
    var _currency: String = String()
    var _contactName: String = String()
    var _buyerName: String = String()
    var _deliverAddress: String = String()
    var _couponDetail: GloryApi_CouponDetail? = nil
    var _channel: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orderID = source._orderID
      _orderStatus = source._orderStatus
      _orderCancelledReason = source._orderCancelledReason
      _createdAt = source._createdAt
      _orderType = source._orderType
      _payType = source._payType
      _payTime = source._payTime
      _totalAmount = source._totalAmount
      _originalAmount = source._originalAmount
      _deliverFee = source._deliverFee
      _discountAmount = source._discountAmount
      _paymentAmount = source._paymentAmount
      _payableAmount = source._payableAmount
      _productInfo = source._productInfo
      _shopID = source._shopID
      _shopName = source._shopName
      _shopLogo = source._shopLogo
      _currency = source._currency
      _contactName = source._contactName
      _buyerName = source._buyerName
      _deliverAddress = source._deliverAddress
      _couponDetail = source._couponDetail
      _channel = source._channel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._orderID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._orderStatus) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._orderCancelledReason) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._createdAt) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._orderType) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._payType) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._payTime) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._totalAmount) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._originalAmount) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._deliverFee) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._discountAmount) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._paymentAmount) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._payableAmount) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._productInfo) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._shopID) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._shopName) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._shopLogo) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._currency) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._contactName) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._buyerName) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._deliverAddress) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._couponDetail) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._channel) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._orderID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._orderID, fieldNumber: 1)
      }
      if !_storage._orderStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderStatus, fieldNumber: 2)
      }
      if !_storage._orderCancelledReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderCancelledReason, fieldNumber: 3)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 4)
      }
      if !_storage._orderType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderType, fieldNumber: 5)
      }
      if !_storage._payType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._payType, fieldNumber: 6)
      }
      if !_storage._payTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._payTime, fieldNumber: 7)
      }
      if _storage._totalAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalAmount, fieldNumber: 8)
      }
      if _storage._originalAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._originalAmount, fieldNumber: 9)
      }
      if _storage._deliverFee != 0 {
        try visitor.visitSingularDoubleField(value: _storage._deliverFee, fieldNumber: 10)
      }
      if _storage._discountAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._discountAmount, fieldNumber: 11)
      }
      if _storage._paymentAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._paymentAmount, fieldNumber: 12)
      }
      if _storage._payableAmount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._payableAmount, fieldNumber: 13)
      }
      if !_storage._productInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._productInfo, fieldNumber: 14)
      }
      if _storage._shopID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shopID, fieldNumber: 15)
      }
      if !_storage._shopName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shopName, fieldNumber: 16)
      }
      if !_storage._shopLogo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shopLogo, fieldNumber: 17)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 18)
      }
      if !_storage._contactName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contactName, fieldNumber: 19)
      }
      if !_storage._buyerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._buyerName, fieldNumber: 20)
      }
      if !_storage._deliverAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deliverAddress, fieldNumber: 21)
      }
      try { if let v = _storage._couponDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      if !_storage._channel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channel, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_OrderInfo, rhs: GloryApi_OrderInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._orderID != rhs_storage._orderID {return false}
        if _storage._orderStatus != rhs_storage._orderStatus {return false}
        if _storage._orderCancelledReason != rhs_storage._orderCancelledReason {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._orderType != rhs_storage._orderType {return false}
        if _storage._payType != rhs_storage._payType {return false}
        if _storage._payTime != rhs_storage._payTime {return false}
        if _storage._totalAmount != rhs_storage._totalAmount {return false}
        if _storage._originalAmount != rhs_storage._originalAmount {return false}
        if _storage._deliverFee != rhs_storage._deliverFee {return false}
        if _storage._discountAmount != rhs_storage._discountAmount {return false}
        if _storage._paymentAmount != rhs_storage._paymentAmount {return false}
        if _storage._payableAmount != rhs_storage._payableAmount {return false}
        if _storage._productInfo != rhs_storage._productInfo {return false}
        if _storage._shopID != rhs_storage._shopID {return false}
        if _storage._shopName != rhs_storage._shopName {return false}
        if _storage._shopLogo != rhs_storage._shopLogo {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._contactName != rhs_storage._contactName {return false}
        if _storage._buyerName != rhs_storage._buyerName {return false}
        if _storage._deliverAddress != rhs_storage._deliverAddress {return false}
        if _storage._couponDetail != rhs_storage._couponDetail {return false}
        if _storage._channel != rhs_storage._channel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeliverInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeliverInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deliver_address"),
    2: .standard(proto: "deliver_post"),
    3: .standard(proto: "contact_name"),
    4: .standard(proto: "contact_phone"),
    5: .standard(proto: "buyer_name"),
    6: .standard(proto: "buyer_comment"),
    7: .standard(proto: "delivery_method"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deliverAddress) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.deliverPost) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contactName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contactPhone) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.buyerName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.buyerComment) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.deliveryMethod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deliverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.deliverAddress, fieldNumber: 1)
    }
    if self.deliverPost != 0 {
      try visitor.visitSingularInt32Field(value: self.deliverPost, fieldNumber: 2)
    }
    if !self.contactName.isEmpty {
      try visitor.visitSingularStringField(value: self.contactName, fieldNumber: 3)
    }
    if !self.contactPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.contactPhone, fieldNumber: 4)
    }
    if !self.buyerName.isEmpty {
      try visitor.visitSingularStringField(value: self.buyerName, fieldNumber: 5)
    }
    if !self.buyerComment.isEmpty {
      try visitor.visitSingularStringField(value: self.buyerComment, fieldNumber: 6)
    }
    if !self.deliveryMethod.isEmpty {
      try visitor.visitSingularStringField(value: self.deliveryMethod, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeliverInfo, rhs: GloryApi_DeliverInfo) -> Bool {
    if lhs.deliverAddress != rhs.deliverAddress {return false}
    if lhs.deliverPost != rhs.deliverPost {return false}
    if lhs.contactName != rhs.contactName {return false}
    if lhs.contactPhone != rhs.contactPhone {return false}
    if lhs.buyerName != rhs.buyerName {return false}
    if lhs.buyerComment != rhs.buyerComment {return false}
    if lhs.deliveryMethod != rhs.deliveryMethod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ProductInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .standard(proto: "product_name"),
    3: .same(proto: "sku"),
    4: .standard(proto: "service_info"),
    5: .standard(proto: "unit_price"),
    6: .same(proto: "quantity"),
    7: .standard(proto: "discount_info"),
    8: .same(proto: "images"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.productID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._sku) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serviceInfo) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.unitPrice) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.quantity) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.discountInfo) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.images) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.productID != 0 {
      try visitor.visitSingularInt64Field(value: self.productID, fieldNumber: 1)
    }
    if !self.productName.isEmpty {
      try visitor.visitSingularStringField(value: self.productName, fieldNumber: 2)
    }
    try { if let v = self._sku {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.serviceInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceInfo, fieldNumber: 4)
    }
    if self.unitPrice != 0 {
      try visitor.visitSingularDoubleField(value: self.unitPrice, fieldNumber: 5)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 6)
    }
    if !self.discountInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.discountInfo, fieldNumber: 7)
    }
    if !self.images.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.images, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ProductInfo, rhs: GloryApi_ProductInfo) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs.productName != rhs.productName {return false}
    if lhs._sku != rhs._sku {return false}
    if lhs.serviceInfo != rhs.serviceInfo {return false}
    if lhs.unitPrice != rhs.unitPrice {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.discountInfo != rhs.discountInfo {return false}
    if lhs.images != rhs.images {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_OrderWithAuthor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderWithAuthor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "order_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularMessageField(value: &self._orderInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._orderInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_OrderWithAuthor, rhs: GloryApi_OrderWithAuthor) -> Bool {
    if lhs._orderInfo != rhs._orderInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.orderInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.orderInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orderInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateOrderRequest, rhs: GloryApi_CreateOrderRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderInfo != rhs.orderInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateOrderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "trans_res"),
    3: .standard(proto: "cny_total"),
    4: .standard(proto: "coin_total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.transRes) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.cnyTotal) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.coinTotal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.transRes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transRes, fieldNumber: 2)
    }
    if self.cnyTotal != 0 {
      try visitor.visitSingularDoubleField(value: self.cnyTotal, fieldNumber: 3)
    }
    if self.coinTotal != 0 {
      try visitor.visitSingularDoubleField(value: self.coinTotal, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateOrderResponse, rhs: GloryApi_CreateOrderResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.transRes != rhs.transRes {return false}
    if lhs.cnyTotal != rhs.cnyTotal {return false}
    if lhs.coinTotal != rhs.coinTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TransResponseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransResponseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trans_id"),
    2: .same(proto: "order"),
    3: .same(proto: "currency"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.transID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.order) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.transID != 0 {
      try visitor.visitSingularInt64Field(value: self.transID, fieldNumber: 1)
    }
    if !self.order.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.order, fieldNumber: 2)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TransResponseInfo, rhs: GloryApi_TransResponseInfo) -> Bool {
    if lhs.transID != rhs.transID {return false}
    if lhs.order != rhs.order {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_OrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .same(proto: "currency"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 1)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_OrderResponse, rhs: GloryApi_OrderResponse) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetOrderRequest, rhs: GloryApi_GetOrderRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .same(proto: "orderInfo"),
    4: .same(proto: "deliverInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._orderInfo) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._deliverInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._orderInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._deliverInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetOrderResponse, rhs: GloryApi_GetOrderResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._orderInfo != rhs._orderInfo {return false}
    if lhs._deliverInfo != rhs._deliverInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "order"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._order) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._order {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateOrderRequest, rhs: GloryApi_UpdateOrderRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs._order != rhs._order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateOrderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateOrderResponse, rhs: GloryApi_UpdateOrderResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "seller_id"),
    4: .standard(proto: "tenant_id"),
    5: .standard(proto: "shop_id"),
    6: .standard(proto: "order_status"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.sellerID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.orderStatus) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.sellerID != 0 {
      try visitor.visitSingularInt64Field(value: self.sellerID, fieldNumber: 3)
    }
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 4)
    }
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 5)
    }
    if !self.orderStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.orderStatus, fieldNumber: 6)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListOrderRequest, rhs: GloryApi_ListOrderRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.orderStatus != rhs.orderStatus {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListOrderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "order_detail"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.orderDetail) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.orderDetail.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orderDetail, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListOrderResponse, rhs: GloryApi_ListOrderResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.orderDetail != rhs.orderDetail {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteOrderRequest, rhs: GloryApi_DeleteOrderRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteOrderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteOrderResponse, rhs: GloryApi_DeleteOrderResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShipGoodsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShipGoodsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShipGoodsRequest, rhs: GloryApi_ShipGoodsRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShipGoodsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShipGoodsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShipGoodsResponse, rhs: GloryApi_ShipGoodsResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ConfirmReceiptGoodsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfirmReceiptGoodsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ConfirmReceiptGoodsRequest, rhs: GloryApi_ConfirmReceiptGoodsRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ConfirmReceiptGoodsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfirmReceiptGoodsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ConfirmReceiptGoodsResponse, rhs: GloryApi_ConfirmReceiptGoodsResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetOrderStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrderStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetOrderStatusRequest, rhs: GloryApi_GetOrderStatusRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetOrderStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrderStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "order_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.orderStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.orderStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.orderStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetOrderStatusResponse, rhs: GloryApi_GetOrderStatusResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.orderStatus != rhs.orderStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CancelOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.orderID != 0 {
      try visitor.visitSingularInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CancelOrderRequest, rhs: GloryApi_CancelOrderRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CancelOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CancelOrderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CancelOrderResponse, rhs: GloryApi_CancelOrderResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShipGoodsInBatchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShipGoodsInBatchesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.orderID.isEmpty {
      try visitor.visitPackedInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShipGoodsInBatchesRequest, rhs: GloryApi_ShipGoodsInBatchesRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShipGoodsInBatchesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShipGoodsInBatchesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShipGoodsInBatchesResponse, rhs: GloryApi_ShipGoodsInBatchesResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_FreeShippingInBatchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FreeShippingInBatchesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.orderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.orderID.isEmpty {
      try visitor.visitPackedInt64Field(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_FreeShippingInBatchesRequest, rhs: GloryApi_FreeShippingInBatchesRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_FreeShippingInBatchesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FreeShippingInBatchesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_FreeShippingInBatchesResponse, rhs: GloryApi_FreeShippingInBatchesResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
