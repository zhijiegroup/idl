// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shop/operation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_ListOperationMetricsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shopID: Int64 = 0

  var days: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_DailyOperationMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dailyOrderAmount: Double = 0

  var dailyOrderCount: UInt32 = 0

  var dailyDistinctUserCount: UInt32 = 0

  var metricsDate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListOperationMetricsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var orderAmount: Double = 0

  var orderCount: UInt32 = 0

  var distinctUserCount: UInt32 = 0

  var dailyMetrics: [GloryApi_DailyOperationMetrics] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_ListOperationMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListOperationMetricsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_id"),
    2: .same(proto: "days"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.days) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 1)
    }
    if self.days != 0 {
      try visitor.visitSingularInt32Field(value: self.days, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListOperationMetricsRequest, rhs: GloryApi_ListOperationMetricsRequest) -> Bool {
    if lhs.shopID != rhs.shopID {return false}
    if lhs.days != rhs.days {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DailyOperationMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DailyOperationMetrics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "daily_order_amount"),
    2: .standard(proto: "daily_order_count"),
    3: .standard(proto: "daily_distinct_user_count"),
    4: .standard(proto: "metrics_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.dailyOrderAmount) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.dailyOrderCount) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.dailyDistinctUserCount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.metricsDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dailyOrderAmount.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.dailyOrderAmount, fieldNumber: 1)
    }
    if self.dailyOrderCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.dailyOrderCount, fieldNumber: 2)
    }
    if self.dailyDistinctUserCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.dailyDistinctUserCount, fieldNumber: 3)
    }
    if !self.metricsDate.isEmpty {
      try visitor.visitSingularStringField(value: self.metricsDate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DailyOperationMetrics, rhs: GloryApi_DailyOperationMetrics) -> Bool {
    if lhs.dailyOrderAmount != rhs.dailyOrderAmount {return false}
    if lhs.dailyOrderCount != rhs.dailyOrderCount {return false}
    if lhs.dailyDistinctUserCount != rhs.dailyDistinctUserCount {return false}
    if lhs.metricsDate != rhs.metricsDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListOperationMetricsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListOperationMetricsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "order_amount"),
    3: .standard(proto: "order_count"),
    4: .standard(proto: "distinct_user_count"),
    5: .standard(proto: "daily_metrics"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.orderAmount) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.orderCount) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.distinctUserCount) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.dailyMetrics) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.orderAmount.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.orderAmount, fieldNumber: 2)
    }
    if self.orderCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.orderCount, fieldNumber: 3)
    }
    if self.distinctUserCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.distinctUserCount, fieldNumber: 4)
    }
    if !self.dailyMetrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dailyMetrics, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListOperationMetricsResponse, rhs: GloryApi_ListOperationMetricsResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.orderAmount != rhs.orderAmount {return false}
    if lhs.orderCount != rhs.orderCount {return false}
    if lhs.distinctUserCount != rhs.distinctUserCount {return false}
    if lhs.dailyMetrics != rhs.dailyMetrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
