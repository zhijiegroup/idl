// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shop/shop.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_Shop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///店铺id,创建时 不传
  var shopID: Int64 {
    get {return _storage._shopID}
    set {_uniqueStorage()._shopID = newValue}
  }

  ///提前调用 create_seller 生成 seller_id
  var sellerID: Int64 {
    get {return _storage._sellerID}
    set {_uniqueStorage()._sellerID = newValue}
  }

  ///店铺名称 必须
  var shopName: String {
    get {return _storage._shopName}
    set {_uniqueStorage()._shopName = newValue}
  }

  ///经营类目 id 必须
  var categoryID: [Int64] {
    get {return _storage._categoryID}
    set {_uniqueStorage()._categoryID = newValue}
  }

  ///经营类目 资质
  var shopQualification: [GloryApi_ShopQualification] {
    get {return _storage._shopQualification}
    set {_uniqueStorage()._shopQualification = newValue}
  }

  ///虚拟交易店铺 virtual, 真实交易店铺 real
  var shopType: String {
    get {return _storage._shopType}
    set {_uniqueStorage()._shopType = newValue}
  }

  ///公司名称
  var companyName: String {
    get {return _storage._companyName}
    set {_uniqueStorage()._companyName = newValue}
  }

  ///统一社会信用代码
  var companyID: String {
    get {return _storage._companyID}
    set {_uniqueStorage()._companyID = newValue}
  }

  ///企业 enterprise、个体工商户 individual、个人 personal
  var companyCategory: String {
    get {return _storage._companyCategory}
    set {_uniqueStorage()._companyCategory = newValue}
  }

  ///法人身份证
  var ownerID: String {
    get {return _storage._ownerID}
    set {_uniqueStorage()._ownerID = newValue}
  }

  ///法人名字
  var ownerName: String {
    get {return _storage._ownerName}
    set {_uniqueStorage()._ownerName = newValue}
  }

  ///法人身份证 正面
  var ownerIDFrontURL: String {
    get {return _storage._ownerIDFrontURL}
    set {_uniqueStorage()._ownerIDFrontURL = newValue}
  }

  ///法人身份证 反面
  var ownerIDBackURL: String {
    get {return _storage._ownerIDBackURL}
    set {_uniqueStorage()._ownerIDBackURL = newValue}
  }

  ///法人身份证 开始日期
  var ownerIDStartDate: String {
    get {return _storage._ownerIDStartDate}
    set {_uniqueStorage()._ownerIDStartDate = newValue}
  }

  ///法人身份证 结束日期
  var ownerIDExpiryDate: String {
    get {return _storage._ownerIDExpiryDate}
    set {_uniqueStorage()._ownerIDExpiryDate = newValue}
  }

  ///logo
  var shopLogoURL: String {
    get {return _storage._shopLogoURL}
    set {_uniqueStorage()._shopLogoURL = newValue}
  }

  ///经营地址 省
  var province: String {
    get {return _storage._province}
    set {_uniqueStorage()._province = newValue}
  }

  ///经营地址 市
  var city: String {
    get {return _storage._city}
    set {_uniqueStorage()._city = newValue}
  }

  ///经营地址 区
  var district: String {
    get {return _storage._district}
    set {_uniqueStorage()._district = newValue}
  }

  ///经营地址 详细地址
  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  ///营业执照
  var businessLicenseURL: String {
    get {return _storage._businessLicenseURL}
    set {_uniqueStorage()._businessLicenseURL = newValue}
  }

  ///营业执照 开始日期
  var businessLicenseStartDate: String {
    get {return _storage._businessLicenseStartDate}
    set {_uniqueStorage()._businessLicenseStartDate = newValue}
  }

  ///营业执照 结束日期,没有写 长期
  var businessLicenseEndDate: String {
    get {return _storage._businessLicenseEndDate}
    set {_uniqueStorage()._businessLicenseEndDate = newValue}
  }

  ///法人归属地,中国大陆、香港、澳门、台湾、海外
  var ownerLocation: String {
    get {return _storage._ownerLocation}
    set {_uniqueStorage()._ownerLocation = newValue}
  }

  ///公司开户行账号
  var companyBankAccount: String {
    get {return _storage._companyBankAccount}
    set {_uniqueStorage()._companyBankAccount = newValue}
  }

  ///预留手机号
  var companyBankPhone: String {
    get {return _storage._companyBankPhone}
    set {_uniqueStorage()._companyBankPhone = newValue}
  }

  ///输入银行卡号,验证结果
  var companyBankValidated: Bool {
    get {return _storage._companyBankValidated}
    set {_uniqueStorage()._companyBankValidated = newValue}
  }

  ///店铺状态 1: inProgress, 2: Approved, 3: Rejected
  var certifyStatus: Int32 {
    get {return _storage._certifyStatus}
    set {_uniqueStorage()._certifyStatus = newValue}
  }

  /// 上传附件的接口返回的 attachment id
  var ownerIDFrontAttachmentID: Int64 {
    get {return _storage._ownerIDFrontAttachmentID}
    set {_uniqueStorage()._ownerIDFrontAttachmentID = newValue}
  }

  /// 上传附件的接口返回的 attachment id
  var ownerIDBackAttachmentID: Int64 {
    get {return _storage._ownerIDBackAttachmentID}
    set {_uniqueStorage()._ownerIDBackAttachmentID = newValue}
  }

  /// 上传附件的接口返回的 attachment id
  var shopLogoAttachmentID: Int64 {
    get {return _storage._shopLogoAttachmentID}
    set {_uniqueStorage()._shopLogoAttachmentID = newValue}
  }

  /// 上传附件的接口返回的 attachment id
  var businessLicenseAttachmentID: Int64 {
    get {return _storage._businessLicenseAttachmentID}
    set {_uniqueStorage()._businessLicenseAttachmentID = newValue}
  }

  /// 店铺管理者
  var manager: String {
    get {return _storage._manager}
    set {_uniqueStorage()._manager = newValue}
  }

  /// 店铺管理者手机号
  var managerPhone: String {
    get {return _storage._managerPhone}
    set {_uniqueStorage()._managerPhone = newValue}
  }

  /// 身份证正面OSS路径
  var ownerIDFrontPath: String {
    get {return _storage._ownerIDFrontPath}
    set {_uniqueStorage()._ownerIDFrontPath = newValue}
  }

  /// 身份证背面OSS路径
  var ownerIDBackPath: String {
    get {return _storage._ownerIDBackPath}
    set {_uniqueStorage()._ownerIDBackPath = newValue}
  }

  /// 店铺Logo OSS路径
  var shopLogoPath: String {
    get {return _storage._shopLogoPath}
    set {_uniqueStorage()._shopLogoPath = newValue}
  }

  ///营业执照 OSS路径
  var businessLicensePath: String {
    get {return _storage._businessLicensePath}
    set {_uniqueStorage()._businessLicensePath = newValue}
  }

  var shopKeeper: GloryApi_ShopKeeper {
    get {return _storage._shopKeeper ?? GloryApi_ShopKeeper()}
    set {_uniqueStorage()._shopKeeper = newValue}
  }
  /// Returns true if `shopKeeper` has been explicitly set.
  var hasShopKeeper: Bool {return _storage._shopKeeper != nil}
  /// Clears the value of `shopKeeper`. Subsequent reads from it will return its default value.
  mutating func clearShopKeeper() {_uniqueStorage()._shopKeeper = nil}

  /// 店铺申请状态: 注册中:registering;营业中:opening;闭店中:closed
  var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 申请状态: 待审核:to_approve;拒绝:reject;完成:pass
  var approvalStatus: String {
    get {return _storage._approvalStatus}
    set {_uniqueStorage()._approvalStatus = newValue}
  }

  /// 审批结果对应的内容
  var approvalResult: String {
    get {return _storage._approvalResult}
    set {_uniqueStorage()._approvalResult = newValue}
  }

  var className: String {
    get {return _storage._className}
    set {_uniqueStorage()._className = newValue}
  }

  var studentNum: String {
    get {return _storage._studentNum}
    set {_uniqueStorage()._studentNum = newValue}
  }

  var studentCardPath: String {
    get {return _storage._studentCardPath}
    set {_uniqueStorage()._studentCardPath = newValue}
  }

  var managerWechatID: String {
    get {return _storage._managerWechatID}
    set {_uniqueStorage()._managerWechatID = newValue}
  }

  var paymentQrcodePath: String {
    get {return _storage._paymentQrcodePath}
    set {_uniqueStorage()._paymentQrcodePath = newValue}
  }

  var teacherName: String {
    get {return _storage._teacherName}
    set {_uniqueStorage()._teacherName = newValue}
  }

  var teacherPhone: String {
    get {return _storage._teacherPhone}
    set {_uniqueStorage()._teacherPhone = newValue}
  }

  var approvalFlow: GloryApi_ApprovalFlowDetail {
    get {return _storage._approvalFlow ?? GloryApi_ApprovalFlowDetail()}
    set {_uniqueStorage()._approvalFlow = newValue}
  }
  /// Returns true if `approvalFlow` has been explicitly set.
  var hasApprovalFlow: Bool {return _storage._approvalFlow != nil}
  /// Clears the value of `approvalFlow`. Subsequent reads from it will return its default value.
  mutating func clearApprovalFlow() {_uniqueStorage()._approvalFlow = nil}

  var currentLevelOrder: Int32 {
    get {return _storage._currentLevelOrder}
    set {_uniqueStorage()._currentLevelOrder = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_ShopQualification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///不传
  var shopQualificationID: Int64 = 0

  ///图片url
  var shopQualificationURL: String = String()

  ///类目一级
  var categoryRoot: String = String()

  ///资质名称
  var qualificationName: String = String()

  var attachmentID: Int64 = 0

  ///有效期
  var validityPeriod: String = String()

  ///图片OSS路径
  var shopQualificationPath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShopBusiness {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var saleTotal: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShopKeeper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: Int64 = 0

  var userName: String = String()

  var classID: Int64 = 0

  var className: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShopWithAuthor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shop: GloryApi_Shop {
    get {return _shop ?? GloryApi_Shop()}
    set {_shop = newValue}
  }
  /// Returns true if `shop` has been explicitly set.
  var hasShop: Bool {return self._shop != nil}
  /// Clears the value of `shop`. Subsequent reads from it will return its default value.
  mutating func clearShop() {self._shop = nil}

  var authorInfo: Base_AuthorInfo {
    get {return _authorInfo ?? Base_AuthorInfo()}
    set {_authorInfo = newValue}
  }
  /// Returns true if `authorInfo` has been explicitly set.
  var hasAuthorInfo: Bool {return self._authorInfo != nil}
  /// Clears the value of `authorInfo`. Subsequent reads from it will return its default value.
  mutating func clearAuthorInfo() {self._authorInfo = nil}

  var shopBusiness: GloryApi_ShopBusiness {
    get {return _shopBusiness ?? GloryApi_ShopBusiness()}
    set {_shopBusiness = newValue}
  }
  /// Returns true if `shopBusiness` has been explicitly set.
  var hasShopBusiness: Bool {return self._shopBusiness != nil}
  /// Clears the value of `shopBusiness`. Subsequent reads from it will return its default value.
  mutating func clearShopBusiness() {self._shopBusiness = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _shop: GloryApi_Shop? = nil
  fileprivate var _authorInfo: Base_AuthorInfo? = nil
  fileprivate var _shopBusiness: GloryApi_ShopBusiness? = nil
}

struct GloryApi_CreateShopRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shop: GloryApi_Shop {
    get {return _shop ?? GloryApi_Shop()}
    set {_shop = newValue}
  }
  /// Returns true if `shop` has been explicitly set.
  var hasShop: Bool {return self._shop != nil}
  /// Clears the value of `shop`. Subsequent reads from it will return its default value.
  mutating func clearShop() {self._shop = nil}

  var createdBy: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _shop: GloryApi_Shop? = nil
}

struct GloryApi_CreateShopResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  ///  ShopWithAuthor shop_detail =2;
  var shopID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_GetShopRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetShopResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopDetail: GloryApi_ShopWithAuthor {
    get {return _shopDetail ?? GloryApi_ShopWithAuthor()}
    set {_shopDetail = newValue}
  }
  /// Returns true if `shopDetail` has been explicitly set.
  var hasShopDetail: Bool {return self._shopDetail != nil}
  /// Clears the value of `shopDetail`. Subsequent reads from it will return its default value.
  mutating func clearShopDetail() {self._shopDetail = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _shopDetail: GloryApi_ShopWithAuthor? = nil
}

struct GloryApi_UpdateShopRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shop: GloryApi_Shop {
    get {return _shop ?? GloryApi_Shop()}
    set {_shop = newValue}
  }
  /// Returns true if `shop` has been explicitly set.
  var hasShop: Bool {return self._shop != nil}
  /// Clears the value of `shop`. Subsequent reads from it will return its default value.
  mutating func clearShop() {self._shop = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _shop: GloryApi_Shop? = nil
}

struct GloryApi_UpdateShopResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ListShopRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var sellerID: Int64 = 0

  var shopName: String = String()

  var shopType: String = String()

  var province: String = String()

  var city: String = String()

  var district: String = String()

  var address: String = String()

  var post: String = String()

  var companyName: String = String()

  var ownerName: String = String()

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListShopResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopDetail: [GloryApi_ShopWithAuthor] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_DeleteShopRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_DeleteShopResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ReopenShopRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ReopenShopResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_AddShopAccessRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  /// 支持 admin, reseller
  var accessType: String = String()

  var phone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_AddShopAccessResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_RemoveShopAccessRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopAccessID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_RemoveShopAccessResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_VerifyFieldRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_VerifyFieldResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopNameValid: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ShopAccess {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shopAccessID: Int64 = 0

  var shopID: Int64 = 0

  var userID: Int64 = 0

  /// admin or reseller
  var accessType: String = String()

  var phone: String = String()

  var name: String = String()

  var bindingMethod: String = String()

  var createdAt: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListShopAccessRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  /// 支持 admin, reseller
  var accessType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ListShopAccessResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopAccess: [GloryApi_ShopAccess] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_AddShopCategoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  /// shop id
  var shopID: Int64 = 0

  /// category id
  var categoryID: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_AddShopCategoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_RemoveShopCategoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  /// category id
  var shopCategoryID: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_RemoveShopCategoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_GetShopCategoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  /// shop id
  var shopID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ShopCategory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shopCategoryID: Int64 = 0

  var category: GloryApi_Category {
    get {return _category ?? GloryApi_Category()}
    set {_category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
  var hasCategory: Bool {return self._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
  mutating func clearCategory() {self._category = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _category: GloryApi_Category? = nil
}

struct GloryApi_GetShopCategoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopID: Int64 = 0

  var categoryDetail: [GloryApi_ShopCategory] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ListShopQualificationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ListShopQualificationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  ///经营类目 资质
  var shopQualification: [GloryApi_ShopQualification] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_UpdateShopManagerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var manager: String = String()

  var managerPhone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_UpdateShopManagerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_UpdateShopStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var status: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_UpdateShopStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_GetShopBusinessDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopID: Int64 = 0

  var period: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ShopChartData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var date: String = String()

  var dealAmount: Double = 0

  var shopBuyerAmount: Int64 = 0

  var shopOrderAmount: Int64 = 0

  var timestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShopBusinessData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shopChartData: [GloryApi_ShopChartData] = []

  var totalDealAmount: Double = 0

  var totalVisitorAmount: Int64 = 0

  var totalOrderAmount: Int64 = 0

  var shopType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_GetShopBusinessDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopBusinessData: GloryApi_ShopBusinessData {
    get {return _shopBusinessData ?? GloryApi_ShopBusinessData()}
    set {_shopBusinessData = newValue}
  }
  /// Returns true if `shopBusinessData` has been explicitly set.
  var hasShopBusinessData: Bool {return self._shopBusinessData != nil}
  /// Clears the value of `shopBusinessData`. Subsequent reads from it will return its default value.
  mutating func clearShopBusinessData() {self._shopBusinessData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _shopBusinessData: GloryApi_ShopBusinessData? = nil
}

struct GloryApi_ShopSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shopID: Int64 = 0

  var shopLogoURL: String = String()

  var shopName: String = String()

  var dealAmount: Double = 0

  var orderTotal: Int64 = 0

  var sellerID: Int64 = 0

  var shopManagerName: String = String()

  var userName: String = String()

  var clasName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListShopSummaryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var shopNameOrUsername: String = String()

  var shopType: String = String()

  var majorID: Int64 = 0

  var clasID: Int64 = 0

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListShopSummaryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopList: [GloryApi_ShopSummary] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_ListShopBySellerIDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var sellerID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ListShopBySellerIDResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var shopList: [GloryApi_Shop] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_Shop: @unchecked Sendable {}
extension GloryApi_ShopQualification: @unchecked Sendable {}
extension GloryApi_ShopBusiness: @unchecked Sendable {}
extension GloryApi_ShopKeeper: @unchecked Sendable {}
extension GloryApi_ShopWithAuthor: @unchecked Sendable {}
extension GloryApi_CreateShopRequest: @unchecked Sendable {}
extension GloryApi_CreateShopResponse: @unchecked Sendable {}
extension GloryApi_GetShopRequest: @unchecked Sendable {}
extension GloryApi_GetShopResponse: @unchecked Sendable {}
extension GloryApi_UpdateShopRequest: @unchecked Sendable {}
extension GloryApi_UpdateShopResponse: @unchecked Sendable {}
extension GloryApi_ListShopRequest: @unchecked Sendable {}
extension GloryApi_ListShopResponse: @unchecked Sendable {}
extension GloryApi_DeleteShopRequest: @unchecked Sendable {}
extension GloryApi_DeleteShopResponse: @unchecked Sendable {}
extension GloryApi_ReopenShopRequest: @unchecked Sendable {}
extension GloryApi_ReopenShopResponse: @unchecked Sendable {}
extension GloryApi_AddShopAccessRequest: @unchecked Sendable {}
extension GloryApi_AddShopAccessResponse: @unchecked Sendable {}
extension GloryApi_RemoveShopAccessRequest: @unchecked Sendable {}
extension GloryApi_RemoveShopAccessResponse: @unchecked Sendable {}
extension GloryApi_VerifyFieldRequest: @unchecked Sendable {}
extension GloryApi_VerifyFieldResponse: @unchecked Sendable {}
extension GloryApi_ShopAccess: @unchecked Sendable {}
extension GloryApi_ListShopAccessRequest: @unchecked Sendable {}
extension GloryApi_ListShopAccessResponse: @unchecked Sendable {}
extension GloryApi_AddShopCategoryRequest: @unchecked Sendable {}
extension GloryApi_AddShopCategoryResponse: @unchecked Sendable {}
extension GloryApi_RemoveShopCategoryRequest: @unchecked Sendable {}
extension GloryApi_RemoveShopCategoryResponse: @unchecked Sendable {}
extension GloryApi_GetShopCategoryRequest: @unchecked Sendable {}
extension GloryApi_ShopCategory: @unchecked Sendable {}
extension GloryApi_GetShopCategoryResponse: @unchecked Sendable {}
extension GloryApi_ListShopQualificationRequest: @unchecked Sendable {}
extension GloryApi_ListShopQualificationResponse: @unchecked Sendable {}
extension GloryApi_UpdateShopManagerRequest: @unchecked Sendable {}
extension GloryApi_UpdateShopManagerResponse: @unchecked Sendable {}
extension GloryApi_UpdateShopStatusRequest: @unchecked Sendable {}
extension GloryApi_UpdateShopStatusResponse: @unchecked Sendable {}
extension GloryApi_GetShopBusinessDataRequest: @unchecked Sendable {}
extension GloryApi_ShopChartData: @unchecked Sendable {}
extension GloryApi_ShopBusinessData: @unchecked Sendable {}
extension GloryApi_GetShopBusinessDataResponse: @unchecked Sendable {}
extension GloryApi_ShopSummary: @unchecked Sendable {}
extension GloryApi_ListShopSummaryRequest: @unchecked Sendable {}
extension GloryApi_ListShopSummaryResponse: @unchecked Sendable {}
extension GloryApi_ListShopBySellerIDRequest: @unchecked Sendable {}
extension GloryApi_ListShopBySellerIDResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_Shop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Shop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_id"),
    2: .standard(proto: "seller_id"),
    3: .standard(proto: "shop_name"),
    35: .standard(proto: "category_id"),
    333: .standard(proto: "shop_qualification"),
    4: .standard(proto: "shop_type"),
    5: .standard(proto: "company_name"),
    6: .standard(proto: "company_id"),
    7: .standard(proto: "company_category"),
    8: .standard(proto: "owner_id"),
    9: .standard(proto: "owner_name"),
    11: .standard(proto: "owner_id_front_url"),
    12: .standard(proto: "owner_id_back_url"),
    13: .standard(proto: "owner_id_start_date"),
    14: .standard(proto: "owner_id_expiry_date"),
    15: .standard(proto: "shop_logo_url"),
    16: .same(proto: "province"),
    17: .same(proto: "city"),
    18: .same(proto: "district"),
    19: .same(proto: "address"),
    20: .standard(proto: "business_license_url"),
    21: .standard(proto: "business_license_start_date"),
    22: .standard(proto: "business_license_end_date"),
    24: .standard(proto: "owner_location"),
    25: .standard(proto: "company_bank_account"),
    26: .standard(proto: "company_bank_phone"),
    27: .standard(proto: "company_bank_validated"),
    28: .standard(proto: "certify_status"),
    29: .standard(proto: "owner_id_front_attachment_id"),
    30: .standard(proto: "owner_id_back_attachment_id"),
    31: .standard(proto: "shop_logo_attachment_id"),
    32: .standard(proto: "business_license_attachment_id"),
    33: .same(proto: "manager"),
    34: .standard(proto: "manager_phone"),
    39: .standard(proto: "owner_id_front_path"),
    36: .standard(proto: "owner_id_back_path"),
    37: .standard(proto: "shop_logo_path"),
    38: .standard(proto: "business_license_path"),
    40: .standard(proto: "shop_keeper"),
    41: .same(proto: "status"),
    42: .standard(proto: "approval_status"),
    52: .standard(proto: "approval_result"),
    48: .standard(proto: "class_name"),
    49: .standard(proto: "student_num"),
    43: .standard(proto: "student_card_path"),
    44: .standard(proto: "manager_wechat_id"),
    45: .standard(proto: "payment_qrcode_path"),
    46: .standard(proto: "teacher_name"),
    47: .standard(proto: "teacher_phone"),
    50: .standard(proto: "approval_flow"),
    51: .standard(proto: "current_level_order"),
  ]

  fileprivate class _StorageClass {
    var _shopID: Int64 = 0
    var _sellerID: Int64 = 0
    var _shopName: String = String()
    var _categoryID: [Int64] = []
    var _shopQualification: [GloryApi_ShopQualification] = []
    var _shopType: String = String()
    var _companyName: String = String()
    var _companyID: String = String()
    var _companyCategory: String = String()
    var _ownerID: String = String()
    var _ownerName: String = String()
    var _ownerIDFrontURL: String = String()
    var _ownerIDBackURL: String = String()
    var _ownerIDStartDate: String = String()
    var _ownerIDExpiryDate: String = String()
    var _shopLogoURL: String = String()
    var _province: String = String()
    var _city: String = String()
    var _district: String = String()
    var _address: String = String()
    var _businessLicenseURL: String = String()
    var _businessLicenseStartDate: String = String()
    var _businessLicenseEndDate: String = String()
    var _ownerLocation: String = String()
    var _companyBankAccount: String = String()
    var _companyBankPhone: String = String()
    var _companyBankValidated: Bool = false
    var _certifyStatus: Int32 = 0
    var _ownerIDFrontAttachmentID: Int64 = 0
    var _ownerIDBackAttachmentID: Int64 = 0
    var _shopLogoAttachmentID: Int64 = 0
    var _businessLicenseAttachmentID: Int64 = 0
    var _manager: String = String()
    var _managerPhone: String = String()
    var _ownerIDFrontPath: String = String()
    var _ownerIDBackPath: String = String()
    var _shopLogoPath: String = String()
    var _businessLicensePath: String = String()
    var _shopKeeper: GloryApi_ShopKeeper? = nil
    var _status: String = String()
    var _approvalStatus: String = String()
    var _approvalResult: String = String()
    var _className: String = String()
    var _studentNum: String = String()
    var _studentCardPath: String = String()
    var _managerWechatID: String = String()
    var _paymentQrcodePath: String = String()
    var _teacherName: String = String()
    var _teacherPhone: String = String()
    var _approvalFlow: GloryApi_ApprovalFlowDetail? = nil
    var _currentLevelOrder: Int32 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _shopID = source._shopID
      _sellerID = source._sellerID
      _shopName = source._shopName
      _categoryID = source._categoryID
      _shopQualification = source._shopQualification
      _shopType = source._shopType
      _companyName = source._companyName
      _companyID = source._companyID
      _companyCategory = source._companyCategory
      _ownerID = source._ownerID
      _ownerName = source._ownerName
      _ownerIDFrontURL = source._ownerIDFrontURL
      _ownerIDBackURL = source._ownerIDBackURL
      _ownerIDStartDate = source._ownerIDStartDate
      _ownerIDExpiryDate = source._ownerIDExpiryDate
      _shopLogoURL = source._shopLogoURL
      _province = source._province
      _city = source._city
      _district = source._district
      _address = source._address
      _businessLicenseURL = source._businessLicenseURL
      _businessLicenseStartDate = source._businessLicenseStartDate
      _businessLicenseEndDate = source._businessLicenseEndDate
      _ownerLocation = source._ownerLocation
      _companyBankAccount = source._companyBankAccount
      _companyBankPhone = source._companyBankPhone
      _companyBankValidated = source._companyBankValidated
      _certifyStatus = source._certifyStatus
      _ownerIDFrontAttachmentID = source._ownerIDFrontAttachmentID
      _ownerIDBackAttachmentID = source._ownerIDBackAttachmentID
      _shopLogoAttachmentID = source._shopLogoAttachmentID
      _businessLicenseAttachmentID = source._businessLicenseAttachmentID
      _manager = source._manager
      _managerPhone = source._managerPhone
      _ownerIDFrontPath = source._ownerIDFrontPath
      _ownerIDBackPath = source._ownerIDBackPath
      _shopLogoPath = source._shopLogoPath
      _businessLicensePath = source._businessLicensePath
      _shopKeeper = source._shopKeeper
      _status = source._status
      _approvalStatus = source._approvalStatus
      _approvalResult = source._approvalResult
      _className = source._className
      _studentNum = source._studentNum
      _studentCardPath = source._studentCardPath
      _managerWechatID = source._managerWechatID
      _paymentQrcodePath = source._paymentQrcodePath
      _teacherName = source._teacherName
      _teacherPhone = source._teacherPhone
      _approvalFlow = source._approvalFlow
      _currentLevelOrder = source._currentLevelOrder
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._shopID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._sellerID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._shopName) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._shopType) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._companyName) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._companyID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._companyCategory) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._ownerID) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._ownerName) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._ownerIDFrontURL) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._ownerIDBackURL) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._ownerIDStartDate) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._ownerIDExpiryDate) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._shopLogoURL) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._province) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._city) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._district) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._address) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._businessLicenseURL) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._businessLicenseStartDate) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._businessLicenseEndDate) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._ownerLocation) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._companyBankAccount) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._companyBankPhone) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._companyBankValidated) }()
        case 28: try { try decoder.decodeSingularInt32Field(value: &_storage._certifyStatus) }()
        case 29: try { try decoder.decodeSingularInt64Field(value: &_storage._ownerIDFrontAttachmentID) }()
        case 30: try { try decoder.decodeSingularInt64Field(value: &_storage._ownerIDBackAttachmentID) }()
        case 31: try { try decoder.decodeSingularInt64Field(value: &_storage._shopLogoAttachmentID) }()
        case 32: try { try decoder.decodeSingularInt64Field(value: &_storage._businessLicenseAttachmentID) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._manager) }()
        case 34: try { try decoder.decodeSingularStringField(value: &_storage._managerPhone) }()
        case 35: try { try decoder.decodeRepeatedInt64Field(value: &_storage._categoryID) }()
        case 36: try { try decoder.decodeSingularStringField(value: &_storage._ownerIDBackPath) }()
        case 37: try { try decoder.decodeSingularStringField(value: &_storage._shopLogoPath) }()
        case 38: try { try decoder.decodeSingularStringField(value: &_storage._businessLicensePath) }()
        case 39: try { try decoder.decodeSingularStringField(value: &_storage._ownerIDFrontPath) }()
        case 40: try { try decoder.decodeSingularMessageField(value: &_storage._shopKeeper) }()
        case 41: try { try decoder.decodeSingularStringField(value: &_storage._status) }()
        case 42: try { try decoder.decodeSingularStringField(value: &_storage._approvalStatus) }()
        case 43: try { try decoder.decodeSingularStringField(value: &_storage._studentCardPath) }()
        case 44: try { try decoder.decodeSingularStringField(value: &_storage._managerWechatID) }()
        case 45: try { try decoder.decodeSingularStringField(value: &_storage._paymentQrcodePath) }()
        case 46: try { try decoder.decodeSingularStringField(value: &_storage._teacherName) }()
        case 47: try { try decoder.decodeSingularStringField(value: &_storage._teacherPhone) }()
        case 48: try { try decoder.decodeSingularStringField(value: &_storage._className) }()
        case 49: try { try decoder.decodeSingularStringField(value: &_storage._studentNum) }()
        case 50: try { try decoder.decodeSingularMessageField(value: &_storage._approvalFlow) }()
        case 51: try { try decoder.decodeSingularInt32Field(value: &_storage._currentLevelOrder) }()
        case 52: try { try decoder.decodeSingularStringField(value: &_storage._approvalResult) }()
        case 333: try { try decoder.decodeRepeatedMessageField(value: &_storage._shopQualification) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._shopID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shopID, fieldNumber: 1)
      }
      if _storage._sellerID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sellerID, fieldNumber: 2)
      }
      if !_storage._shopName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shopName, fieldNumber: 3)
      }
      if !_storage._shopType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shopType, fieldNumber: 4)
      }
      if !_storage._companyName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyName, fieldNumber: 5)
      }
      if !_storage._companyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyID, fieldNumber: 6)
      }
      if !_storage._companyCategory.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyCategory, fieldNumber: 7)
      }
      if !_storage._ownerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerID, fieldNumber: 8)
      }
      if !_storage._ownerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerName, fieldNumber: 9)
      }
      if !_storage._ownerIDFrontURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerIDFrontURL, fieldNumber: 11)
      }
      if !_storage._ownerIDBackURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerIDBackURL, fieldNumber: 12)
      }
      if !_storage._ownerIDStartDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerIDStartDate, fieldNumber: 13)
      }
      if !_storage._ownerIDExpiryDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerIDExpiryDate, fieldNumber: 14)
      }
      if !_storage._shopLogoURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shopLogoURL, fieldNumber: 15)
      }
      if !_storage._province.isEmpty {
        try visitor.visitSingularStringField(value: _storage._province, fieldNumber: 16)
      }
      if !_storage._city.isEmpty {
        try visitor.visitSingularStringField(value: _storage._city, fieldNumber: 17)
      }
      if !_storage._district.isEmpty {
        try visitor.visitSingularStringField(value: _storage._district, fieldNumber: 18)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 19)
      }
      if !_storage._businessLicenseURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._businessLicenseURL, fieldNumber: 20)
      }
      if !_storage._businessLicenseStartDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._businessLicenseStartDate, fieldNumber: 21)
      }
      if !_storage._businessLicenseEndDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._businessLicenseEndDate, fieldNumber: 22)
      }
      if !_storage._ownerLocation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerLocation, fieldNumber: 24)
      }
      if !_storage._companyBankAccount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyBankAccount, fieldNumber: 25)
      }
      if !_storage._companyBankPhone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._companyBankPhone, fieldNumber: 26)
      }
      if _storage._companyBankValidated != false {
        try visitor.visitSingularBoolField(value: _storage._companyBankValidated, fieldNumber: 27)
      }
      if _storage._certifyStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._certifyStatus, fieldNumber: 28)
      }
      if _storage._ownerIDFrontAttachmentID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ownerIDFrontAttachmentID, fieldNumber: 29)
      }
      if _storage._ownerIDBackAttachmentID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ownerIDBackAttachmentID, fieldNumber: 30)
      }
      if _storage._shopLogoAttachmentID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shopLogoAttachmentID, fieldNumber: 31)
      }
      if _storage._businessLicenseAttachmentID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._businessLicenseAttachmentID, fieldNumber: 32)
      }
      if !_storage._manager.isEmpty {
        try visitor.visitSingularStringField(value: _storage._manager, fieldNumber: 33)
      }
      if !_storage._managerPhone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._managerPhone, fieldNumber: 34)
      }
      if !_storage._categoryID.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._categoryID, fieldNumber: 35)
      }
      if !_storage._ownerIDBackPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerIDBackPath, fieldNumber: 36)
      }
      if !_storage._shopLogoPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shopLogoPath, fieldNumber: 37)
      }
      if !_storage._businessLicensePath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._businessLicensePath, fieldNumber: 38)
      }
      if !_storage._ownerIDFrontPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerIDFrontPath, fieldNumber: 39)
      }
      try { if let v = _storage._shopKeeper {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      } }()
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 41)
      }
      if !_storage._approvalStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._approvalStatus, fieldNumber: 42)
      }
      if !_storage._studentCardPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._studentCardPath, fieldNumber: 43)
      }
      if !_storage._managerWechatID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._managerWechatID, fieldNumber: 44)
      }
      if !_storage._paymentQrcodePath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._paymentQrcodePath, fieldNumber: 45)
      }
      if !_storage._teacherName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherName, fieldNumber: 46)
      }
      if !_storage._teacherPhone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherPhone, fieldNumber: 47)
      }
      if !_storage._className.isEmpty {
        try visitor.visitSingularStringField(value: _storage._className, fieldNumber: 48)
      }
      if !_storage._studentNum.isEmpty {
        try visitor.visitSingularStringField(value: _storage._studentNum, fieldNumber: 49)
      }
      try { if let v = _storage._approvalFlow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      } }()
      if _storage._currentLevelOrder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._currentLevelOrder, fieldNumber: 51)
      }
      if !_storage._approvalResult.isEmpty {
        try visitor.visitSingularStringField(value: _storage._approvalResult, fieldNumber: 52)
      }
      if !_storage._shopQualification.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._shopQualification, fieldNumber: 333)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_Shop, rhs: GloryApi_Shop) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._shopID != rhs_storage._shopID {return false}
        if _storage._sellerID != rhs_storage._sellerID {return false}
        if _storage._shopName != rhs_storage._shopName {return false}
        if _storage._categoryID != rhs_storage._categoryID {return false}
        if _storage._shopQualification != rhs_storage._shopQualification {return false}
        if _storage._shopType != rhs_storage._shopType {return false}
        if _storage._companyName != rhs_storage._companyName {return false}
        if _storage._companyID != rhs_storage._companyID {return false}
        if _storage._companyCategory != rhs_storage._companyCategory {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._ownerName != rhs_storage._ownerName {return false}
        if _storage._ownerIDFrontURL != rhs_storage._ownerIDFrontURL {return false}
        if _storage._ownerIDBackURL != rhs_storage._ownerIDBackURL {return false}
        if _storage._ownerIDStartDate != rhs_storage._ownerIDStartDate {return false}
        if _storage._ownerIDExpiryDate != rhs_storage._ownerIDExpiryDate {return false}
        if _storage._shopLogoURL != rhs_storage._shopLogoURL {return false}
        if _storage._province != rhs_storage._province {return false}
        if _storage._city != rhs_storage._city {return false}
        if _storage._district != rhs_storage._district {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._businessLicenseURL != rhs_storage._businessLicenseURL {return false}
        if _storage._businessLicenseStartDate != rhs_storage._businessLicenseStartDate {return false}
        if _storage._businessLicenseEndDate != rhs_storage._businessLicenseEndDate {return false}
        if _storage._ownerLocation != rhs_storage._ownerLocation {return false}
        if _storage._companyBankAccount != rhs_storage._companyBankAccount {return false}
        if _storage._companyBankPhone != rhs_storage._companyBankPhone {return false}
        if _storage._companyBankValidated != rhs_storage._companyBankValidated {return false}
        if _storage._certifyStatus != rhs_storage._certifyStatus {return false}
        if _storage._ownerIDFrontAttachmentID != rhs_storage._ownerIDFrontAttachmentID {return false}
        if _storage._ownerIDBackAttachmentID != rhs_storage._ownerIDBackAttachmentID {return false}
        if _storage._shopLogoAttachmentID != rhs_storage._shopLogoAttachmentID {return false}
        if _storage._businessLicenseAttachmentID != rhs_storage._businessLicenseAttachmentID {return false}
        if _storage._manager != rhs_storage._manager {return false}
        if _storage._managerPhone != rhs_storage._managerPhone {return false}
        if _storage._ownerIDFrontPath != rhs_storage._ownerIDFrontPath {return false}
        if _storage._ownerIDBackPath != rhs_storage._ownerIDBackPath {return false}
        if _storage._shopLogoPath != rhs_storage._shopLogoPath {return false}
        if _storage._businessLicensePath != rhs_storage._businessLicensePath {return false}
        if _storage._shopKeeper != rhs_storage._shopKeeper {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._approvalStatus != rhs_storage._approvalStatus {return false}
        if _storage._approvalResult != rhs_storage._approvalResult {return false}
        if _storage._className != rhs_storage._className {return false}
        if _storage._studentNum != rhs_storage._studentNum {return false}
        if _storage._studentCardPath != rhs_storage._studentCardPath {return false}
        if _storage._managerWechatID != rhs_storage._managerWechatID {return false}
        if _storage._paymentQrcodePath != rhs_storage._paymentQrcodePath {return false}
        if _storage._teacherName != rhs_storage._teacherName {return false}
        if _storage._teacherPhone != rhs_storage._teacherPhone {return false}
        if _storage._approvalFlow != rhs_storage._approvalFlow {return false}
        if _storage._currentLevelOrder != rhs_storage._currentLevelOrder {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopQualification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopQualification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_qualification_id"),
    2: .standard(proto: "shop_qualification_url"),
    3: .standard(proto: "category_root"),
    4: .standard(proto: "qualification_name"),
    5: .standard(proto: "attachment_id"),
    6: .standard(proto: "validity_period"),
    7: .standard(proto: "shop_qualification_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.shopQualificationID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shopQualificationURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.categoryRoot) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.qualificationName) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.attachmentID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.validityPeriod) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.shopQualificationPath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shopQualificationID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopQualificationID, fieldNumber: 1)
    }
    if !self.shopQualificationURL.isEmpty {
      try visitor.visitSingularStringField(value: self.shopQualificationURL, fieldNumber: 2)
    }
    if !self.categoryRoot.isEmpty {
      try visitor.visitSingularStringField(value: self.categoryRoot, fieldNumber: 3)
    }
    if !self.qualificationName.isEmpty {
      try visitor.visitSingularStringField(value: self.qualificationName, fieldNumber: 4)
    }
    if self.attachmentID != 0 {
      try visitor.visitSingularInt64Field(value: self.attachmentID, fieldNumber: 5)
    }
    if !self.validityPeriod.isEmpty {
      try visitor.visitSingularStringField(value: self.validityPeriod, fieldNumber: 6)
    }
    if !self.shopQualificationPath.isEmpty {
      try visitor.visitSingularStringField(value: self.shopQualificationPath, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopQualification, rhs: GloryApi_ShopQualification) -> Bool {
    if lhs.shopQualificationID != rhs.shopQualificationID {return false}
    if lhs.shopQualificationURL != rhs.shopQualificationURL {return false}
    if lhs.categoryRoot != rhs.categoryRoot {return false}
    if lhs.qualificationName != rhs.qualificationName {return false}
    if lhs.attachmentID != rhs.attachmentID {return false}
    if lhs.validityPeriod != rhs.validityPeriod {return false}
    if lhs.shopQualificationPath != rhs.shopQualificationPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopBusiness: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopBusiness"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sale_total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.saleTotal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.saleTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.saleTotal, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopBusiness, rhs: GloryApi_ShopBusiness) -> Bool {
    if lhs.saleTotal != rhs.saleTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopKeeper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopKeeper"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "user_name"),
    3: .standard(proto: "class_id"),
    4: .standard(proto: "class_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.classID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.className) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 2)
    }
    if self.classID != 0 {
      try visitor.visitSingularInt64Field(value: self.classID, fieldNumber: 3)
    }
    if !self.className.isEmpty {
      try visitor.visitSingularStringField(value: self.className, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopKeeper, rhs: GloryApi_ShopKeeper) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.classID != rhs.classID {return false}
    if lhs.className != rhs.className {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopWithAuthor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopWithAuthor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shop"),
    2: .standard(proto: "author_info"),
    3: .standard(proto: "shop_business"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._shop) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._authorInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._shopBusiness) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._shop {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._authorInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._shopBusiness {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopWithAuthor, rhs: GloryApi_ShopWithAuthor) -> Bool {
    if lhs._shop != rhs._shop {return false}
    if lhs._authorInfo != rhs._authorInfo {return false}
    if lhs._shopBusiness != rhs._shopBusiness {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateShopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateShopRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "shop"),
    3: .standard(proto: "created_by"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._shop) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.createdBy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._shop {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.createdBy.isEmpty {
      try visitor.visitSingularStringField(value: self.createdBy, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateShopRequest, rhs: GloryApi_CreateShopRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs._shop != rhs._shop {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateShopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateShopResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateShopResponse, rhs: GloryApi_CreateShopResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetShopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetShopRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetShopRequest, rhs: GloryApi_GetShopRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetShopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetShopResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_detail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._shopDetail) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._shopDetail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetShopResponse, rhs: GloryApi_GetShopResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._shopDetail != rhs._shopDetail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateShopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateShopRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "shop"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._shop) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._shop {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateShopRequest, rhs: GloryApi_UpdateShopRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs._shop != rhs._shop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateShopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateShopResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateShopResponse, rhs: GloryApi_UpdateShopResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    4: .standard(proto: "seller_id"),
    5: .standard(proto: "shop_name"),
    6: .standard(proto: "shop_type"),
    7: .same(proto: "province"),
    8: .same(proto: "city"),
    9: .same(proto: "district"),
    10: .same(proto: "address"),
    11: .same(proto: "post"),
    12: .standard(proto: "company_name"),
    13: .standard(proto: "owner_name"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.sellerID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.shopType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.province) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.city) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.district) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.post) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.companyName) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.ownerName) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if self.sellerID != 0 {
      try visitor.visitSingularInt64Field(value: self.sellerID, fieldNumber: 4)
    }
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 5)
    }
    if !self.shopType.isEmpty {
      try visitor.visitSingularStringField(value: self.shopType, fieldNumber: 6)
    }
    if !self.province.isEmpty {
      try visitor.visitSingularStringField(value: self.province, fieldNumber: 7)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 8)
    }
    if !self.district.isEmpty {
      try visitor.visitSingularStringField(value: self.district, fieldNumber: 9)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 10)
    }
    if !self.post.isEmpty {
      try visitor.visitSingularStringField(value: self.post, fieldNumber: 11)
    }
    if !self.companyName.isEmpty {
      try visitor.visitSingularStringField(value: self.companyName, fieldNumber: 12)
    }
    if !self.ownerName.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerName, fieldNumber: 13)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopRequest, rhs: GloryApi_ListShopRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.shopName != rhs.shopName {return false}
    if lhs.shopType != rhs.shopType {return false}
    if lhs.province != rhs.province {return false}
    if lhs.city != rhs.city {return false}
    if lhs.district != rhs.district {return false}
    if lhs.address != rhs.address {return false}
    if lhs.post != rhs.post {return false}
    if lhs.companyName != rhs.companyName {return false}
    if lhs.ownerName != rhs.ownerName {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_detail"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shopDetail) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.shopDetail.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shopDetail, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopResponse, rhs: GloryApi_ListShopResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopDetail != rhs.shopDetail {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteShopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteShopRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteShopRequest, rhs: GloryApi_DeleteShopRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteShopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteShopResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteShopResponse, rhs: GloryApi_DeleteShopResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ReopenShopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReopenShopRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ReopenShopRequest, rhs: GloryApi_ReopenShopRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ReopenShopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReopenShopResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ReopenShopResponse, rhs: GloryApi_ReopenShopResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_AddShopAccessRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddShopAccessRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    3: .standard(proto: "access_type"),
    4: .same(proto: "phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accessType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.phone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if !self.accessType.isEmpty {
      try visitor.visitSingularStringField(value: self.accessType, fieldNumber: 3)
    }
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_AddShopAccessRequest, rhs: GloryApi_AddShopAccessRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.accessType != rhs.accessType {return false}
    if lhs.phone != rhs.phone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_AddShopAccessResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddShopAccessResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_AddShopAccessResponse, rhs: GloryApi_AddShopAccessResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_RemoveShopAccessRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveShopAccessRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_access_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopAccessID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopAccessID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopAccessID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_RemoveShopAccessRequest, rhs: GloryApi_RemoveShopAccessRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopAccessID != rhs.shopAccessID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_RemoveShopAccessResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveShopAccessResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_RemoveShopAccessResponse, rhs: GloryApi_RemoveShopAccessResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_VerifyFieldRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyFieldRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_VerifyFieldRequest, rhs: GloryApi_VerifyFieldRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopName != rhs.shopName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_VerifyFieldResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyFieldResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_name_valid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.shopNameValid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopNameValid != false {
      try visitor.visitSingularBoolField(value: self.shopNameValid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_VerifyFieldResponse, rhs: GloryApi_VerifyFieldResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopNameValid != rhs.shopNameValid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopAccess: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopAccess"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_access_id"),
    2: .standard(proto: "shop_id"),
    3: .standard(proto: "user_id"),
    4: .standard(proto: "access_type"),
    5: .same(proto: "phone"),
    6: .same(proto: "name"),
    7: .standard(proto: "binding_method"),
    8: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.shopAccessID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.accessType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.phone) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.bindingMethod) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shopAccessID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopAccessID, fieldNumber: 1)
    }
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 3)
    }
    if !self.accessType.isEmpty {
      try visitor.visitSingularStringField(value: self.accessType, fieldNumber: 4)
    }
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 5)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 6)
    }
    if !self.bindingMethod.isEmpty {
      try visitor.visitSingularStringField(value: self.bindingMethod, fieldNumber: 7)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopAccess, rhs: GloryApi_ShopAccess) -> Bool {
    if lhs.shopAccessID != rhs.shopAccessID {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.accessType != rhs.accessType {return false}
    if lhs.phone != rhs.phone {return false}
    if lhs.name != rhs.name {return false}
    if lhs.bindingMethod != rhs.bindingMethod {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopAccessRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopAccessRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    3: .standard(proto: "access_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accessType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if !self.accessType.isEmpty {
      try visitor.visitSingularStringField(value: self.accessType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopAccessRequest, rhs: GloryApi_ListShopAccessRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.accessType != rhs.accessType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopAccessResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopAccessResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_access"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shopAccess) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.shopAccess.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shopAccess, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopAccessResponse, rhs: GloryApi_ListShopAccessResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopAccess != rhs.shopAccess {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_AddShopCategoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddShopCategoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    3: .standard(proto: "category_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeRepeatedInt64Field(value: &self.categoryID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if !self.categoryID.isEmpty {
      try visitor.visitPackedInt64Field(value: self.categoryID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_AddShopCategoryRequest, rhs: GloryApi_AddShopCategoryRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.categoryID != rhs.categoryID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_AddShopCategoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddShopCategoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_AddShopCategoryResponse, rhs: GloryApi_AddShopCategoryResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_RemoveShopCategoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveShopCategoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    3: .standard(proto: "shop_category_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeRepeatedInt64Field(value: &self.shopCategoryID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if !self.shopCategoryID.isEmpty {
      try visitor.visitPackedInt64Field(value: self.shopCategoryID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_RemoveShopCategoryRequest, rhs: GloryApi_RemoveShopCategoryRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.shopCategoryID != rhs.shopCategoryID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_RemoveShopCategoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveShopCategoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_RemoveShopCategoryResponse, rhs: GloryApi_RemoveShopCategoryResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetShopCategoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetShopCategoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetShopCategoryRequest, rhs: GloryApi_GetShopCategoryRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopCategory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_category_id"),
    3: .same(proto: "category"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.shopCategoryID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._category) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.shopCategoryID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopCategoryID, fieldNumber: 1)
    }
    try { if let v = self._category {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopCategory, rhs: GloryApi_ShopCategory) -> Bool {
    if lhs.shopCategoryID != rhs.shopCategoryID {return false}
    if lhs._category != rhs._category {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetShopCategoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetShopCategoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_id"),
    3: .standard(proto: "category_detail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.categoryDetail) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if !self.categoryDetail.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categoryDetail, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetShopCategoryResponse, rhs: GloryApi_GetShopCategoryResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.categoryDetail != rhs.categoryDetail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopQualificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopQualificationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopQualificationRequest, rhs: GloryApi_ListShopQualificationRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopQualificationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopQualificationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_qualification"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shopQualification) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.shopQualification.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shopQualification, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopQualificationResponse, rhs: GloryApi_ListShopQualificationResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopQualification != rhs.shopQualification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateShopManagerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateShopManagerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    3: .same(proto: "manager"),
    4: .standard(proto: "manager_phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.manager) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.managerPhone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if !self.manager.isEmpty {
      try visitor.visitSingularStringField(value: self.manager, fieldNumber: 3)
    }
    if !self.managerPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.managerPhone, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateShopManagerRequest, rhs: GloryApi_UpdateShopManagerRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.manager != rhs.manager {return false}
    if lhs.managerPhone != rhs.managerPhone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateShopManagerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateShopManagerResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateShopManagerResponse, rhs: GloryApi_UpdateShopManagerResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateShopStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateShopStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    3: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateShopStatusRequest, rhs: GloryApi_UpdateShopStatusRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateShopStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateShopStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateShopStatusResponse, rhs: GloryApi_UpdateShopStatusResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetShopBusinessDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetShopBusinessDataRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_id"),
    3: .same(proto: "period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.period) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 2)
    }
    if self.period != 0 {
      try visitor.visitSingularInt64Field(value: self.period, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetShopBusinessDataRequest, rhs: GloryApi_GetShopBusinessDataRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopID != rhs.shopID {return false}
    if lhs.period != rhs.period {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopChartData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopChartData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .standard(proto: "deal_amount"),
    3: .standard(proto: "shop_buyer_amount"),
    4: .standard(proto: "shop_order_amount"),
    5: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.date) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.dealAmount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.shopBuyerAmount) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.shopOrderAmount) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 1)
    }
    if self.dealAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.dealAmount, fieldNumber: 2)
    }
    if self.shopBuyerAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.shopBuyerAmount, fieldNumber: 3)
    }
    if self.shopOrderAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.shopOrderAmount, fieldNumber: 4)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopChartData, rhs: GloryApi_ShopChartData) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.dealAmount != rhs.dealAmount {return false}
    if lhs.shopBuyerAmount != rhs.shopBuyerAmount {return false}
    if lhs.shopOrderAmount != rhs.shopOrderAmount {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopBusinessData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopBusinessData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_chart_data"),
    2: .standard(proto: "total_deal_amount"),
    3: .standard(proto: "total_visitor_amount"),
    4: .standard(proto: "total_order_amount"),
    5: .standard(proto: "shop_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.shopChartData) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.totalDealAmount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.totalVisitorAmount) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.totalOrderAmount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.shopType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shopChartData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shopChartData, fieldNumber: 1)
    }
    if self.totalDealAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.totalDealAmount, fieldNumber: 2)
    }
    if self.totalVisitorAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalVisitorAmount, fieldNumber: 3)
    }
    if self.totalOrderAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalOrderAmount, fieldNumber: 4)
    }
    if !self.shopType.isEmpty {
      try visitor.visitSingularStringField(value: self.shopType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopBusinessData, rhs: GloryApi_ShopBusinessData) -> Bool {
    if lhs.shopChartData != rhs.shopChartData {return false}
    if lhs.totalDealAmount != rhs.totalDealAmount {return false}
    if lhs.totalVisitorAmount != rhs.totalVisitorAmount {return false}
    if lhs.totalOrderAmount != rhs.totalOrderAmount {return false}
    if lhs.shopType != rhs.shopType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetShopBusinessDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetShopBusinessDataResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_business_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._shopBusinessData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._shopBusinessData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetShopBusinessDataResponse, rhs: GloryApi_GetShopBusinessDataResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._shopBusinessData != rhs._shopBusinessData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopSummary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_id"),
    2: .standard(proto: "shop_logo_url"),
    3: .standard(proto: "shop_name"),
    4: .standard(proto: "deal_amount"),
    5: .standard(proto: "order_total"),
    6: .standard(proto: "seller_id"),
    7: .standard(proto: "shop_manager_name"),
    8: .standard(proto: "user_name"),
    9: .standard(proto: "clas_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.shopID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shopLogoURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.dealAmount) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.orderTotal) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.sellerID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.shopManagerName) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.clasName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shopID != 0 {
      try visitor.visitSingularInt64Field(value: self.shopID, fieldNumber: 1)
    }
    if !self.shopLogoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.shopLogoURL, fieldNumber: 2)
    }
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 3)
    }
    if self.dealAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.dealAmount, fieldNumber: 4)
    }
    if self.orderTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.orderTotal, fieldNumber: 5)
    }
    if self.sellerID != 0 {
      try visitor.visitSingularInt64Field(value: self.sellerID, fieldNumber: 6)
    }
    if !self.shopManagerName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopManagerName, fieldNumber: 7)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 8)
    }
    if !self.clasName.isEmpty {
      try visitor.visitSingularStringField(value: self.clasName, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopSummary, rhs: GloryApi_ShopSummary) -> Bool {
    if lhs.shopID != rhs.shopID {return false}
    if lhs.shopLogoURL != rhs.shopLogoURL {return false}
    if lhs.shopName != rhs.shopName {return false}
    if lhs.dealAmount != rhs.dealAmount {return false}
    if lhs.orderTotal != rhs.orderTotal {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.shopManagerName != rhs.shopManagerName {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.clasName != rhs.clasName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopSummaryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopSummaryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "shop_name_or_username"),
    3: .standard(proto: "shop_type"),
    4: .standard(proto: "major_id"),
    5: .standard(proto: "clas_id"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shopNameOrUsername) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shopType) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.majorID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.clasID) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.shopNameOrUsername.isEmpty {
      try visitor.visitSingularStringField(value: self.shopNameOrUsername, fieldNumber: 2)
    }
    if !self.shopType.isEmpty {
      try visitor.visitSingularStringField(value: self.shopType, fieldNumber: 3)
    }
    if self.majorID != 0 {
      try visitor.visitSingularInt64Field(value: self.majorID, fieldNumber: 4)
    }
    if self.clasID != 0 {
      try visitor.visitSingularInt64Field(value: self.clasID, fieldNumber: 5)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopSummaryRequest, rhs: GloryApi_ListShopSummaryRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.shopNameOrUsername != rhs.shopNameOrUsername {return false}
    if lhs.shopType != rhs.shopType {return false}
    if lhs.majorID != rhs.majorID {return false}
    if lhs.clasID != rhs.clasID {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopSummaryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopSummaryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_list"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shopList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.shopList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shopList, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopSummaryResponse, rhs: GloryApi_ListShopSummaryResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopList != rhs.shopList {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopBySellerIDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopBySellerIDRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "seller_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.sellerID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.sellerID != 0 {
      try visitor.visitSingularInt64Field(value: self.sellerID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopBySellerIDRequest, rhs: GloryApi_ListShopBySellerIDRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.sellerID != rhs.sellerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListShopBySellerIDResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListShopBySellerIDResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "shop_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shopList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.shopList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shopList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListShopBySellerIDResponse, rhs: GloryApi_ListShopBySellerIDResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.shopList != rhs.shopList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
