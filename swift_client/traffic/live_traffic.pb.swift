// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: traffic/live_traffic.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_ListSchoolLiveTrafficRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var tenantID: Int64 = 0

  var start: Int64 = 0

  var end: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_ListSchoolLiveTrafficResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var schoolLiveTrafficSummary: GloryApi_SchoolLiveTraffic {
    get {return _schoolLiveTrafficSummary ?? GloryApi_SchoolLiveTraffic()}
    set {_schoolLiveTrafficSummary = newValue}
  }
  /// Returns true if `schoolLiveTrafficSummary` has been explicitly set.
  var hasSchoolLiveTrafficSummary: Bool {return self._schoolLiveTrafficSummary != nil}
  /// Clears the value of `schoolLiveTrafficSummary`. Subsequent reads from it will return its default value.
  mutating func clearSchoolLiveTrafficSummary() {self._schoolLiveTrafficSummary = nil}

  var schoolLiveTrafficList: [GloryApi_SchoolLiveTraffic] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _schoolLiveTrafficSummary: GloryApi_SchoolLiveTraffic? = nil
}

struct GloryApi_SchoolLiveTraffic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tenantID: Int64 = 0

  var tenantName: String = String()

  var usedTraffic: Int64 = 0

  var remainingTraffic: Int64 = 0

  var remainingPercent: Double = 0

  var maxLiveDuration: Int64 = 0

  var averageLiveDuration: Int64 = 0

  var maxDayTraffic: Int64 = 0

  var averageDayTraffic: Int64 = 0

  var maybeUseDay: Int64 = 0

  /// 直播总时长 单位秒
  var totalLiveDuration: Int64 = 0

  /// 直播总花费 单位分
  var totalLiveCost: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_GetSchoolLiveTrafficChartRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var tenantID: Int64 = 0

  var start: Int64 = 0

  var end: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_SchooLiveTrafficChart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var date: String = String()

  var traffic: Int64 = 0

  var timestamp: Int64 = 0

  var subTraffic: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_GetSchoolLiveTrafficChartResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var totalTraffic: Int64 = 0

  var aliTotalTraffic: Int64 = 0

  var liveTrafficChart: [GloryApi_SchooLiveTrafficChart] = []

  var aliLiveTrafficChart: [GloryApi_SchooLiveTrafficChart] = []

  var subTrafficChart: [GloryApi_SchooLiveTrafficChart] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_GetAllLiveTrafficRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetAllLiveTrafficResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var totalTraffic: Int64 = 0

  var aliTotalTraffic: Int64 = 0

  var totalCost: Int64 = 0

  var aliTotalCost: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_GetSchooLiveTrafficRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var tenantID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetSchooLiveTrafficResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var totalTraffic: Int64 = 0

  var usedTraffic: Int64 = 0

  var averageDayTraffic: Int64 = 0

  var maybeUseDay: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ListTenantLiveTrafficConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_TenantTrafficConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tenantID: Int64 = 0

  var tenantName: String = String()

  /// 直播时长限制 秒
  var liveDurationLimit: Int64 = 0

  /// 单日流量限制 KB
  var trafficDayLimit: Int64 = 0

  /// 直播流量总包 KB
  var trafficAllCount: Int64 = 0

  /// 直播流量预警值 KB
  var trafficUsedWarningCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListTenantLiveTrafficConfigResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var tenantTrafficConfigList: [GloryApi_TenantTrafficConfig] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_UpdateTenantLiveTrafficConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var tenantID: Int64 = 0

  var liveDurationLimit: Int64 = 0

  var trafficDayLimit: Int64 = 0

  var trafficAllCount: Int64 = 0

  var trafficUsedWarningCount: Int64 = 0

  var dayTrafficLimitPercent: Int64 = 0

  var allTrafficLimitPercent: Int64 = 0

  /// 最大同时直播房间数量限制
  var maxLivingLimit: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_UpdateTenantLiveTrafficConfigResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ListTrafficWarningRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var warningType: Int64 = 0

  var tenantID: Int64 = 0

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_TrafficWarning {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trafficWarningID: Int64 = 0

  var tenantID: Int64 = 0

  var tenantName: String = String()

  var warningType: Int64 = 0

  var warningContent: String = String()

  var createdAt: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListTrafficWarningResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var trafficWarningList: [GloryApi_TrafficWarning] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_DeleteTrafficWarningRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var trafficWarningID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_DeleteTrafficWarningResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_ListSchoolLiveTrafficRequest: @unchecked Sendable {}
extension GloryApi_ListSchoolLiveTrafficResponse: @unchecked Sendable {}
extension GloryApi_SchoolLiveTraffic: @unchecked Sendable {}
extension GloryApi_GetSchoolLiveTrafficChartRequest: @unchecked Sendable {}
extension GloryApi_SchooLiveTrafficChart: @unchecked Sendable {}
extension GloryApi_GetSchoolLiveTrafficChartResponse: @unchecked Sendable {}
extension GloryApi_GetAllLiveTrafficRequest: @unchecked Sendable {}
extension GloryApi_GetAllLiveTrafficResponse: @unchecked Sendable {}
extension GloryApi_GetSchooLiveTrafficRequest: @unchecked Sendable {}
extension GloryApi_GetSchooLiveTrafficResponse: @unchecked Sendable {}
extension GloryApi_ListTenantLiveTrafficConfigRequest: @unchecked Sendable {}
extension GloryApi_TenantTrafficConfig: @unchecked Sendable {}
extension GloryApi_ListTenantLiveTrafficConfigResponse: @unchecked Sendable {}
extension GloryApi_UpdateTenantLiveTrafficConfigRequest: @unchecked Sendable {}
extension GloryApi_UpdateTenantLiveTrafficConfigResponse: @unchecked Sendable {}
extension GloryApi_ListTrafficWarningRequest: @unchecked Sendable {}
extension GloryApi_TrafficWarning: @unchecked Sendable {}
extension GloryApi_ListTrafficWarningResponse: @unchecked Sendable {}
extension GloryApi_DeleteTrafficWarningRequest: @unchecked Sendable {}
extension GloryApi_DeleteTrafficWarningResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_ListSchoolLiveTrafficRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListSchoolLiveTrafficRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "tenant_id"),
    3: .same(proto: "start"),
    4: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.start) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 2)
    }
    if self.start != 0 {
      try visitor.visitSingularInt64Field(value: self.start, fieldNumber: 3)
    }
    if self.end != 0 {
      try visitor.visitSingularInt64Field(value: self.end, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListSchoolLiveTrafficRequest, rhs: GloryApi_ListSchoolLiveTrafficRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListSchoolLiveTrafficResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListSchoolLiveTrafficResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "school_live_traffic_summary"),
    3: .standard(proto: "school_live_traffic_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._schoolLiveTrafficSummary) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.schoolLiveTrafficList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._schoolLiveTrafficSummary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.schoolLiveTrafficList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.schoolLiveTrafficList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListSchoolLiveTrafficResponse, rhs: GloryApi_ListSchoolLiveTrafficResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._schoolLiveTrafficSummary != rhs._schoolLiveTrafficSummary {return false}
    if lhs.schoolLiveTrafficList != rhs.schoolLiveTrafficList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SchoolLiveTraffic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SchoolLiveTraffic"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tenant_id"),
    2: .standard(proto: "tenant_name"),
    3: .standard(proto: "used_traffic"),
    4: .standard(proto: "remaining_traffic"),
    5: .standard(proto: "remaining_percent"),
    6: .standard(proto: "max_live_duration"),
    7: .standard(proto: "average_live_duration"),
    8: .standard(proto: "max_day_traffic"),
    9: .standard(proto: "average_day_traffic"),
    10: .standard(proto: "maybe_use_day"),
    11: .standard(proto: "total_live_duration"),
    12: .standard(proto: "total_live_cost"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenantName) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.usedTraffic) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.remainingTraffic) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.remainingPercent) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.maxLiveDuration) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.averageLiveDuration) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.maxDayTraffic) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.averageDayTraffic) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.maybeUseDay) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.totalLiveDuration) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.totalLiveCost) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 1)
    }
    if !self.tenantName.isEmpty {
      try visitor.visitSingularStringField(value: self.tenantName, fieldNumber: 2)
    }
    if self.usedTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.usedTraffic, fieldNumber: 3)
    }
    if self.remainingTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.remainingTraffic, fieldNumber: 4)
    }
    if self.remainingPercent != 0 {
      try visitor.visitSingularDoubleField(value: self.remainingPercent, fieldNumber: 5)
    }
    if self.maxLiveDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.maxLiveDuration, fieldNumber: 6)
    }
    if self.averageLiveDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.averageLiveDuration, fieldNumber: 7)
    }
    if self.maxDayTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.maxDayTraffic, fieldNumber: 8)
    }
    if self.averageDayTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.averageDayTraffic, fieldNumber: 9)
    }
    if self.maybeUseDay != 0 {
      try visitor.visitSingularInt64Field(value: self.maybeUseDay, fieldNumber: 10)
    }
    if self.totalLiveDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.totalLiveDuration, fieldNumber: 11)
    }
    if self.totalLiveCost != 0 {
      try visitor.visitSingularInt64Field(value: self.totalLiveCost, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SchoolLiveTraffic, rhs: GloryApi_SchoolLiveTraffic) -> Bool {
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.tenantName != rhs.tenantName {return false}
    if lhs.usedTraffic != rhs.usedTraffic {return false}
    if lhs.remainingTraffic != rhs.remainingTraffic {return false}
    if lhs.remainingPercent != rhs.remainingPercent {return false}
    if lhs.maxLiveDuration != rhs.maxLiveDuration {return false}
    if lhs.averageLiveDuration != rhs.averageLiveDuration {return false}
    if lhs.maxDayTraffic != rhs.maxDayTraffic {return false}
    if lhs.averageDayTraffic != rhs.averageDayTraffic {return false}
    if lhs.maybeUseDay != rhs.maybeUseDay {return false}
    if lhs.totalLiveDuration != rhs.totalLiveDuration {return false}
    if lhs.totalLiveCost != rhs.totalLiveCost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetSchoolLiveTrafficChartRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSchoolLiveTrafficChartRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "tenant_id"),
    3: .same(proto: "start"),
    4: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.start) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 2)
    }
    if self.start != 0 {
      try visitor.visitSingularInt64Field(value: self.start, fieldNumber: 3)
    }
    if self.end != 0 {
      try visitor.visitSingularInt64Field(value: self.end, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetSchoolLiveTrafficChartRequest, rhs: GloryApi_GetSchoolLiveTrafficChartRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SchooLiveTrafficChart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SchooLiveTrafficChart"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "traffic"),
    3: .same(proto: "timestamp"),
    4: .standard(proto: "sub_traffic"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.date) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.traffic) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.subTraffic) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 1)
    }
    if self.traffic != 0 {
      try visitor.visitSingularInt64Field(value: self.traffic, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    if self.subTraffic != 0 {
      try visitor.visitSingularDoubleField(value: self.subTraffic, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SchooLiveTrafficChart, rhs: GloryApi_SchooLiveTrafficChart) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.traffic != rhs.traffic {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.subTraffic != rhs.subTraffic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetSchoolLiveTrafficChartResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSchoolLiveTrafficChartResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "total_traffic"),
    3: .standard(proto: "ali_total_traffic"),
    4: .standard(proto: "live_traffic_chart"),
    5: .standard(proto: "ali_live_traffic_chart"),
    6: .standard(proto: "sub_traffic_chart"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalTraffic) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.aliTotalTraffic) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.liveTrafficChart) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.aliLiveTrafficChart) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.subTrafficChart) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.totalTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.totalTraffic, fieldNumber: 2)
    }
    if self.aliTotalTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.aliTotalTraffic, fieldNumber: 3)
    }
    if !self.liveTrafficChart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.liveTrafficChart, fieldNumber: 4)
    }
    if !self.aliLiveTrafficChart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.aliLiveTrafficChart, fieldNumber: 5)
    }
    if !self.subTrafficChart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subTrafficChart, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetSchoolLiveTrafficChartResponse, rhs: GloryApi_GetSchoolLiveTrafficChartResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.totalTraffic != rhs.totalTraffic {return false}
    if lhs.aliTotalTraffic != rhs.aliTotalTraffic {return false}
    if lhs.liveTrafficChart != rhs.liveTrafficChart {return false}
    if lhs.aliLiveTrafficChart != rhs.aliLiveTrafficChart {return false}
    if lhs.subTrafficChart != rhs.subTrafficChart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetAllLiveTrafficRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAllLiveTrafficRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetAllLiveTrafficRequest, rhs: GloryApi_GetAllLiveTrafficRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetAllLiveTrafficResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAllLiveTrafficResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "total_traffic"),
    3: .standard(proto: "ali_total_traffic"),
    4: .standard(proto: "total_cost"),
    5: .standard(proto: "ali_total_cost"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalTraffic) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.aliTotalTraffic) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.totalCost) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.aliTotalCost) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.totalTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.totalTraffic, fieldNumber: 2)
    }
    if self.aliTotalTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.aliTotalTraffic, fieldNumber: 3)
    }
    if self.totalCost != 0 {
      try visitor.visitSingularInt64Field(value: self.totalCost, fieldNumber: 4)
    }
    if self.aliTotalCost != 0 {
      try visitor.visitSingularInt64Field(value: self.aliTotalCost, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetAllLiveTrafficResponse, rhs: GloryApi_GetAllLiveTrafficResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.totalTraffic != rhs.totalTraffic {return false}
    if lhs.aliTotalTraffic != rhs.aliTotalTraffic {return false}
    if lhs.totalCost != rhs.totalCost {return false}
    if lhs.aliTotalCost != rhs.aliTotalCost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetSchooLiveTrafficRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSchooLiveTrafficRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "tenant_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetSchooLiveTrafficRequest, rhs: GloryApi_GetSchooLiveTrafficRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetSchooLiveTrafficResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSchooLiveTrafficResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "total_traffic"),
    3: .standard(proto: "used_traffic"),
    4: .standard(proto: "average_day_traffic"),
    5: .standard(proto: "maybe_use_day"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalTraffic) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.usedTraffic) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.averageDayTraffic) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.maybeUseDay) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.totalTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.totalTraffic, fieldNumber: 2)
    }
    if self.usedTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.usedTraffic, fieldNumber: 3)
    }
    if self.averageDayTraffic != 0 {
      try visitor.visitSingularInt64Field(value: self.averageDayTraffic, fieldNumber: 4)
    }
    if self.maybeUseDay != 0 {
      try visitor.visitSingularInt64Field(value: self.maybeUseDay, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetSchooLiveTrafficResponse, rhs: GloryApi_GetSchooLiveTrafficResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.totalTraffic != rhs.totalTraffic {return false}
    if lhs.usedTraffic != rhs.usedTraffic {return false}
    if lhs.averageDayTraffic != rhs.averageDayTraffic {return false}
    if lhs.maybeUseDay != rhs.maybeUseDay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListTenantLiveTrafficConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListTenantLiveTrafficConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListTenantLiveTrafficConfigRequest, rhs: GloryApi_ListTenantLiveTrafficConfigRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TenantTrafficConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TenantTrafficConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tenant_id"),
    2: .standard(proto: "tenant_name"),
    3: .standard(proto: "live_duration_limit"),
    4: .standard(proto: "traffic_day_limit"),
    5: .standard(proto: "traffic_all_count"),
    6: .standard(proto: "traffic_used_warning_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenantName) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.liveDurationLimit) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.trafficDayLimit) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.trafficAllCount) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.trafficUsedWarningCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 1)
    }
    if !self.tenantName.isEmpty {
      try visitor.visitSingularStringField(value: self.tenantName, fieldNumber: 2)
    }
    if self.liveDurationLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.liveDurationLimit, fieldNumber: 3)
    }
    if self.trafficDayLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.trafficDayLimit, fieldNumber: 4)
    }
    if self.trafficAllCount != 0 {
      try visitor.visitSingularInt64Field(value: self.trafficAllCount, fieldNumber: 5)
    }
    if self.trafficUsedWarningCount != 0 {
      try visitor.visitSingularInt64Field(value: self.trafficUsedWarningCount, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TenantTrafficConfig, rhs: GloryApi_TenantTrafficConfig) -> Bool {
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.tenantName != rhs.tenantName {return false}
    if lhs.liveDurationLimit != rhs.liveDurationLimit {return false}
    if lhs.trafficDayLimit != rhs.trafficDayLimit {return false}
    if lhs.trafficAllCount != rhs.trafficAllCount {return false}
    if lhs.trafficUsedWarningCount != rhs.trafficUsedWarningCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListTenantLiveTrafficConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListTenantLiveTrafficConfigResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "tenant_traffic_config_list"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.tenantTrafficConfigList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.tenantTrafficConfigList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tenantTrafficConfigList, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListTenantLiveTrafficConfigResponse, rhs: GloryApi_ListTenantLiveTrafficConfigResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.tenantTrafficConfigList != rhs.tenantTrafficConfigList {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateTenantLiveTrafficConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateTenantLiveTrafficConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "tenant_id"),
    3: .standard(proto: "live_duration_limit"),
    4: .standard(proto: "traffic_day_limit"),
    5: .standard(proto: "traffic_all_count"),
    6: .standard(proto: "traffic_used_warning_count"),
    7: .standard(proto: "day_traffic_limit_percent"),
    8: .standard(proto: "all_traffic_limit_percent"),
    9: .standard(proto: "max_living_limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.liveDurationLimit) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.trafficDayLimit) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.trafficAllCount) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.trafficUsedWarningCount) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.dayTrafficLimitPercent) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.allTrafficLimitPercent) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.maxLivingLimit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 2)
    }
    if self.liveDurationLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.liveDurationLimit, fieldNumber: 3)
    }
    if self.trafficDayLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.trafficDayLimit, fieldNumber: 4)
    }
    if self.trafficAllCount != 0 {
      try visitor.visitSingularInt64Field(value: self.trafficAllCount, fieldNumber: 5)
    }
    if self.trafficUsedWarningCount != 0 {
      try visitor.visitSingularInt64Field(value: self.trafficUsedWarningCount, fieldNumber: 6)
    }
    if self.dayTrafficLimitPercent != 0 {
      try visitor.visitSingularInt64Field(value: self.dayTrafficLimitPercent, fieldNumber: 7)
    }
    if self.allTrafficLimitPercent != 0 {
      try visitor.visitSingularInt64Field(value: self.allTrafficLimitPercent, fieldNumber: 8)
    }
    if self.maxLivingLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.maxLivingLimit, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateTenantLiveTrafficConfigRequest, rhs: GloryApi_UpdateTenantLiveTrafficConfigRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.liveDurationLimit != rhs.liveDurationLimit {return false}
    if lhs.trafficDayLimit != rhs.trafficDayLimit {return false}
    if lhs.trafficAllCount != rhs.trafficAllCount {return false}
    if lhs.trafficUsedWarningCount != rhs.trafficUsedWarningCount {return false}
    if lhs.dayTrafficLimitPercent != rhs.dayTrafficLimitPercent {return false}
    if lhs.allTrafficLimitPercent != rhs.allTrafficLimitPercent {return false}
    if lhs.maxLivingLimit != rhs.maxLivingLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateTenantLiveTrafficConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateTenantLiveTrafficConfigResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateTenantLiveTrafficConfigResponse, rhs: GloryApi_UpdateTenantLiveTrafficConfigResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListTrafficWarningRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListTrafficWarningRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "warning_type"),
    3: .standard(proto: "tenant_id"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.warningType) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.warningType != 0 {
      try visitor.visitSingularInt64Field(value: self.warningType, fieldNumber: 2)
    }
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 3)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListTrafficWarningRequest, rhs: GloryApi_ListTrafficWarningRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.warningType != rhs.warningType {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TrafficWarning: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrafficWarning"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "traffic_warning_id"),
    2: .standard(proto: "tenant_id"),
    3: .standard(proto: "tenant_name"),
    4: .standard(proto: "warning_type"),
    5: .standard(proto: "warning_content"),
    6: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.trafficWarningID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.tenantID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tenantName) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.warningType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.warningContent) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trafficWarningID != 0 {
      try visitor.visitSingularInt64Field(value: self.trafficWarningID, fieldNumber: 1)
    }
    if self.tenantID != 0 {
      try visitor.visitSingularInt64Field(value: self.tenantID, fieldNumber: 2)
    }
    if !self.tenantName.isEmpty {
      try visitor.visitSingularStringField(value: self.tenantName, fieldNumber: 3)
    }
    if self.warningType != 0 {
      try visitor.visitSingularInt64Field(value: self.warningType, fieldNumber: 4)
    }
    if !self.warningContent.isEmpty {
      try visitor.visitSingularStringField(value: self.warningContent, fieldNumber: 5)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TrafficWarning, rhs: GloryApi_TrafficWarning) -> Bool {
    if lhs.trafficWarningID != rhs.trafficWarningID {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.tenantName != rhs.tenantName {return false}
    if lhs.warningType != rhs.warningType {return false}
    if lhs.warningContent != rhs.warningContent {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListTrafficWarningResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListTrafficWarningResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "traffic_warning_list"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.trafficWarningList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.trafficWarningList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trafficWarningList, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListTrafficWarningResponse, rhs: GloryApi_ListTrafficWarningResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.trafficWarningList != rhs.trafficWarningList {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteTrafficWarningRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteTrafficWarningRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "traffic_warning_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.trafficWarningID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.trafficWarningID != 0 {
      try visitor.visitSingularInt64Field(value: self.trafficWarningID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteTrafficWarningRequest, rhs: GloryApi_DeleteTrafficWarningRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.trafficWarningID != rhs.trafficWarningID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteTrafficWarningResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteTrafficWarningResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteTrafficWarningResponse, rhs: GloryApi_DeleteTrafficWarningResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
