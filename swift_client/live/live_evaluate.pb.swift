// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: live/live_evaluate.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// NOTE: class 改为 clas 为了和java的class关键字不冲突
struct GloryApi_GetEvaluateSelectorRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetEvaluateSelectorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var major: [String] = []

  var clas: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_EvaluateRoom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: Int64 = 0

  var roomTitle: String = String()

  var roomURL: String = String()

  var score: Double = 0

  var duration: Double = 0

  var like: Int64 = 0

  var order: Int64 = 0

  var aiFeedback: String = String()

  var evaluatedTime: String = String()

  var evaluatedType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_EvaluateData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var averageScore: Double = 0

  var totalDuration: Double = 0

  var totalLike: Int64 = 0

  var totalOrder: Int64 = 0

  var evaluateList: [GloryApi_EvaluateRoom] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListPersonalEvaluateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var userID: Int64 = 0

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListPersonalEvaluateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var evaluateData: GloryApi_EvaluateData {
    get {return _evaluateData ?? GloryApi_EvaluateData()}
    set {_evaluateData = newValue}
  }
  /// Returns true if `evaluateData` has been explicitly set.
  var hasEvaluateData: Bool {return self._evaluateData != nil}
  /// Clears the value of `evaluateData`. Subsequent reads from it will return its default value.
  mutating func clearEvaluateData() {self._evaluateData = nil}

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _evaluateData: GloryApi_EvaluateData? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_EvaluateSubOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var total: Double = 0

  var content: String = String()

  var score: String = String()

  var nameKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_EvaluateDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var option: String = String()

  var total: Double = 0

  var score: String = String()

  var isExpand: Bool = false

  var suboption: [GloryApi_EvaluateSubOption] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ProductProfession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productName: String = String()

  var productClass: String = String()

  var productAttributed: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_Feedback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enjoyment: String = String()

  var logic: String = String()

  var innovative: String = String()

  var productProfession: [GloryApi_ProductProfession] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_AiResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var liveAiFeedbackID: Int64 = 0

  var roomID: Int64 = 0

  var feedback: GloryApi_Feedback {
    get {return _feedback ?? GloryApi_Feedback()}
    set {_feedback = newValue}
  }
  /// Returns true if `feedback` has been explicitly set.
  var hasFeedback: Bool {return self._feedback != nil}
  /// Clears the value of `feedback`. Subsequent reads from it will return its default value.
  mutating func clearFeedback() {self._feedback = nil}

  var userAttitude: String = String()

  var createdAt: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _feedback: GloryApi_Feedback? = nil
}

struct GloryApi_GetEvaluateDetailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var roomID: Int64 = 0

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_GetEvaluateDetailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _storage._baseResp ?? Base_BaseResponse()}
    set {_uniqueStorage()._baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return _storage._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {_uniqueStorage()._baseResp = nil}

  /// temp：暂存 submit: 提交  template：仅模版数据
  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var evaluateID: Int64 {
    get {return _storage._evaluateID}
    set {_uniqueStorage()._evaluateID = newValue}
  }

  var templateID: Int64 {
    get {return _storage._templateID}
    set {_uniqueStorage()._templateID = newValue}
  }

  var userID: Int64 {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var extraScore: Double {
    get {return _storage._extraScore}
    set {_uniqueStorage()._extraScore = newValue}
  }

  var extraComment: String {
    get {return _storage._extraComment}
    set {_uniqueStorage()._extraComment = newValue}
  }

  var zeroComment: String {
    get {return _storage._zeroComment}
    set {_uniqueStorage()._zeroComment = newValue}
  }

  var score: Double {
    get {return _storage._score}
    set {_uniqueStorage()._score = newValue}
  }

  var aiFeedback: String {
    get {return _storage._aiFeedback}
    set {_uniqueStorage()._aiFeedback = newValue}
  }

  var baseline: Bool {
    get {return _storage._baseline}
    set {_uniqueStorage()._baseline = newValue}
  }

  var aiFeedbackID: Int64 {
    get {return _storage._aiFeedbackID}
    set {_uniqueStorage()._aiFeedbackID = newValue}
  }

  var createdUser: String {
    get {return _storage._createdUser}
    set {_uniqueStorage()._createdUser = newValue}
  }

  var anchor: String {
    get {return _storage._anchor}
    set {_uniqueStorage()._anchor = newValue}
  }

  var liveStartTime: Int64 {
    get {return _storage._liveStartTime}
    set {_uniqueStorage()._liveStartTime = newValue}
  }

  var liveEndTime: Int64 {
    get {return _storage._liveEndTime}
    set {_uniqueStorage()._liveEndTime = newValue}
  }

  var isUseAi: Bool {
    get {return _storage._isUseAi}
    set {_uniqueStorage()._isUseAi = newValue}
  }

  var aiResult: [GloryApi_AiResult] {
    get {return _storage._aiResult}
    set {_uniqueStorage()._aiResult = newValue}
  }

  var detail: [GloryApi_EvaluateDetail] {
    get {return _storage._detail}
    set {_uniqueStorage()._detail = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_SubmitEvaluateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  /// temp：暂存 submit: 提交 
  var type: String = String()

  var evaluateID: Int64 = 0

  /// 从暂存提交的需要传该值，否则0即可
  var templateID: Int64 = 0

  var userID: Int64 = 0

  var roomID: Int64 = 0

  var extraScore: Double = 0

  var extraComment: String = String()

  var zeroComment: String = String()

  var score: Double = 0

  var aiFeedback: String = String()

  var baseline: Bool = false

  var aiFeedbackID: Int64 = 0

  var detail: [GloryApi_EvaluateDetail] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_SubmitEvaluateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_SubmitUserAttitudeForAIResultRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var liveAiFeedbackID: Int64 = 0

  var attitude: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_SubmitUserAttitudeForAIResultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_UnevaluatedRoom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: Int64 = 0

  var roomTitle: String = String()

  var roomURL: String = String()

  var shopName: String = String()

  var userID: Int64 = 0

  var userName: String = String()

  var status: String = String()

  var isUseAi: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListUnevaluatedRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var shopOrUserName: String = String()

  /// 0:全部 1:进行中 2:已结束
  var roomStatus: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListUnevaluatedRoomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var livingTotal: Int64 = 0

  var unevaluatedRoom: [GloryApi_UnevaluatedRoom] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_UserLiveData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: Int64 = 0

  var userName: String = String()

  var major: String = String()

  var clas: String = String()

  var totalDuration: Double = 0

  var totalLike: Int64 = 0

  var totalOrder: Int64 = 0

  var averageScore: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListStudentEvalutionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var name: String = String()

  var major: String = String()

  var clas: String = String()

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListStudentEvalutionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var liveData: [GloryApi_UserLiveData] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_IgnoreLiveEvaluationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var roomID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_IgnoreLiveEvaluationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_RegenerationAiFeedbackRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var roomID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_RegenerationAiFeedbackResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_LiveRankDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userName: String = String()

  var tenant: String = String()

  var major: String = String()

  var clas: String = String()

  var liveDuration: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_LiveRankMine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userName: String = String()

  var tenant: String = String()

  var major: String = String()

  var clas: String = String()

  var liveDuration: Int64 = 0

  var rank: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_LiveRank {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rankList: [GloryApi_LiveRankDetail] = []

  var mine: GloryApi_LiveRankMine {
    get {return _mine ?? GloryApi_LiveRankMine()}
    set {_mine = newValue}
  }
  /// Returns true if `mine` has been explicitly set.
  var hasMine: Bool {return self._mine != nil}
  /// Clears the value of `mine`. Subsequent reads from it will return its default value.
  mutating func clearMine() {self._mine = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mine: GloryApi_LiveRankMine? = nil
}

struct GloryApi_ShopRankDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shopName: String = String()

  var shopURL: String = String()

  var saleAmount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShopRankMine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shopName: String = String()

  var shopURL: String = String()

  var saleAmount: Int64 = 0

  var rank: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ShopRank {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rankList: [GloryApi_ShopRankDetail] = []

  var mine: GloryApi_ShopRankMine {
    get {return _mine ?? GloryApi_ShopRankMine()}
    set {_mine = newValue}
  }
  /// Returns true if `mine` has been explicitly set.
  var hasMine: Bool {return self._mine != nil}
  /// Clears the value of `mine`. Subsequent reads from it will return its default value.
  mutating func clearMine() {self._mine = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mine: GloryApi_ShopRankMine? = nil
}

struct GloryApi_ProductRankDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productName: String = String()

  var productURL: String = String()

  var shopName: String = String()

  var shopURL: String = String()

  var saleAmount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ProductRankMine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productName: String = String()

  var productURL: String = String()

  var shopName: String = String()

  var shopURL: String = String()

  var saleAmount: Int64 = 0

  var rank: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ProductRank {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rankList: [GloryApi_ProductRankDetail] = []

  var mine: GloryApi_ProductRankMine {
    get {return _mine ?? GloryApi_ProductRankMine()}
    set {_mine = newValue}
  }
  /// Returns true if `mine` has been explicitly set.
  var hasMine: Bool {return self._mine != nil}
  /// Clears the value of `mine`. Subsequent reads from it will return its default value.
  mutating func clearMine() {self._mine = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mine: GloryApi_ProductRankMine? = nil
}

struct GloryApi_LiveLikeRankDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userName: String = String()

  var tenant: String = String()

  var major: String = String()

  var clas: String = String()

  var likeAmount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_LiveLikeRankMine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userName: String = String()

  var tenant: String = String()

  var major: String = String()

  var clas: String = String()

  var likeAmount: Int64 = 0

  var rank: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_LiveLikeRank {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rankList: [GloryApi_LiveLikeRankDetail] = []

  var mine: GloryApi_LiveLikeRankMine {
    get {return _mine ?? GloryApi_LiveLikeRankMine()}
    set {_mine = newValue}
  }
  /// Returns true if `mine` has been explicitly set.
  var hasMine: Bool {return self._mine != nil}
  /// Clears the value of `mine`. Subsequent reads from it will return its default value.
  mutating func clearMine() {self._mine = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mine: GloryApi_LiveLikeRankMine? = nil
}

struct GloryApi_LiveOrderRankDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userName: String = String()

  var tenant: String = String()

  var major: String = String()

  var clas: String = String()

  var orderAmount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_LiveOrderRankMine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userName: String = String()

  var tenant: String = String()

  var major: String = String()

  var clas: String = String()

  var orderAmount: Int64 = 0

  var rank: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_LiveOrderRank {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rankList: [GloryApi_LiveOrderRankDetail] = []

  var mine: GloryApi_LiveOrderRankMine {
    get {return _mine ?? GloryApi_LiveOrderRankMine()}
    set {_mine = newValue}
  }
  /// Returns true if `mine` has been explicitly set.
  var hasMine: Bool {return self._mine != nil}
  /// Clears the value of `mine`. Subsequent reads from it will return its default value.
  mutating func clearMine() {self._mine = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mine: GloryApi_LiveOrderRankMine? = nil
}

struct GloryApi_LiveEvaluationRankDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userName: String = String()

  var tenant: String = String()

  var major: String = String()

  var clas: String = String()

  var score: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_LiveEvaluationRankMine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userName: String = String()

  var tenant: String = String()

  var major: String = String()

  var clas: String = String()

  var score: Double = 0

  var rank: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_LiveEvaluationRank {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rankList: [GloryApi_LiveEvaluationRankDetail] = []

  var mine: GloryApi_LiveEvaluationRankMine {
    get {return _mine ?? GloryApi_LiveEvaluationRankMine()}
    set {_mine = newValue}
  }
  /// Returns true if `mine` has been explicitly set.
  var hasMine: Bool {return self._mine != nil}
  /// Clears the value of `mine`. Subsequent reads from it will return its default value.
  mutating func clearMine() {self._mine = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mine: GloryApi_LiveEvaluationRankMine? = nil
}

struct GloryApi_GetRankRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var category: String = String()

  var type: String = String()

  var start: Int64 = 0

  var end: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetRankResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _storage._baseResp ?? Base_BaseResponse()}
    set {_uniqueStorage()._baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return _storage._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {_uniqueStorage()._baseResp = nil}

  var live: GloryApi_LiveRank {
    get {return _storage._live ?? GloryApi_LiveRank()}
    set {_uniqueStorage()._live = newValue}
  }
  /// Returns true if `live` has been explicitly set.
  var hasLive: Bool {return _storage._live != nil}
  /// Clears the value of `live`. Subsequent reads from it will return its default value.
  mutating func clearLive() {_uniqueStorage()._live = nil}

  var shop: GloryApi_ShopRank {
    get {return _storage._shop ?? GloryApi_ShopRank()}
    set {_uniqueStorage()._shop = newValue}
  }
  /// Returns true if `shop` has been explicitly set.
  var hasShop: Bool {return _storage._shop != nil}
  /// Clears the value of `shop`. Subsequent reads from it will return its default value.
  mutating func clearShop() {_uniqueStorage()._shop = nil}

  var product: GloryApi_ProductRank {
    get {return _storage._product ?? GloryApi_ProductRank()}
    set {_uniqueStorage()._product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  var hasProduct: Bool {return _storage._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  mutating func clearProduct() {_uniqueStorage()._product = nil}

  var liveLike: GloryApi_LiveLikeRank {
    get {return _storage._liveLike ?? GloryApi_LiveLikeRank()}
    set {_uniqueStorage()._liveLike = newValue}
  }
  /// Returns true if `liveLike` has been explicitly set.
  var hasLiveLike: Bool {return _storage._liveLike != nil}
  /// Clears the value of `liveLike`. Subsequent reads from it will return its default value.
  mutating func clearLiveLike() {_uniqueStorage()._liveLike = nil}

  var liveOrder: GloryApi_LiveOrderRank {
    get {return _storage._liveOrder ?? GloryApi_LiveOrderRank()}
    set {_uniqueStorage()._liveOrder = newValue}
  }
  /// Returns true if `liveOrder` has been explicitly set.
  var hasLiveOrder: Bool {return _storage._liveOrder != nil}
  /// Clears the value of `liveOrder`. Subsequent reads from it will return its default value.
  mutating func clearLiveOrder() {_uniqueStorage()._liveOrder = nil}

  var liveEvaluation: GloryApi_LiveEvaluationRank {
    get {return _storage._liveEvaluation ?? GloryApi_LiveEvaluationRank()}
    set {_uniqueStorage()._liveEvaluation = newValue}
  }
  /// Returns true if `liveEvaluation` has been explicitly set.
  var hasLiveEvaluation: Bool {return _storage._liveEvaluation != nil}
  /// Clears the value of `liveEvaluation`. Subsequent reads from it will return its default value.
  mutating func clearLiveEvaluation() {_uniqueStorage()._liveEvaluation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_GetEvaluateSelectorRequest: @unchecked Sendable {}
extension GloryApi_GetEvaluateSelectorResponse: @unchecked Sendable {}
extension GloryApi_EvaluateRoom: @unchecked Sendable {}
extension GloryApi_EvaluateData: @unchecked Sendable {}
extension GloryApi_ListPersonalEvaluateRequest: @unchecked Sendable {}
extension GloryApi_ListPersonalEvaluateResponse: @unchecked Sendable {}
extension GloryApi_EvaluateSubOption: @unchecked Sendable {}
extension GloryApi_EvaluateDetail: @unchecked Sendable {}
extension GloryApi_ProductProfession: @unchecked Sendable {}
extension GloryApi_Feedback: @unchecked Sendable {}
extension GloryApi_AiResult: @unchecked Sendable {}
extension GloryApi_GetEvaluateDetailRequest: @unchecked Sendable {}
extension GloryApi_GetEvaluateDetailResponse: @unchecked Sendable {}
extension GloryApi_SubmitEvaluateRequest: @unchecked Sendable {}
extension GloryApi_SubmitEvaluateResponse: @unchecked Sendable {}
extension GloryApi_SubmitUserAttitudeForAIResultRequest: @unchecked Sendable {}
extension GloryApi_SubmitUserAttitudeForAIResultResponse: @unchecked Sendable {}
extension GloryApi_UnevaluatedRoom: @unchecked Sendable {}
extension GloryApi_ListUnevaluatedRoomRequest: @unchecked Sendable {}
extension GloryApi_ListUnevaluatedRoomResponse: @unchecked Sendable {}
extension GloryApi_UserLiveData: @unchecked Sendable {}
extension GloryApi_ListStudentEvalutionsRequest: @unchecked Sendable {}
extension GloryApi_ListStudentEvalutionsResponse: @unchecked Sendable {}
extension GloryApi_IgnoreLiveEvaluationRequest: @unchecked Sendable {}
extension GloryApi_IgnoreLiveEvaluationResponse: @unchecked Sendable {}
extension GloryApi_RegenerationAiFeedbackRequest: @unchecked Sendable {}
extension GloryApi_RegenerationAiFeedbackResponse: @unchecked Sendable {}
extension GloryApi_LiveRankDetail: @unchecked Sendable {}
extension GloryApi_LiveRankMine: @unchecked Sendable {}
extension GloryApi_LiveRank: @unchecked Sendable {}
extension GloryApi_ShopRankDetail: @unchecked Sendable {}
extension GloryApi_ShopRankMine: @unchecked Sendable {}
extension GloryApi_ShopRank: @unchecked Sendable {}
extension GloryApi_ProductRankDetail: @unchecked Sendable {}
extension GloryApi_ProductRankMine: @unchecked Sendable {}
extension GloryApi_ProductRank: @unchecked Sendable {}
extension GloryApi_LiveLikeRankDetail: @unchecked Sendable {}
extension GloryApi_LiveLikeRankMine: @unchecked Sendable {}
extension GloryApi_LiveLikeRank: @unchecked Sendable {}
extension GloryApi_LiveOrderRankDetail: @unchecked Sendable {}
extension GloryApi_LiveOrderRankMine: @unchecked Sendable {}
extension GloryApi_LiveOrderRank: @unchecked Sendable {}
extension GloryApi_LiveEvaluationRankDetail: @unchecked Sendable {}
extension GloryApi_LiveEvaluationRankMine: @unchecked Sendable {}
extension GloryApi_LiveEvaluationRank: @unchecked Sendable {}
extension GloryApi_GetRankRequest: @unchecked Sendable {}
extension GloryApi_GetRankResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_GetEvaluateSelectorRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEvaluateSelectorRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetEvaluateSelectorRequest, rhs: GloryApi_GetEvaluateSelectorRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetEvaluateSelectorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEvaluateSelectorResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .same(proto: "major"),
    100: .same(proto: "clas"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.major) }()
      case 100: try { try decoder.decodeRepeatedStringField(value: &self.clas) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.major.isEmpty {
      try visitor.visitRepeatedStringField(value: self.major, fieldNumber: 2)
    }
    if !self.clas.isEmpty {
      try visitor.visitRepeatedStringField(value: self.clas, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetEvaluateSelectorResponse, rhs: GloryApi_GetEvaluateSelectorResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_EvaluateRoom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateRoom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_id"),
    2: .standard(proto: "room_title"),
    3: .standard(proto: "room_url"),
    4: .same(proto: "score"),
    5: .same(proto: "duration"),
    6: .same(proto: "like"),
    7: .same(proto: "order"),
    8: .standard(proto: "ai_feedback"),
    9: .standard(proto: "evaluated_time"),
    10: .standard(proto: "evaluated_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.roomTitle) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.roomURL) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.score) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.duration) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.like) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.order) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.aiFeedback) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.evaluatedTime) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.evaluatedType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 1)
    }
    if !self.roomTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.roomTitle, fieldNumber: 2)
    }
    if !self.roomURL.isEmpty {
      try visitor.visitSingularStringField(value: self.roomURL, fieldNumber: 3)
    }
    if self.score != 0 {
      try visitor.visitSingularDoubleField(value: self.score, fieldNumber: 4)
    }
    if self.duration != 0 {
      try visitor.visitSingularDoubleField(value: self.duration, fieldNumber: 5)
    }
    if self.like != 0 {
      try visitor.visitSingularInt64Field(value: self.like, fieldNumber: 6)
    }
    if self.order != 0 {
      try visitor.visitSingularInt64Field(value: self.order, fieldNumber: 7)
    }
    if !self.aiFeedback.isEmpty {
      try visitor.visitSingularStringField(value: self.aiFeedback, fieldNumber: 8)
    }
    if !self.evaluatedTime.isEmpty {
      try visitor.visitSingularStringField(value: self.evaluatedTime, fieldNumber: 9)
    }
    if !self.evaluatedType.isEmpty {
      try visitor.visitSingularStringField(value: self.evaluatedType, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_EvaluateRoom, rhs: GloryApi_EvaluateRoom) -> Bool {
    if lhs.roomID != rhs.roomID {return false}
    if lhs.roomTitle != rhs.roomTitle {return false}
    if lhs.roomURL != rhs.roomURL {return false}
    if lhs.score != rhs.score {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.like != rhs.like {return false}
    if lhs.order != rhs.order {return false}
    if lhs.aiFeedback != rhs.aiFeedback {return false}
    if lhs.evaluatedTime != rhs.evaluatedTime {return false}
    if lhs.evaluatedType != rhs.evaluatedType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_EvaluateData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "average_score"),
    2: .standard(proto: "total_duration"),
    3: .standard(proto: "total_like"),
    4: .standard(proto: "total_order"),
    5: .standard(proto: "evaluate_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.averageScore) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.totalDuration) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.totalLike) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.totalOrder) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.evaluateList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.averageScore != 0 {
      try visitor.visitSingularDoubleField(value: self.averageScore, fieldNumber: 1)
    }
    if self.totalDuration != 0 {
      try visitor.visitSingularDoubleField(value: self.totalDuration, fieldNumber: 2)
    }
    if self.totalLike != 0 {
      try visitor.visitSingularInt64Field(value: self.totalLike, fieldNumber: 3)
    }
    if self.totalOrder != 0 {
      try visitor.visitSingularInt64Field(value: self.totalOrder, fieldNumber: 4)
    }
    if !self.evaluateList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.evaluateList, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_EvaluateData, rhs: GloryApi_EvaluateData) -> Bool {
    if lhs.averageScore != rhs.averageScore {return false}
    if lhs.totalDuration != rhs.totalDuration {return false}
    if lhs.totalLike != rhs.totalLike {return false}
    if lhs.totalOrder != rhs.totalOrder {return false}
    if lhs.evaluateList != rhs.evaluateList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListPersonalEvaluateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListPersonalEvaluateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "user_id"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListPersonalEvaluateRequest, rhs: GloryApi_ListPersonalEvaluateRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListPersonalEvaluateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListPersonalEvaluateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "evaluate_data"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._evaluateData) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._evaluateData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListPersonalEvaluateResponse, rhs: GloryApi_ListPersonalEvaluateResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._evaluateData != rhs._evaluateData {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_EvaluateSubOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateSubOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "total"),
    3: .same(proto: "content"),
    4: .same(proto: "score"),
    5: .standard(proto: "name_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.total) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.score) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.nameKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularDoubleField(value: self.total, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
    }
    if !self.score.isEmpty {
      try visitor.visitSingularStringField(value: self.score, fieldNumber: 4)
    }
    if !self.nameKey.isEmpty {
      try visitor.visitSingularStringField(value: self.nameKey, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_EvaluateSubOption, rhs: GloryApi_EvaluateSubOption) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.total != rhs.total {return false}
    if lhs.content != rhs.content {return false}
    if lhs.score != rhs.score {return false}
    if lhs.nameKey != rhs.nameKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_EvaluateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "option"),
    2: .same(proto: "total"),
    3: .same(proto: "score"),
    4: .standard(proto: "is_expand"),
    5: .same(proto: "suboption"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.option) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.total) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.score) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isExpand) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.suboption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.option.isEmpty {
      try visitor.visitSingularStringField(value: self.option, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularDoubleField(value: self.total, fieldNumber: 2)
    }
    if !self.score.isEmpty {
      try visitor.visitSingularStringField(value: self.score, fieldNumber: 3)
    }
    if self.isExpand != false {
      try visitor.visitSingularBoolField(value: self.isExpand, fieldNumber: 4)
    }
    if !self.suboption.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.suboption, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_EvaluateDetail, rhs: GloryApi_EvaluateDetail) -> Bool {
    if lhs.option != rhs.option {return false}
    if lhs.total != rhs.total {return false}
    if lhs.score != rhs.score {return false}
    if lhs.isExpand != rhs.isExpand {return false}
    if lhs.suboption != rhs.suboption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ProductProfession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductProfession"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_name"),
    2: .standard(proto: "product_class"),
    3: .standard(proto: "product_attributed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productClass) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.productAttributed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productName.isEmpty {
      try visitor.visitSingularStringField(value: self.productName, fieldNumber: 1)
    }
    if !self.productClass.isEmpty {
      try visitor.visitSingularStringField(value: self.productClass, fieldNumber: 2)
    }
    if !self.productAttributed.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.productAttributed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ProductProfession, rhs: GloryApi_ProductProfession) -> Bool {
    if lhs.productName != rhs.productName {return false}
    if lhs.productClass != rhs.productClass {return false}
    if lhs.productAttributed != rhs.productAttributed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_Feedback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Feedback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enjoyment"),
    2: .same(proto: "logic"),
    3: .same(proto: "innovative"),
    4: .standard(proto: "product_profession"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.enjoyment) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.logic) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.innovative) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.productProfession) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.enjoyment.isEmpty {
      try visitor.visitSingularStringField(value: self.enjoyment, fieldNumber: 1)
    }
    if !self.logic.isEmpty {
      try visitor.visitSingularStringField(value: self.logic, fieldNumber: 2)
    }
    if !self.innovative.isEmpty {
      try visitor.visitSingularStringField(value: self.innovative, fieldNumber: 3)
    }
    if !self.productProfession.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productProfession, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_Feedback, rhs: GloryApi_Feedback) -> Bool {
    if lhs.enjoyment != rhs.enjoyment {return false}
    if lhs.logic != rhs.logic {return false}
    if lhs.innovative != rhs.innovative {return false}
    if lhs.productProfession != rhs.productProfession {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_AiResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AiResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "live_ai_feedback_id"),
    2: .standard(proto: "room_id"),
    3: .same(proto: "feedback"),
    4: .standard(proto: "user_attitude"),
    5: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.liveAiFeedbackID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._feedback) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.userAttitude) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.liveAiFeedbackID != 0 {
      try visitor.visitSingularInt64Field(value: self.liveAiFeedbackID, fieldNumber: 1)
    }
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 2)
    }
    try { if let v = self._feedback {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.userAttitude.isEmpty {
      try visitor.visitSingularStringField(value: self.userAttitude, fieldNumber: 4)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_AiResult, rhs: GloryApi_AiResult) -> Bool {
    if lhs.liveAiFeedbackID != rhs.liveAiFeedbackID {return false}
    if lhs.roomID != rhs.roomID {return false}
    if lhs._feedback != rhs._feedback {return false}
    if lhs.userAttitude != rhs.userAttitude {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetEvaluateDetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEvaluateDetailRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "room_id"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetEvaluateDetailRequest, rhs: GloryApi_GetEvaluateDetailRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.roomID != rhs.roomID {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetEvaluateDetailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEvaluateDetailResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .same(proto: "type"),
    3: .standard(proto: "evaluate_id"),
    4: .standard(proto: "template_id"),
    5: .standard(proto: "user_id"),
    6: .standard(proto: "extra_score"),
    7: .standard(proto: "extra_comment"),
    8: .standard(proto: "zero_comment"),
    9: .same(proto: "score"),
    10: .standard(proto: "ai_feedback"),
    11: .same(proto: "baseline"),
    12: .standard(proto: "ai_feedback_id"),
    13: .standard(proto: "created_user"),
    14: .same(proto: "anchor"),
    15: .standard(proto: "live_start_time"),
    16: .standard(proto: "live_end_time"),
    17: .standard(proto: "is_use_ai"),
    18: .standard(proto: "ai_result"),
    100: .same(proto: "detail"),
  ]

  fileprivate class _StorageClass {
    var _baseResp: Base_BaseResponse? = nil
    var _type: String = String()
    var _evaluateID: Int64 = 0
    var _templateID: Int64 = 0
    var _userID: Int64 = 0
    var _extraScore: Double = 0
    var _extraComment: String = String()
    var _zeroComment: String = String()
    var _score: Double = 0
    var _aiFeedback: String = String()
    var _baseline: Bool = false
    var _aiFeedbackID: Int64 = 0
    var _createdUser: String = String()
    var _anchor: String = String()
    var _liveStartTime: Int64 = 0
    var _liveEndTime: Int64 = 0
    var _isUseAi: Bool = false
    var _aiResult: [GloryApi_AiResult] = []
    var _detail: [GloryApi_EvaluateDetail] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseResp = source._baseResp
      _type = source._type
      _evaluateID = source._evaluateID
      _templateID = source._templateID
      _userID = source._userID
      _extraScore = source._extraScore
      _extraComment = source._extraComment
      _zeroComment = source._zeroComment
      _score = source._score
      _aiFeedback = source._aiFeedback
      _baseline = source._baseline
      _aiFeedbackID = source._aiFeedbackID
      _createdUser = source._createdUser
      _anchor = source._anchor
      _liveStartTime = source._liveStartTime
      _liveEndTime = source._liveEndTime
      _isUseAi = source._isUseAi
      _aiResult = source._aiResult
      _detail = source._detail
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._baseResp) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._evaluateID) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._templateID) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._userID) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._extraScore) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._extraComment) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._zeroComment) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._score) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._aiFeedback) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._baseline) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._aiFeedbackID) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._createdUser) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._anchor) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._liveStartTime) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._liveEndTime) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._isUseAi) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._aiResult) }()
        case 100: try { try decoder.decodeRepeatedMessageField(value: &_storage._detail) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._baseResp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 2)
      }
      if _storage._evaluateID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._evaluateID, fieldNumber: 3)
      }
      if _storage._templateID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._templateID, fieldNumber: 4)
      }
      if _storage._userID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._userID, fieldNumber: 5)
      }
      if _storage._extraScore != 0 {
        try visitor.visitSingularDoubleField(value: _storage._extraScore, fieldNumber: 6)
      }
      if !_storage._extraComment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extraComment, fieldNumber: 7)
      }
      if !_storage._zeroComment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._zeroComment, fieldNumber: 8)
      }
      if _storage._score != 0 {
        try visitor.visitSingularDoubleField(value: _storage._score, fieldNumber: 9)
      }
      if !_storage._aiFeedback.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aiFeedback, fieldNumber: 10)
      }
      if _storage._baseline != false {
        try visitor.visitSingularBoolField(value: _storage._baseline, fieldNumber: 11)
      }
      if _storage._aiFeedbackID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._aiFeedbackID, fieldNumber: 12)
      }
      if !_storage._createdUser.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdUser, fieldNumber: 13)
      }
      if !_storage._anchor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._anchor, fieldNumber: 14)
      }
      if _storage._liveStartTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._liveStartTime, fieldNumber: 15)
      }
      if _storage._liveEndTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._liveEndTime, fieldNumber: 16)
      }
      if _storage._isUseAi != false {
        try visitor.visitSingularBoolField(value: _storage._isUseAi, fieldNumber: 17)
      }
      if !_storage._aiResult.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._aiResult, fieldNumber: 18)
      }
      if !_storage._detail.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._detail, fieldNumber: 100)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetEvaluateDetailResponse, rhs: GloryApi_GetEvaluateDetailResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseResp != rhs_storage._baseResp {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._evaluateID != rhs_storage._evaluateID {return false}
        if _storage._templateID != rhs_storage._templateID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._extraScore != rhs_storage._extraScore {return false}
        if _storage._extraComment != rhs_storage._extraComment {return false}
        if _storage._zeroComment != rhs_storage._zeroComment {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._aiFeedback != rhs_storage._aiFeedback {return false}
        if _storage._baseline != rhs_storage._baseline {return false}
        if _storage._aiFeedbackID != rhs_storage._aiFeedbackID {return false}
        if _storage._createdUser != rhs_storage._createdUser {return false}
        if _storage._anchor != rhs_storage._anchor {return false}
        if _storage._liveStartTime != rhs_storage._liveStartTime {return false}
        if _storage._liveEndTime != rhs_storage._liveEndTime {return false}
        if _storage._isUseAi != rhs_storage._isUseAi {return false}
        if _storage._aiResult != rhs_storage._aiResult {return false}
        if _storage._detail != rhs_storage._detail {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitEvaluateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitEvaluateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "type"),
    3: .standard(proto: "evaluate_id"),
    4: .standard(proto: "template_id"),
    5: .standard(proto: "user_id"),
    6: .standard(proto: "room_id"),
    7: .standard(proto: "extra_score"),
    8: .standard(proto: "extra_comment"),
    9: .standard(proto: "zero_comment"),
    10: .same(proto: "score"),
    11: .standard(proto: "ai_feedback"),
    12: .same(proto: "baseline"),
    13: .standard(proto: "ai_feedback_id"),
    14: .same(proto: "detail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.evaluateID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.templateID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.extraScore) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.extraComment) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.zeroComment) }()
      case 10: try { try decoder.decodeSingularDoubleField(value: &self.score) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.aiFeedback) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.baseline) }()
      case 13: try { try decoder.decodeSingularInt64Field(value: &self.aiFeedbackID) }()
      case 14: try { try decoder.decodeRepeatedMessageField(value: &self.detail) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if self.evaluateID != 0 {
      try visitor.visitSingularInt64Field(value: self.evaluateID, fieldNumber: 3)
    }
    if self.templateID != 0 {
      try visitor.visitSingularInt64Field(value: self.templateID, fieldNumber: 4)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 5)
    }
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 6)
    }
    if self.extraScore != 0 {
      try visitor.visitSingularDoubleField(value: self.extraScore, fieldNumber: 7)
    }
    if !self.extraComment.isEmpty {
      try visitor.visitSingularStringField(value: self.extraComment, fieldNumber: 8)
    }
    if !self.zeroComment.isEmpty {
      try visitor.visitSingularStringField(value: self.zeroComment, fieldNumber: 9)
    }
    if self.score != 0 {
      try visitor.visitSingularDoubleField(value: self.score, fieldNumber: 10)
    }
    if !self.aiFeedback.isEmpty {
      try visitor.visitSingularStringField(value: self.aiFeedback, fieldNumber: 11)
    }
    if self.baseline != false {
      try visitor.visitSingularBoolField(value: self.baseline, fieldNumber: 12)
    }
    if self.aiFeedbackID != 0 {
      try visitor.visitSingularInt64Field(value: self.aiFeedbackID, fieldNumber: 13)
    }
    if !self.detail.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.detail, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitEvaluateRequest, rhs: GloryApi_SubmitEvaluateRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.type != rhs.type {return false}
    if lhs.evaluateID != rhs.evaluateID {return false}
    if lhs.templateID != rhs.templateID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.roomID != rhs.roomID {return false}
    if lhs.extraScore != rhs.extraScore {return false}
    if lhs.extraComment != rhs.extraComment {return false}
    if lhs.zeroComment != rhs.zeroComment {return false}
    if lhs.score != rhs.score {return false}
    if lhs.aiFeedback != rhs.aiFeedback {return false}
    if lhs.baseline != rhs.baseline {return false}
    if lhs.aiFeedbackID != rhs.aiFeedbackID {return false}
    if lhs.detail != rhs.detail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitEvaluateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitEvaluateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitEvaluateResponse, rhs: GloryApi_SubmitEvaluateResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitUserAttitudeForAIResultRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitUserAttitudeForAIResultRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "live_ai_feedback_id"),
    3: .same(proto: "attitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.liveAiFeedbackID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.attitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.liveAiFeedbackID != 0 {
      try visitor.visitSingularInt64Field(value: self.liveAiFeedbackID, fieldNumber: 2)
    }
    if !self.attitude.isEmpty {
      try visitor.visitSingularStringField(value: self.attitude, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitUserAttitudeForAIResultRequest, rhs: GloryApi_SubmitUserAttitudeForAIResultRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.liveAiFeedbackID != rhs.liveAiFeedbackID {return false}
    if lhs.attitude != rhs.attitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitUserAttitudeForAIResultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitUserAttitudeForAIResultResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitUserAttitudeForAIResultResponse, rhs: GloryApi_SubmitUserAttitudeForAIResultResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UnevaluatedRoom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnevaluatedRoom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_id"),
    2: .standard(proto: "room_title"),
    3: .standard(proto: "room_url"),
    4: .standard(proto: "shop_name"),
    5: .standard(proto: "user_id"),
    6: .standard(proto: "user_name"),
    7: .same(proto: "status"),
    8: .standard(proto: "is_use_ai"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.roomTitle) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.roomURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isUseAi) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 1)
    }
    if !self.roomTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.roomTitle, fieldNumber: 2)
    }
    if !self.roomURL.isEmpty {
      try visitor.visitSingularStringField(value: self.roomURL, fieldNumber: 3)
    }
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 4)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 5)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 6)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 7)
    }
    if self.isUseAi != false {
      try visitor.visitSingularBoolField(value: self.isUseAi, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UnevaluatedRoom, rhs: GloryApi_UnevaluatedRoom) -> Bool {
    if lhs.roomID != rhs.roomID {return false}
    if lhs.roomTitle != rhs.roomTitle {return false}
    if lhs.roomURL != rhs.roomURL {return false}
    if lhs.shopName != rhs.shopName {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.status != rhs.status {return false}
    if lhs.isUseAi != rhs.isUseAi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListUnevaluatedRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListUnevaluatedRoomRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "pagination"),
    3: .standard(proto: "shop_or_user_name"),
    4: .standard(proto: "room_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shopOrUserName) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.roomStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.shopOrUserName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopOrUserName, fieldNumber: 3)
    }
    if self.roomStatus != 0 {
      try visitor.visitSingularInt64Field(value: self.roomStatus, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListUnevaluatedRoomRequest, rhs: GloryApi_ListUnevaluatedRoomRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.shopOrUserName != rhs.shopOrUserName {return false}
    if lhs.roomStatus != rhs.roomStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListUnevaluatedRoomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListUnevaluatedRoomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "living_total"),
    3: .standard(proto: "unevaluated_room"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.livingTotal) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.unevaluatedRoom) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.livingTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.livingTotal, fieldNumber: 2)
    }
    if !self.unevaluatedRoom.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unevaluatedRoom, fieldNumber: 3)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListUnevaluatedRoomResponse, rhs: GloryApi_ListUnevaluatedRoomResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.livingTotal != rhs.livingTotal {return false}
    if lhs.unevaluatedRoom != rhs.unevaluatedRoom {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UserLiveData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserLiveData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "user_name"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .standard(proto: "total_duration"),
    6: .standard(proto: "total_like"),
    7: .standard(proto: "total_order"),
    8: .standard(proto: "average_score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.totalDuration) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.totalLike) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.totalOrder) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self.averageScore) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.totalDuration != 0 {
      try visitor.visitSingularDoubleField(value: self.totalDuration, fieldNumber: 5)
    }
    if self.totalLike != 0 {
      try visitor.visitSingularInt64Field(value: self.totalLike, fieldNumber: 6)
    }
    if self.totalOrder != 0 {
      try visitor.visitSingularInt64Field(value: self.totalOrder, fieldNumber: 7)
    }
    if self.averageScore != 0 {
      try visitor.visitSingularDoubleField(value: self.averageScore, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UserLiveData, rhs: GloryApi_UserLiveData) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.totalDuration != rhs.totalDuration {return false}
    if lhs.totalLike != rhs.totalLike {return false}
    if lhs.totalOrder != rhs.totalOrder {return false}
    if lhs.averageScore != rhs.averageScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListStudentEvalutionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListStudentEvalutionsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "name"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListStudentEvalutionsRequest, rhs: GloryApi_ListStudentEvalutionsRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.name != rhs.name {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListStudentEvalutionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListStudentEvalutionsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "live_data"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.liveData) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.liveData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.liveData, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListStudentEvalutionsResponse, rhs: GloryApi_ListStudentEvalutionsResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.liveData != rhs.liveData {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_IgnoreLiveEvaluationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IgnoreLiveEvaluationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "room_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_IgnoreLiveEvaluationRequest, rhs: GloryApi_IgnoreLiveEvaluationRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.roomID != rhs.roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_IgnoreLiveEvaluationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IgnoreLiveEvaluationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_IgnoreLiveEvaluationResponse, rhs: GloryApi_IgnoreLiveEvaluationResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_RegenerationAiFeedbackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegenerationAiFeedbackRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "room_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.roomID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.roomID != 0 {
      try visitor.visitSingularInt64Field(value: self.roomID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_RegenerationAiFeedbackRequest, rhs: GloryApi_RegenerationAiFeedbackRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.roomID != rhs.roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_RegenerationAiFeedbackResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegenerationAiFeedbackResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_RegenerationAiFeedbackResponse, rhs: GloryApi_RegenerationAiFeedbackResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveRankDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveRankDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .same(proto: "tenant"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .standard(proto: "live_duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenant) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.liveDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.tenant.isEmpty {
      try visitor.visitSingularStringField(value: self.tenant, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.liveDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.liveDuration, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveRankDetail, rhs: GloryApi_LiveRankDetail) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.tenant != rhs.tenant {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.liveDuration != rhs.liveDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveRankMine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveRankMine"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .same(proto: "tenant"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .standard(proto: "live_duration"),
    6: .same(proto: "rank"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenant) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.liveDuration) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.rank) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.tenant.isEmpty {
      try visitor.visitSingularStringField(value: self.tenant, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.liveDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.liveDuration, fieldNumber: 5)
    }
    if self.rank != 0 {
      try visitor.visitSingularInt64Field(value: self.rank, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveRankMine, rhs: GloryApi_LiveRankMine) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.tenant != rhs.tenant {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.liveDuration != rhs.liveDuration {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveRank: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveRank"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_list"),
    100: .same(proto: "mine"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rankList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._mine) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rankList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rankList, fieldNumber: 1)
    }
    try { if let v = self._mine {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveRank, rhs: GloryApi_LiveRank) -> Bool {
    if lhs.rankList != rhs.rankList {return false}
    if lhs._mine != rhs._mine {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopRankDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopRankDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_name"),
    2: .standard(proto: "shop_url"),
    3: .standard(proto: "sale_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shopURL) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.saleAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 1)
    }
    if !self.shopURL.isEmpty {
      try visitor.visitSingularStringField(value: self.shopURL, fieldNumber: 2)
    }
    if self.saleAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.saleAmount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopRankDetail, rhs: GloryApi_ShopRankDetail) -> Bool {
    if lhs.shopName != rhs.shopName {return false}
    if lhs.shopURL != rhs.shopURL {return false}
    if lhs.saleAmount != rhs.saleAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopRankMine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopRankMine"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_name"),
    2: .standard(proto: "shop_url"),
    3: .standard(proto: "sale_amount"),
    4: .same(proto: "rank"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shopURL) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.saleAmount) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.rank) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 1)
    }
    if !self.shopURL.isEmpty {
      try visitor.visitSingularStringField(value: self.shopURL, fieldNumber: 2)
    }
    if self.saleAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.saleAmount, fieldNumber: 3)
    }
    if self.rank != 0 {
      try visitor.visitSingularInt64Field(value: self.rank, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopRankMine, rhs: GloryApi_ShopRankMine) -> Bool {
    if lhs.shopName != rhs.shopName {return false}
    if lhs.shopURL != rhs.shopURL {return false}
    if lhs.saleAmount != rhs.saleAmount {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ShopRank: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShopRank"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_list"),
    100: .same(proto: "mine"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rankList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._mine) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rankList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rankList, fieldNumber: 1)
    }
    try { if let v = self._mine {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ShopRank, rhs: GloryApi_ShopRank) -> Bool {
    if lhs.rankList != rhs.rankList {return false}
    if lhs._mine != rhs._mine {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ProductRankDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductRankDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_name"),
    2: .standard(proto: "product_url"),
    3: .standard(proto: "shop_name"),
    4: .standard(proto: "shop_url"),
    5: .standard(proto: "sale_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.shopURL) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.saleAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productName.isEmpty {
      try visitor.visitSingularStringField(value: self.productName, fieldNumber: 1)
    }
    if !self.productURL.isEmpty {
      try visitor.visitSingularStringField(value: self.productURL, fieldNumber: 2)
    }
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 3)
    }
    if !self.shopURL.isEmpty {
      try visitor.visitSingularStringField(value: self.shopURL, fieldNumber: 4)
    }
    if self.saleAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.saleAmount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ProductRankDetail, rhs: GloryApi_ProductRankDetail) -> Bool {
    if lhs.productName != rhs.productName {return false}
    if lhs.productURL != rhs.productURL {return false}
    if lhs.shopName != rhs.shopName {return false}
    if lhs.shopURL != rhs.shopURL {return false}
    if lhs.saleAmount != rhs.saleAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ProductRankMine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductRankMine"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_name"),
    2: .standard(proto: "product_url"),
    3: .standard(proto: "shop_name"),
    4: .standard(proto: "shop_url"),
    5: .standard(proto: "sale_amount"),
    6: .same(proto: "rank"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shopName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.shopURL) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.saleAmount) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.rank) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productName.isEmpty {
      try visitor.visitSingularStringField(value: self.productName, fieldNumber: 1)
    }
    if !self.productURL.isEmpty {
      try visitor.visitSingularStringField(value: self.productURL, fieldNumber: 2)
    }
    if !self.shopName.isEmpty {
      try visitor.visitSingularStringField(value: self.shopName, fieldNumber: 3)
    }
    if !self.shopURL.isEmpty {
      try visitor.visitSingularStringField(value: self.shopURL, fieldNumber: 4)
    }
    if self.saleAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.saleAmount, fieldNumber: 5)
    }
    if self.rank != 0 {
      try visitor.visitSingularInt64Field(value: self.rank, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ProductRankMine, rhs: GloryApi_ProductRankMine) -> Bool {
    if lhs.productName != rhs.productName {return false}
    if lhs.productURL != rhs.productURL {return false}
    if lhs.shopName != rhs.shopName {return false}
    if lhs.shopURL != rhs.shopURL {return false}
    if lhs.saleAmount != rhs.saleAmount {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ProductRank: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductRank"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_list"),
    100: .same(proto: "mine"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rankList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._mine) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rankList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rankList, fieldNumber: 1)
    }
    try { if let v = self._mine {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ProductRank, rhs: GloryApi_ProductRank) -> Bool {
    if lhs.rankList != rhs.rankList {return false}
    if lhs._mine != rhs._mine {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveLikeRankDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveLikeRankDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .same(proto: "tenant"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .standard(proto: "like_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenant) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.likeAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.tenant.isEmpty {
      try visitor.visitSingularStringField(value: self.tenant, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.likeAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.likeAmount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveLikeRankDetail, rhs: GloryApi_LiveLikeRankDetail) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.tenant != rhs.tenant {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.likeAmount != rhs.likeAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveLikeRankMine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveLikeRankMine"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .same(proto: "tenant"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .standard(proto: "like_amount"),
    6: .same(proto: "rank"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenant) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.likeAmount) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.rank) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.tenant.isEmpty {
      try visitor.visitSingularStringField(value: self.tenant, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.likeAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.likeAmount, fieldNumber: 5)
    }
    if self.rank != 0 {
      try visitor.visitSingularInt64Field(value: self.rank, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveLikeRankMine, rhs: GloryApi_LiveLikeRankMine) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.tenant != rhs.tenant {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.likeAmount != rhs.likeAmount {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveLikeRank: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveLikeRank"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_list"),
    100: .same(proto: "mine"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rankList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._mine) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rankList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rankList, fieldNumber: 1)
    }
    try { if let v = self._mine {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveLikeRank, rhs: GloryApi_LiveLikeRank) -> Bool {
    if lhs.rankList != rhs.rankList {return false}
    if lhs._mine != rhs._mine {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveOrderRankDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveOrderRankDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .same(proto: "tenant"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .standard(proto: "order_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenant) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.orderAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.tenant.isEmpty {
      try visitor.visitSingularStringField(value: self.tenant, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.orderAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.orderAmount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveOrderRankDetail, rhs: GloryApi_LiveOrderRankDetail) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.tenant != rhs.tenant {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.orderAmount != rhs.orderAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveOrderRankMine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveOrderRankMine"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .same(proto: "tenant"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .standard(proto: "order_amount"),
    6: .same(proto: "rank"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenant) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.orderAmount) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.rank) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.tenant.isEmpty {
      try visitor.visitSingularStringField(value: self.tenant, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.orderAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.orderAmount, fieldNumber: 5)
    }
    if self.rank != 0 {
      try visitor.visitSingularInt64Field(value: self.rank, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveOrderRankMine, rhs: GloryApi_LiveOrderRankMine) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.tenant != rhs.tenant {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.orderAmount != rhs.orderAmount {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveOrderRank: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveOrderRank"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_list"),
    100: .same(proto: "mine"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rankList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._mine) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rankList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rankList, fieldNumber: 1)
    }
    try { if let v = self._mine {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveOrderRank, rhs: GloryApi_LiveOrderRank) -> Bool {
    if lhs.rankList != rhs.rankList {return false}
    if lhs._mine != rhs._mine {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveEvaluationRankDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveEvaluationRankDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .same(proto: "tenant"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .same(proto: "score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenant) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.score) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.tenant.isEmpty {
      try visitor.visitSingularStringField(value: self.tenant, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.score != 0 {
      try visitor.visitSingularDoubleField(value: self.score, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveEvaluationRankDetail, rhs: GloryApi_LiveEvaluationRankDetail) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.tenant != rhs.tenant {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveEvaluationRankMine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveEvaluationRankMine"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .same(proto: "tenant"),
    3: .same(proto: "major"),
    4: .same(proto: "clas"),
    5: .same(proto: "score"),
    6: .same(proto: "rank"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tenant) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.major) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clas) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.score) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.rank) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if !self.tenant.isEmpty {
      try visitor.visitSingularStringField(value: self.tenant, fieldNumber: 2)
    }
    if !self.major.isEmpty {
      try visitor.visitSingularStringField(value: self.major, fieldNumber: 3)
    }
    if !self.clas.isEmpty {
      try visitor.visitSingularStringField(value: self.clas, fieldNumber: 4)
    }
    if self.score != 0 {
      try visitor.visitSingularDoubleField(value: self.score, fieldNumber: 5)
    }
    if self.rank != 0 {
      try visitor.visitSingularInt64Field(value: self.rank, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveEvaluationRankMine, rhs: GloryApi_LiveEvaluationRankMine) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.tenant != rhs.tenant {return false}
    if lhs.major != rhs.major {return false}
    if lhs.clas != rhs.clas {return false}
    if lhs.score != rhs.score {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_LiveEvaluationRank: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveEvaluationRank"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_list"),
    100: .same(proto: "mine"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rankList) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._mine) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rankList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rankList, fieldNumber: 1)
    }
    try { if let v = self._mine {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_LiveEvaluationRank, rhs: GloryApi_LiveEvaluationRank) -> Bool {
    if lhs.rankList != rhs.rankList {return false}
    if lhs._mine != rhs._mine {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetRankRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRankRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .same(proto: "category"),
    3: .same(proto: "type"),
    4: .same(proto: "start"),
    5: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.category) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.start) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    if self.start != 0 {
      try visitor.visitSingularInt64Field(value: self.start, fieldNumber: 4)
    }
    if self.end != 0 {
      try visitor.visitSingularInt64Field(value: self.end, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetRankRequest, rhs: GloryApi_GetRankRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.category != rhs.category {return false}
    if lhs.type != rhs.type {return false}
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetRankResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRankResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .same(proto: "live"),
    3: .same(proto: "shop"),
    4: .same(proto: "product"),
    5: .standard(proto: "live_like"),
    6: .standard(proto: "live_order"),
    7: .standard(proto: "live_evaluation"),
  ]

  fileprivate class _StorageClass {
    var _baseResp: Base_BaseResponse? = nil
    var _live: GloryApi_LiveRank? = nil
    var _shop: GloryApi_ShopRank? = nil
    var _product: GloryApi_ProductRank? = nil
    var _liveLike: GloryApi_LiveLikeRank? = nil
    var _liveOrder: GloryApi_LiveOrderRank? = nil
    var _liveEvaluation: GloryApi_LiveEvaluationRank? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseResp = source._baseResp
      _live = source._live
      _shop = source._shop
      _product = source._product
      _liveLike = source._liveLike
      _liveOrder = source._liveOrder
      _liveEvaluation = source._liveEvaluation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._baseResp) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._live) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._shop) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._product) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._liveLike) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._liveOrder) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._liveEvaluation) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._baseResp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._live {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._shop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._liveLike {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._liveOrder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._liveEvaluation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetRankResponse, rhs: GloryApi_GetRankResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseResp != rhs_storage._baseResp {return false}
        if _storage._live != rhs_storage._live {return false}
        if _storage._shop != rhs_storage._shop {return false}
        if _storage._product != rhs_storage._product {return false}
        if _storage._liveLike != rhs_storage._liveLike {return false}
        if _storage._liveOrder != rhs_storage._liveOrder {return false}
        if _storage._liveEvaluation != rhs_storage._liveEvaluation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
