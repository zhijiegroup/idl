// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: task/student_task.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_StudentTaskLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_TimeRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var start: String = String()

  var end: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_StudentTaskParameterResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var taskParameterID: Int64 = 0

  var taskParameterKey: String = String()

  var taskParameterName: String = String()

  var taskParameterOperator: String = String()

  var taskParameterValue: String = String()

  var taskParameterType: String = String()

  var isPassed: Bool = false

  var failedReason: String = String()

  var children: [GloryApi_StudentTaskParameterResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_StudentTaskRequirementResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var taskRequirementID: Int64 = 0

  var taskRequirement: String = String()

  var isPasswd: Bool = false

  var failedReason: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_StudentTask {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var studentTaskID: Int64 = 0

  var taskStatus: String = String()

  var submittedAt: String = String()

  var submitParameter: String = String()

  var submitDescription: String = String()

  var attachments: [String] = []

  var studentTaskParameterResult: [GloryApi_StudentTaskParameterResult] = []

  var studentTaskRequirementResult: [GloryApi_StudentTaskRequirementResult] = []

  var teacherFailedReason: String = String()

  var teacherEvaluateScore: Int32 = 0

  var taskPlatform: String = String()

  var systemTaskKey: String = String()

  var teacherTask: GloryApi_TeacherTask {
    get {return _teacherTask ?? GloryApi_TeacherTask()}
    set {_teacherTask = newValue}
  }
  /// Returns true if `teacherTask` has been explicitly set.
  var hasTeacherTask: Bool {return self._teacherTask != nil}
  /// Clears the value of `teacherTask`. Subsequent reads from it will return its default value.
  mutating func clearTeacherTask() {self._teacherTask = nil}

  var taskLinks: [GloryApi_StudentTaskLink] = []

  var student: GloryApi_User {
    get {return _student ?? GloryApi_User()}
    set {_student = newValue}
  }
  /// Returns true if `student` has been explicitly set.
  var hasStudent: Bool {return self._student != nil}
  /// Clears the value of `student`. Subsequent reads from it will return its default value.
  mutating func clearStudent() {self._student = nil}

  var teacher: GloryApi_User {
    get {return _teacher ?? GloryApi_User()}
    set {_teacher = newValue}
  }
  /// Returns true if `teacher` has been explicitly set.
  var hasTeacher: Bool {return self._teacher != nil}
  /// Clears the value of `teacher`. Subsequent reads from it will return its default value.
  mutating func clearTeacher() {self._teacher = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _teacherTask: GloryApi_TeacherTask? = nil
  fileprivate var _student: GloryApi_User? = nil
  fileprivate var _teacher: GloryApi_User? = nil
}

struct GloryApi_TeacherRequirementEvaluation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requirementID: Int64 = 0

  var requirementPass: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0. 全部；1. 未提交；2. 已评价
  var type: Int32 = 0

  var keyword: String = String()

  /// 任务所属平台："APP"，"WEB"，"APP/WEB"，""
  var platform: String = String()

  /// 任务状态。参考：https://qqlgdcm1ns.feishu.cn/wiki/MSpCwRZxKiUaNakVnYgcN4CnnPc
  var status: String = String()

  var taskStart: String = String()

  var taskEnd: String = String()

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var studentTasks: [GloryApi_StudentTask] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_SubmitStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var studentTaskID: Int64 = 0

  var studentTaskParameter: String = String()

  var studentTaskDescription: String = String()

  var studentTaskAttachments: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_SubmitStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_GetStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var studentTaskID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _storage._baseResp ?? Base_BaseResponse()}
    set {_uniqueStorage()._baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return _storage._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {_uniqueStorage()._baseResp = nil}

  var studentTask: GloryApi_StudentTask {
    get {return _storage._studentTask ?? GloryApi_StudentTask()}
    set {_uniqueStorage()._studentTask = newValue}
  }
  /// Returns true if `studentTask` has been explicitly set.
  var hasStudentTask: Bool {return _storage._studentTask != nil}
  /// Clears the value of `studentTask`. Subsequent reads from it will return its default value.
  mutating func clearStudentTask() {_uniqueStorage()._studentTask = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_TeacherListStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  /// 任务评价类型：1. 机器评价任务；2. 教师评价任务
  var taskEvaluateType: Int32 = 0

  /// 任务评价状态：1. 待评价；2. 已评价；3. 未提交
  var taskEvaluateStatus: Int32 = 0

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_TeacherListStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var studentTasks: [GloryApi_StudentTask] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_TeacherEvaluateStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var studentTaskID: Int64 = 0

  var requirementEvaluations: [GloryApi_TeacherRequirementEvaluation] = []

  var failedReason: String = String()

  var evaluateScore: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_TeacherEvaluateStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_StudentTaskLink: @unchecked Sendable {}
extension GloryApi_TimeRange: @unchecked Sendable {}
extension GloryApi_StudentTaskParameterResult: @unchecked Sendable {}
extension GloryApi_StudentTaskRequirementResult: @unchecked Sendable {}
extension GloryApi_StudentTask: @unchecked Sendable {}
extension GloryApi_TeacherRequirementEvaluation: @unchecked Sendable {}
extension GloryApi_ListStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_ListStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_SubmitStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_SubmitStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_GetStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_GetStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_TeacherListStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_TeacherListStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_TeacherEvaluateStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_TeacherEvaluateStudentTaskResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_StudentTaskLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskLink"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskLink, rhs: GloryApi_StudentTaskLink) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TimeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TimeRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.start) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.start.isEmpty {
      try visitor.visitSingularStringField(value: self.start, fieldNumber: 1)
    }
    if !self.end.isEmpty {
      try visitor.visitSingularStringField(value: self.end, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TimeRange, rhs: GloryApi_TimeRange) -> Bool {
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskParameterResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskParameterResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_parameter_id"),
    2: .standard(proto: "task_parameter_key"),
    3: .standard(proto: "task_parameter_name"),
    4: .standard(proto: "task_parameter_operator"),
    5: .standard(proto: "task_parameter_value"),
    6: .standard(proto: "task_parameter_type"),
    7: .standard(proto: "is_passed"),
    8: .standard(proto: "failed_reason"),
    9: .same(proto: "children"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.taskParameterID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskParameterKey) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.taskParameterName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.taskParameterOperator) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.taskParameterValue) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.taskParameterType) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isPassed) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.failedReason) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.children) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.taskParameterID != 0 {
      try visitor.visitSingularInt64Field(value: self.taskParameterID, fieldNumber: 1)
    }
    if !self.taskParameterKey.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterKey, fieldNumber: 2)
    }
    if !self.taskParameterName.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterName, fieldNumber: 3)
    }
    if !self.taskParameterOperator.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterOperator, fieldNumber: 4)
    }
    if !self.taskParameterValue.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterValue, fieldNumber: 5)
    }
    if !self.taskParameterType.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterType, fieldNumber: 6)
    }
    if self.isPassed != false {
      try visitor.visitSingularBoolField(value: self.isPassed, fieldNumber: 7)
    }
    if !self.failedReason.isEmpty {
      try visitor.visitSingularStringField(value: self.failedReason, fieldNumber: 8)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskParameterResult, rhs: GloryApi_StudentTaskParameterResult) -> Bool {
    if lhs.taskParameterID != rhs.taskParameterID {return false}
    if lhs.taskParameterKey != rhs.taskParameterKey {return false}
    if lhs.taskParameterName != rhs.taskParameterName {return false}
    if lhs.taskParameterOperator != rhs.taskParameterOperator {return false}
    if lhs.taskParameterValue != rhs.taskParameterValue {return false}
    if lhs.taskParameterType != rhs.taskParameterType {return false}
    if lhs.isPassed != rhs.isPassed {return false}
    if lhs.failedReason != rhs.failedReason {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskRequirementResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskRequirementResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_requirement_id"),
    2: .standard(proto: "task_requirement"),
    3: .standard(proto: "is_passwd"),
    4: .standard(proto: "failed_reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.taskRequirementID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskRequirement) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isPasswd) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.failedReason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.taskRequirementID != 0 {
      try visitor.visitSingularInt64Field(value: self.taskRequirementID, fieldNumber: 1)
    }
    if !self.taskRequirement.isEmpty {
      try visitor.visitSingularStringField(value: self.taskRequirement, fieldNumber: 2)
    }
    if self.isPasswd != false {
      try visitor.visitSingularBoolField(value: self.isPasswd, fieldNumber: 3)
    }
    if !self.failedReason.isEmpty {
      try visitor.visitSingularStringField(value: self.failedReason, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskRequirementResult, rhs: GloryApi_StudentTaskRequirementResult) -> Bool {
    if lhs.taskRequirementID != rhs.taskRequirementID {return false}
    if lhs.taskRequirement != rhs.taskRequirement {return false}
    if lhs.isPasswd != rhs.isPasswd {return false}
    if lhs.failedReason != rhs.failedReason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "student_task_id"),
    2: .standard(proto: "task_status"),
    3: .standard(proto: "submitted_at"),
    4: .standard(proto: "submit_parameter"),
    5: .standard(proto: "submit_description"),
    6: .same(proto: "attachments"),
    7: .standard(proto: "student_task_parameter_result"),
    8: .standard(proto: "student_task_requirement_result"),
    9: .standard(proto: "teacher_failed_reason"),
    10: .standard(proto: "teacher_evaluate_score"),
    11: .standard(proto: "task_platform"),
    12: .standard(proto: "system_task_key"),
    13: .standard(proto: "teacher_task"),
    14: .standard(proto: "task_links"),
    15: .same(proto: "student"),
    16: .same(proto: "teacher"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskStatus) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.submittedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.submitParameter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.submitDescription) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.attachments) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.studentTaskParameterResult) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.studentTaskRequirementResult) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.teacherFailedReason) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.teacherEvaluateScore) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.taskPlatform) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.systemTaskKey) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._teacherTask) }()
      case 14: try { try decoder.decodeRepeatedMessageField(value: &self.taskLinks) }()
      case 15: try { try decoder.decodeSingularMessageField(value: &self._student) }()
      case 16: try { try decoder.decodeSingularMessageField(value: &self._teacher) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 1)
    }
    if !self.taskStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.taskStatus, fieldNumber: 2)
    }
    if !self.submittedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.submittedAt, fieldNumber: 3)
    }
    if !self.submitParameter.isEmpty {
      try visitor.visitSingularStringField(value: self.submitParameter, fieldNumber: 4)
    }
    if !self.submitDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.submitDescription, fieldNumber: 5)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.attachments, fieldNumber: 6)
    }
    if !self.studentTaskParameterResult.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.studentTaskParameterResult, fieldNumber: 7)
    }
    if !self.studentTaskRequirementResult.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.studentTaskRequirementResult, fieldNumber: 8)
    }
    if !self.teacherFailedReason.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherFailedReason, fieldNumber: 9)
    }
    if self.teacherEvaluateScore != 0 {
      try visitor.visitSingularInt32Field(value: self.teacherEvaluateScore, fieldNumber: 10)
    }
    if !self.taskPlatform.isEmpty {
      try visitor.visitSingularStringField(value: self.taskPlatform, fieldNumber: 11)
    }
    if !self.systemTaskKey.isEmpty {
      try visitor.visitSingularStringField(value: self.systemTaskKey, fieldNumber: 12)
    }
    try { if let v = self._teacherTask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    if !self.taskLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.taskLinks, fieldNumber: 14)
    }
    try { if let v = self._student {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    } }()
    try { if let v = self._teacher {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTask, rhs: GloryApi_StudentTask) -> Bool {
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.taskStatus != rhs.taskStatus {return false}
    if lhs.submittedAt != rhs.submittedAt {return false}
    if lhs.submitParameter != rhs.submitParameter {return false}
    if lhs.submitDescription != rhs.submitDescription {return false}
    if lhs.attachments != rhs.attachments {return false}
    if lhs.studentTaskParameterResult != rhs.studentTaskParameterResult {return false}
    if lhs.studentTaskRequirementResult != rhs.studentTaskRequirementResult {return false}
    if lhs.teacherFailedReason != rhs.teacherFailedReason {return false}
    if lhs.teacherEvaluateScore != rhs.teacherEvaluateScore {return false}
    if lhs.taskPlatform != rhs.taskPlatform {return false}
    if lhs.systemTaskKey != rhs.systemTaskKey {return false}
    if lhs._teacherTask != rhs._teacherTask {return false}
    if lhs.taskLinks != rhs.taskLinks {return false}
    if lhs._student != rhs._student {return false}
    if lhs._teacher != rhs._teacher {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherRequirementEvaluation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherRequirementEvaluation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requirement_id"),
    2: .standard(proto: "requirement_pass"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.requirementID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.requirementPass) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requirementID != 0 {
      try visitor.visitSingularInt64Field(value: self.requirementID, fieldNumber: 1)
    }
    if self.requirementPass != false {
      try visitor.visitSingularBoolField(value: self.requirementPass, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherRequirementEvaluation, rhs: GloryApi_TeacherRequirementEvaluation) -> Bool {
    if lhs.requirementID != rhs.requirementID {return false}
    if lhs.requirementPass != rhs.requirementPass {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "keyword"),
    3: .same(proto: "platform"),
    4: .same(proto: "status"),
    5: .standard(proto: "task_start"),
    6: .standard(proto: "task_end"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.keyword) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.taskStart) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.taskEnd) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if !self.keyword.isEmpty {
      try visitor.visitSingularStringField(value: self.keyword, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 4)
    }
    if !self.taskStart.isEmpty {
      try visitor.visitSingularStringField(value: self.taskStart, fieldNumber: 5)
    }
    if !self.taskEnd.isEmpty {
      try visitor.visitSingularStringField(value: self.taskEnd, fieldNumber: 6)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListStudentTaskRequest, rhs: GloryApi_ListStudentTaskRequest) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.keyword != rhs.keyword {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.status != rhs.status {return false}
    if lhs.taskStart != rhs.taskStart {return false}
    if lhs.taskEnd != rhs.taskEnd {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "student_tasks"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.studentTasks) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.studentTasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.studentTasks, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListStudentTaskResponse, rhs: GloryApi_ListStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.studentTasks != rhs.studentTasks {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "student_task_id"),
    2: .standard(proto: "student_task_parameter"),
    3: .standard(proto: "student_task_description"),
    4: .standard(proto: "student_task_attachments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.studentTaskParameter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.studentTaskDescription) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.studentTaskAttachments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 1)
    }
    if !self.studentTaskParameter.isEmpty {
      try visitor.visitSingularStringField(value: self.studentTaskParameter, fieldNumber: 2)
    }
    if !self.studentTaskDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.studentTaskDescription, fieldNumber: 3)
    }
    if !self.studentTaskAttachments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.studentTaskAttachments, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitStudentTaskRequest, rhs: GloryApi_SubmitStudentTaskRequest) -> Bool {
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.studentTaskParameter != rhs.studentTaskParameter {return false}
    if lhs.studentTaskDescription != rhs.studentTaskDescription {return false}
    if lhs.studentTaskAttachments != rhs.studentTaskAttachments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitStudentTaskResponse, rhs: GloryApi_SubmitStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "student_task_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetStudentTaskRequest, rhs: GloryApi_GetStudentTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "student_task"),
  ]

  fileprivate class _StorageClass {
    var _baseResp: Base_BaseResponse? = nil
    var _studentTask: GloryApi_StudentTask? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseResp = source._baseResp
      _studentTask = source._studentTask
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._baseResp) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._studentTask) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._baseResp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._studentTask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetStudentTaskResponse, rhs: GloryApi_GetStudentTaskResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseResp != rhs_storage._baseResp {return false}
        if _storage._studentTask != rhs_storage._studentTask {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherListStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherListStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "task_evaluate_type"),
    3: .standard(proto: "task_evaluate_status"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.taskEvaluateType) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.taskEvaluateStatus) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.taskEvaluateType != 0 {
      try visitor.visitSingularInt32Field(value: self.taskEvaluateType, fieldNumber: 2)
    }
    if self.taskEvaluateStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.taskEvaluateStatus, fieldNumber: 3)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherListStudentTaskRequest, rhs: GloryApi_TeacherListStudentTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.taskEvaluateType != rhs.taskEvaluateType {return false}
    if lhs.taskEvaluateStatus != rhs.taskEvaluateStatus {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherListStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherListStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "student_tasks"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.studentTasks) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.studentTasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.studentTasks, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherListStudentTaskResponse, rhs: GloryApi_TeacherListStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.studentTasks != rhs.studentTasks {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherEvaluateStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherEvaluateStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "student_task_id"),
    3: .standard(proto: "requirement_evaluations"),
    4: .standard(proto: "failed_reason"),
    5: .standard(proto: "evaluate_score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.requirementEvaluations) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.failedReason) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.evaluateScore) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 2)
    }
    if !self.requirementEvaluations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requirementEvaluations, fieldNumber: 3)
    }
    if !self.failedReason.isEmpty {
      try visitor.visitSingularStringField(value: self.failedReason, fieldNumber: 4)
    }
    if self.evaluateScore != 0 {
      try visitor.visitSingularInt64Field(value: self.evaluateScore, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherEvaluateStudentTaskRequest, rhs: GloryApi_TeacherEvaluateStudentTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.requirementEvaluations != rhs.requirementEvaluations {return false}
    if lhs.failedReason != rhs.failedReason {return false}
    if lhs.evaluateScore != rhs.evaluateScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherEvaluateStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherEvaluateStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherEvaluateStudentTaskResponse, rhs: GloryApi_TeacherEvaluateStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
