// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: task/student_task.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_StudentTaskLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_TimeRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var start: String = String()

  var end: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_StudentTaskParameterResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var taskParameterID: Int64 = 0

  var taskParameterKey: String = String()

  var taskParameterName: String = String()

  var taskParameterOperator: String = String()

  var taskParameterValue: String = String()

  var taskParameterType: String = String()

  var taskParameterResult: String = String()

  var isPassed: Bool = false

  var failedReason: String = String()

  var children: [GloryApi_StudentTaskParameterResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_StudentTaskRequirementResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var taskRequirementID: Int64 = 0

  /// 任务要求
  var taskRequirement: String = String()

  /// 是否通过
  var isPassed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_StudentTaskAttachment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ossPath: String = String()

  var ossURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_StudentTask {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var studentTaskID: Int64 {
    get {return _storage._studentTaskID}
    set {_uniqueStorage()._studentTaskID = newValue}
  }

  /// 任务状态，参考：https://qqlgdcm1ns.feishu.cn/wiki/MSpCwRZxKiUaNakVnYgcN4CnnPc
  var taskStatus: String {
    get {return _storage._taskStatus}
    set {_uniqueStorage()._taskStatus = newValue}
  }

  /// 任务提交时间
  var submittedAt: String {
    get {return _storage._submittedAt}
    set {_uniqueStorage()._submittedAt = newValue}
  }

  /// 任务提交参数
  var submitParameter: String {
    get {return _storage._submitParameter}
    set {_uniqueStorage()._submitParameter = newValue}
  }

  /// 任务提交描述
  var submitDescription: String {
    get {return _storage._submitDescription}
    set {_uniqueStorage()._submitDescription = newValue}
  }

  /// 任务提交附件
  var attachments: [GloryApi_StudentTaskAttachment] {
    get {return _storage._attachments}
    set {_uniqueStorage()._attachments = newValue}
  }

  /// 任务评价时间
  var evaluatedAt: String {
    get {return _storage._evaluatedAt}
    set {_uniqueStorage()._evaluatedAt = newValue}
  }

  /// 任务参数评价结果
  var studentTaskParameterResult: [GloryApi_StudentTaskParameterResult] {
    get {return _storage._studentTaskParameterResult}
    set {_uniqueStorage()._studentTaskParameterResult = newValue}
  }

  /// 任务要求评价结果
  var studentTaskRequirementResult: [GloryApi_StudentTaskRequirementResult] {
    get {return _storage._studentTaskRequirementResult}
    set {_uniqueStorage()._studentTaskRequirementResult = newValue}
  }

  /// 任务要求失败原因
  var teacherFailedReason: String {
    get {return _storage._teacherFailedReason}
    set {_uniqueStorage()._teacherFailedReason = newValue}
  }

  /// 任务评分
  var teacherEvaluateScore: Int32 {
    get {return _storage._teacherEvaluateScore}
    set {_uniqueStorage()._teacherEvaluateScore = newValue}
  }

  /// 任务所属平台："app"，"web"，"app/web"，""
  var taskPlatform: String {
    get {return _storage._taskPlatform}
    set {_uniqueStorage()._taskPlatform = newValue}
  }

  /// 预置任务标识
  var systemTaskKey: String {
    get {return _storage._systemTaskKey}
    set {_uniqueStorage()._systemTaskKey = newValue}
  }

  /// 任务所属教师任务
  var teacherTask: GloryApi_TeacherTask {
    get {return _storage._teacherTask ?? GloryApi_TeacherTask()}
    set {_uniqueStorage()._teacherTask = newValue}
  }
  /// Returns true if `teacherTask` has been explicitly set.
  var hasTeacherTask: Bool {return _storage._teacherTask != nil}
  /// Clears the value of `teacherTask`. Subsequent reads from it will return its default value.
  mutating func clearTeacherTask() {_uniqueStorage()._teacherTask = nil}

  /// 任务链接
  var taskLinks: [GloryApi_StudentTaskLink] {
    get {return _storage._taskLinks}
    set {_uniqueStorage()._taskLinks = newValue}
  }

  /// 任务结果连接
  var taskResultLinks: [GloryApi_StudentTaskLink] {
    get {return _storage._taskResultLinks}
    set {_uniqueStorage()._taskResultLinks = newValue}
  }

  /// 学生班级信息
  var classDept: GloryApi_TenantDept {
    get {return _storage._classDept ?? GloryApi_TenantDept()}
    set {_uniqueStorage()._classDept = newValue}
  }
  /// Returns true if `classDept` has been explicitly set.
  var hasClassDept: Bool {return _storage._classDept != nil}
  /// Clears the value of `classDept`. Subsequent reads from it will return its default value.
  mutating func clearClassDept() {_uniqueStorage()._classDept = nil}

  /// 学生专业信息
  var majorDept: GloryApi_TenantDept {
    get {return _storage._majorDept ?? GloryApi_TenantDept()}
    set {_uniqueStorage()._majorDept = newValue}
  }
  /// Returns true if `majorDept` has been explicitly set.
  var hasMajorDept: Bool {return _storage._majorDept != nil}
  /// Clears the value of `majorDept`. Subsequent reads from it will return its default value.
  mutating func clearMajorDept() {_uniqueStorage()._majorDept = nil}

  /// 学生信息
  var student: GloryApi_User {
    get {return _storage._student ?? GloryApi_User()}
    set {_uniqueStorage()._student = newValue}
  }
  /// Returns true if `student` has been explicitly set.
  var hasStudent: Bool {return _storage._student != nil}
  /// Clears the value of `student`. Subsequent reads from it will return its default value.
  mutating func clearStudent() {_uniqueStorage()._student = nil}

  /// 老师信息
  var teacher: GloryApi_User {
    get {return _storage._teacher ?? GloryApi_User()}
    set {_uniqueStorage()._teacher = newValue}
  }
  /// Returns true if `teacher` has been explicitly set.
  var hasTeacher: Bool {return _storage._teacher != nil}
  /// Clears the value of `teacher`. Subsequent reads from it will return its default value.
  mutating func clearTeacher() {_uniqueStorage()._teacher = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_TeacherRequirementEvaluation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requirementID: Int64 = 0

  var requirementPass: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_ListStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0. 全部；1. 未提交；2. 已评价
  var type: Int32 = 0

  var keyword: String = String()

  /// 任务所属平台："all"，"app"，"web"，"app/web"，""
  var platform: String = String()

  /// 任务状态。
  /// 1. 如果查询全部，参考：https://qqlgdcm1ns.feishu.cn/wiki/MSpCwRZxKiUaNakVnYgcN4CnnPc。
  /// 2. 如果查询未提交：waiting_submit - 待提交；expired - 逾期未提交。
  /// 3. 如果查询已评价：passed - 已通过；failed：未通过。
  var status: String = String()

  var taskStart: GloryApi_TimeRange {
    get {return _taskStart ?? GloryApi_TimeRange()}
    set {_taskStart = newValue}
  }
  /// Returns true if `taskStart` has been explicitly set.
  var hasTaskStart: Bool {return self._taskStart != nil}
  /// Clears the value of `taskStart`. Subsequent reads from it will return its default value.
  mutating func clearTaskStart() {self._taskStart = nil}

  var taskEnd: GloryApi_TimeRange {
    get {return _taskEnd ?? GloryApi_TimeRange()}
    set {_taskEnd = newValue}
  }
  /// Returns true if `taskEnd` has been explicitly set.
  var hasTaskEnd: Bool {return self._taskEnd != nil}
  /// Clears the value of `taskEnd`. Subsequent reads from it will return its default value.
  mutating func clearTaskEnd() {self._taskEnd = nil}

  var taskSubmittedAt: GloryApi_TimeRange {
    get {return _taskSubmittedAt ?? GloryApi_TimeRange()}
    set {_taskSubmittedAt = newValue}
  }
  /// Returns true if `taskSubmittedAt` has been explicitly set.
  var hasTaskSubmittedAt: Bool {return self._taskSubmittedAt != nil}
  /// Clears the value of `taskSubmittedAt`. Subsequent reads from it will return its default value.
  mutating func clearTaskSubmittedAt() {self._taskSubmittedAt = nil}

  var taskEvaluatedAt: GloryApi_TimeRange {
    get {return _taskEvaluatedAt ?? GloryApi_TimeRange()}
    set {_taskEvaluatedAt = newValue}
  }
  /// Returns true if `taskEvaluatedAt` has been explicitly set.
  var hasTaskEvaluatedAt: Bool {return self._taskEvaluatedAt != nil}
  /// Clears the value of `taskEvaluatedAt`. Subsequent reads from it will return its default value.
  mutating func clearTaskEvaluatedAt() {self._taskEvaluatedAt = nil}

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _taskStart: GloryApi_TimeRange? = nil
  fileprivate var _taskEnd: GloryApi_TimeRange? = nil
  fileprivate var _taskSubmittedAt: GloryApi_TimeRange? = nil
  fileprivate var _taskEvaluatedAt: GloryApi_TimeRange? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var studentTasks: [GloryApi_StudentTask] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_SubmitStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var studentTaskID: Int64 = 0

  var studentTaskParameter: String = String()

  var studentTaskDescription: String = String()

  var studentTaskAttachments: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_SubmitStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_GetStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var studentTaskID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var studentTask: GloryApi_StudentTask {
    get {return _studentTask ?? GloryApi_StudentTask()}
    set {_studentTask = newValue}
  }
  /// Returns true if `studentTask` has been explicitly set.
  var hasStudentTask: Bool {return self._studentTask != nil}
  /// Clears the value of `studentTask`. Subsequent reads from it will return its default value.
  mutating func clearStudentTask() {self._studentTask = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _studentTask: GloryApi_StudentTask? = nil
}

struct GloryApi_TeacherListStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _storage._baseRequest ?? Base_BaseRequest()}
    set {_uniqueStorage()._baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return _storage._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {_uniqueStorage()._baseRequest = nil}

  /// 任务评价类型：1. 机器评价任务；2. 教师评价任务
  var taskEvaluateType: Int32 {
    get {return _storage._taskEvaluateType}
    set {_uniqueStorage()._taskEvaluateType = newValue}
  }

  /// 任务评价状态：1. 待评价；2. 已评价；3. 未提交
  var taskEvaluateStatus: Int32 {
    get {return _storage._taskEvaluateStatus}
    set {_uniqueStorage()._taskEvaluateStatus = newValue}
  }

  var keyword: String {
    get {return _storage._keyword}
    set {_uniqueStorage()._keyword = newValue}
  }

  var classIds: [Int64] {
    get {return _storage._classIds}
    set {_uniqueStorage()._classIds = newValue}
  }

  var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var taskStart: GloryApi_TimeRange {
    get {return _storage._taskStart ?? GloryApi_TimeRange()}
    set {_uniqueStorage()._taskStart = newValue}
  }
  /// Returns true if `taskStart` has been explicitly set.
  var hasTaskStart: Bool {return _storage._taskStart != nil}
  /// Clears the value of `taskStart`. Subsequent reads from it will return its default value.
  mutating func clearTaskStart() {_uniqueStorage()._taskStart = nil}

  var taskEnd: GloryApi_TimeRange {
    get {return _storage._taskEnd ?? GloryApi_TimeRange()}
    set {_uniqueStorage()._taskEnd = newValue}
  }
  /// Returns true if `taskEnd` has been explicitly set.
  var hasTaskEnd: Bool {return _storage._taskEnd != nil}
  /// Clears the value of `taskEnd`. Subsequent reads from it will return its default value.
  mutating func clearTaskEnd() {_uniqueStorage()._taskEnd = nil}

  var taskSubmittedAt: GloryApi_TimeRange {
    get {return _storage._taskSubmittedAt ?? GloryApi_TimeRange()}
    set {_uniqueStorage()._taskSubmittedAt = newValue}
  }
  /// Returns true if `taskSubmittedAt` has been explicitly set.
  var hasTaskSubmittedAt: Bool {return _storage._taskSubmittedAt != nil}
  /// Clears the value of `taskSubmittedAt`. Subsequent reads from it will return its default value.
  mutating func clearTaskSubmittedAt() {_uniqueStorage()._taskSubmittedAt = nil}

  var taskEvaluatedAt: GloryApi_TimeRange {
    get {return _storage._taskEvaluatedAt ?? GloryApi_TimeRange()}
    set {_uniqueStorage()._taskEvaluatedAt = newValue}
  }
  /// Returns true if `taskEvaluatedAt` has been explicitly set.
  var hasTaskEvaluatedAt: Bool {return _storage._taskEvaluatedAt != nil}
  /// Clears the value of `taskEvaluatedAt`. Subsequent reads from it will return its default value.
  mutating func clearTaskEvaluatedAt() {_uniqueStorage()._taskEvaluatedAt = nil}

  var pagination: Base_PaginationRequest {
    get {return _storage._pagination ?? Base_PaginationRequest()}
    set {_uniqueStorage()._pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return _storage._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {_uniqueStorage()._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_TeacherListStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var studentTasks: [GloryApi_StudentTask] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_TeacherEvaluateStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var studentTaskID: Int64 = 0

  var requirementEvaluations: [GloryApi_TeacherRequirementEvaluation] = []

  var failedReason: String = String()

  var evaluateScore: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_TeacherEvaluateStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_StudentTaskStatsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_StudentTaskStatsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var totalTaskCount: Int64 = 0

  var waitingSubmitCount: Int64 = 0

  var waitingEvaluateCount: Int64 = 0

  var evaluatePassedCount: Int64 = 0

  var evaluateFailedCount: Int64 = 0

  var expireCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_StudentTaskEvaluateStatsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  /// 任务评价类型：1. 机器评价任务；2. 教师评价任务
  var taskEvaluateType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_StudentTaskEvaluateStatsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var totalTaskCount: Int64 = 0

  var waitingEvaluateCount: Int64 = 0

  var evaluatedCount: Int64 = 0

  var waitingSubmitCount: Int64 = 0

  var expireCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_StudentTaskLink: @unchecked Sendable {}
extension GloryApi_TimeRange: @unchecked Sendable {}
extension GloryApi_StudentTaskParameterResult: @unchecked Sendable {}
extension GloryApi_StudentTaskRequirementResult: @unchecked Sendable {}
extension GloryApi_StudentTaskAttachment: @unchecked Sendable {}
extension GloryApi_StudentTask: @unchecked Sendable {}
extension GloryApi_TeacherRequirementEvaluation: @unchecked Sendable {}
extension GloryApi_ListStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_ListStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_SubmitStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_SubmitStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_GetStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_GetStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_TeacherListStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_TeacherListStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_TeacherEvaluateStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_TeacherEvaluateStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_StudentTaskStatsRequest: @unchecked Sendable {}
extension GloryApi_StudentTaskStatsResponse: @unchecked Sendable {}
extension GloryApi_StudentTaskEvaluateStatsRequest: @unchecked Sendable {}
extension GloryApi_StudentTaskEvaluateStatsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_StudentTaskLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskLink"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskLink, rhs: GloryApi_StudentTaskLink) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TimeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TimeRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.start) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.start.isEmpty {
      try visitor.visitSingularStringField(value: self.start, fieldNumber: 1)
    }
    if !self.end.isEmpty {
      try visitor.visitSingularStringField(value: self.end, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TimeRange, rhs: GloryApi_TimeRange) -> Bool {
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskParameterResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskParameterResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_parameter_id"),
    2: .standard(proto: "task_parameter_key"),
    3: .standard(proto: "task_parameter_name"),
    4: .standard(proto: "task_parameter_operator"),
    5: .standard(proto: "task_parameter_value"),
    6: .standard(proto: "task_parameter_type"),
    7: .standard(proto: "task_parameter_result"),
    8: .standard(proto: "is_passed"),
    9: .standard(proto: "failed_reason"),
    10: .same(proto: "children"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.taskParameterID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskParameterKey) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.taskParameterName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.taskParameterOperator) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.taskParameterValue) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.taskParameterType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.taskParameterResult) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isPassed) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.failedReason) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.children) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.taskParameterID != 0 {
      try visitor.visitSingularInt64Field(value: self.taskParameterID, fieldNumber: 1)
    }
    if !self.taskParameterKey.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterKey, fieldNumber: 2)
    }
    if !self.taskParameterName.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterName, fieldNumber: 3)
    }
    if !self.taskParameterOperator.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterOperator, fieldNumber: 4)
    }
    if !self.taskParameterValue.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterValue, fieldNumber: 5)
    }
    if !self.taskParameterType.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterType, fieldNumber: 6)
    }
    if !self.taskParameterResult.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterResult, fieldNumber: 7)
    }
    if self.isPassed != false {
      try visitor.visitSingularBoolField(value: self.isPassed, fieldNumber: 8)
    }
    if !self.failedReason.isEmpty {
      try visitor.visitSingularStringField(value: self.failedReason, fieldNumber: 9)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskParameterResult, rhs: GloryApi_StudentTaskParameterResult) -> Bool {
    if lhs.taskParameterID != rhs.taskParameterID {return false}
    if lhs.taskParameterKey != rhs.taskParameterKey {return false}
    if lhs.taskParameterName != rhs.taskParameterName {return false}
    if lhs.taskParameterOperator != rhs.taskParameterOperator {return false}
    if lhs.taskParameterValue != rhs.taskParameterValue {return false}
    if lhs.taskParameterType != rhs.taskParameterType {return false}
    if lhs.taskParameterResult != rhs.taskParameterResult {return false}
    if lhs.isPassed != rhs.isPassed {return false}
    if lhs.failedReason != rhs.failedReason {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskRequirementResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskRequirementResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_requirement_id"),
    2: .standard(proto: "task_requirement"),
    3: .standard(proto: "is_passed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.taskRequirementID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskRequirement) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isPassed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.taskRequirementID != 0 {
      try visitor.visitSingularInt64Field(value: self.taskRequirementID, fieldNumber: 1)
    }
    if !self.taskRequirement.isEmpty {
      try visitor.visitSingularStringField(value: self.taskRequirement, fieldNumber: 2)
    }
    if self.isPassed != false {
      try visitor.visitSingularBoolField(value: self.isPassed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskRequirementResult, rhs: GloryApi_StudentTaskRequirementResult) -> Bool {
    if lhs.taskRequirementID != rhs.taskRequirementID {return false}
    if lhs.taskRequirement != rhs.taskRequirement {return false}
    if lhs.isPassed != rhs.isPassed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskAttachment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskAttachment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "oss_path"),
    2: .standard(proto: "oss_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ossPath) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ossURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ossPath.isEmpty {
      try visitor.visitSingularStringField(value: self.ossPath, fieldNumber: 1)
    }
    if !self.ossURL.isEmpty {
      try visitor.visitSingularStringField(value: self.ossURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskAttachment, rhs: GloryApi_StudentTaskAttachment) -> Bool {
    if lhs.ossPath != rhs.ossPath {return false}
    if lhs.ossURL != rhs.ossURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "student_task_id"),
    2: .standard(proto: "task_status"),
    3: .standard(proto: "submitted_at"),
    4: .standard(proto: "submit_parameter"),
    5: .standard(proto: "submit_description"),
    6: .same(proto: "attachments"),
    7: .standard(proto: "evaluated_at"),
    8: .standard(proto: "student_task_parameter_result"),
    9: .standard(proto: "student_task_requirement_result"),
    10: .standard(proto: "teacher_failed_reason"),
    11: .standard(proto: "teacher_evaluate_score"),
    12: .standard(proto: "task_platform"),
    13: .standard(proto: "system_task_key"),
    14: .standard(proto: "teacher_task"),
    15: .standard(proto: "task_links"),
    16: .standard(proto: "task_result_links"),
    17: .standard(proto: "class_dept"),
    18: .standard(proto: "major_dept"),
    19: .same(proto: "student"),
    20: .same(proto: "teacher"),
  ]

  fileprivate class _StorageClass {
    var _studentTaskID: Int64 = 0
    var _taskStatus: String = String()
    var _submittedAt: String = String()
    var _submitParameter: String = String()
    var _submitDescription: String = String()
    var _attachments: [GloryApi_StudentTaskAttachment] = []
    var _evaluatedAt: String = String()
    var _studentTaskParameterResult: [GloryApi_StudentTaskParameterResult] = []
    var _studentTaskRequirementResult: [GloryApi_StudentTaskRequirementResult] = []
    var _teacherFailedReason: String = String()
    var _teacherEvaluateScore: Int32 = 0
    var _taskPlatform: String = String()
    var _systemTaskKey: String = String()
    var _teacherTask: GloryApi_TeacherTask? = nil
    var _taskLinks: [GloryApi_StudentTaskLink] = []
    var _taskResultLinks: [GloryApi_StudentTaskLink] = []
    var _classDept: GloryApi_TenantDept? = nil
    var _majorDept: GloryApi_TenantDept? = nil
    var _student: GloryApi_User? = nil
    var _teacher: GloryApi_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _studentTaskID = source._studentTaskID
      _taskStatus = source._taskStatus
      _submittedAt = source._submittedAt
      _submitParameter = source._submitParameter
      _submitDescription = source._submitDescription
      _attachments = source._attachments
      _evaluatedAt = source._evaluatedAt
      _studentTaskParameterResult = source._studentTaskParameterResult
      _studentTaskRequirementResult = source._studentTaskRequirementResult
      _teacherFailedReason = source._teacherFailedReason
      _teacherEvaluateScore = source._teacherEvaluateScore
      _taskPlatform = source._taskPlatform
      _systemTaskKey = source._systemTaskKey
      _teacherTask = source._teacherTask
      _taskLinks = source._taskLinks
      _taskResultLinks = source._taskResultLinks
      _classDept = source._classDept
      _majorDept = source._majorDept
      _student = source._student
      _teacher = source._teacher
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._studentTaskID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._taskStatus) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._submittedAt) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._submitParameter) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._submitDescription) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._attachments) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._evaluatedAt) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._studentTaskParameterResult) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._studentTaskRequirementResult) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._teacherFailedReason) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._teacherEvaluateScore) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._taskPlatform) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._systemTaskKey) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._teacherTask) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._taskLinks) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._taskResultLinks) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._classDept) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._majorDept) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._student) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._teacher) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._studentTaskID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._studentTaskID, fieldNumber: 1)
      }
      if !_storage._taskStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taskStatus, fieldNumber: 2)
      }
      if !_storage._submittedAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._submittedAt, fieldNumber: 3)
      }
      if !_storage._submitParameter.isEmpty {
        try visitor.visitSingularStringField(value: _storage._submitParameter, fieldNumber: 4)
      }
      if !_storage._submitDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._submitDescription, fieldNumber: 5)
      }
      if !_storage._attachments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attachments, fieldNumber: 6)
      }
      if !_storage._evaluatedAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._evaluatedAt, fieldNumber: 7)
      }
      if !_storage._studentTaskParameterResult.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._studentTaskParameterResult, fieldNumber: 8)
      }
      if !_storage._studentTaskRequirementResult.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._studentTaskRequirementResult, fieldNumber: 9)
      }
      if !_storage._teacherFailedReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherFailedReason, fieldNumber: 10)
      }
      if _storage._teacherEvaluateScore != 0 {
        try visitor.visitSingularInt32Field(value: _storage._teacherEvaluateScore, fieldNumber: 11)
      }
      if !_storage._taskPlatform.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taskPlatform, fieldNumber: 12)
      }
      if !_storage._systemTaskKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._systemTaskKey, fieldNumber: 13)
      }
      try { if let v = _storage._teacherTask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      if !_storage._taskLinks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._taskLinks, fieldNumber: 15)
      }
      if !_storage._taskResultLinks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._taskResultLinks, fieldNumber: 16)
      }
      try { if let v = _storage._classDept {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._majorDept {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._student {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._teacher {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTask, rhs: GloryApi_StudentTask) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._studentTaskID != rhs_storage._studentTaskID {return false}
        if _storage._taskStatus != rhs_storage._taskStatus {return false}
        if _storage._submittedAt != rhs_storage._submittedAt {return false}
        if _storage._submitParameter != rhs_storage._submitParameter {return false}
        if _storage._submitDescription != rhs_storage._submitDescription {return false}
        if _storage._attachments != rhs_storage._attachments {return false}
        if _storage._evaluatedAt != rhs_storage._evaluatedAt {return false}
        if _storage._studentTaskParameterResult != rhs_storage._studentTaskParameterResult {return false}
        if _storage._studentTaskRequirementResult != rhs_storage._studentTaskRequirementResult {return false}
        if _storage._teacherFailedReason != rhs_storage._teacherFailedReason {return false}
        if _storage._teacherEvaluateScore != rhs_storage._teacherEvaluateScore {return false}
        if _storage._taskPlatform != rhs_storage._taskPlatform {return false}
        if _storage._systemTaskKey != rhs_storage._systemTaskKey {return false}
        if _storage._teacherTask != rhs_storage._teacherTask {return false}
        if _storage._taskLinks != rhs_storage._taskLinks {return false}
        if _storage._taskResultLinks != rhs_storage._taskResultLinks {return false}
        if _storage._classDept != rhs_storage._classDept {return false}
        if _storage._majorDept != rhs_storage._majorDept {return false}
        if _storage._student != rhs_storage._student {return false}
        if _storage._teacher != rhs_storage._teacher {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherRequirementEvaluation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherRequirementEvaluation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requirement_id"),
    2: .standard(proto: "requirement_pass"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.requirementID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.requirementPass) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requirementID != 0 {
      try visitor.visitSingularInt64Field(value: self.requirementID, fieldNumber: 1)
    }
    if self.requirementPass != false {
      try visitor.visitSingularBoolField(value: self.requirementPass, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherRequirementEvaluation, rhs: GloryApi_TeacherRequirementEvaluation) -> Bool {
    if lhs.requirementID != rhs.requirementID {return false}
    if lhs.requirementPass != rhs.requirementPass {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "keyword"),
    3: .same(proto: "platform"),
    4: .same(proto: "status"),
    5: .standard(proto: "task_start"),
    6: .standard(proto: "task_end"),
    7: .standard(proto: "task_submitted_at"),
    8: .standard(proto: "task_evaluated_at"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.keyword) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._taskStart) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._taskEnd) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._taskSubmittedAt) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._taskEvaluatedAt) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if !self.keyword.isEmpty {
      try visitor.visitSingularStringField(value: self.keyword, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 4)
    }
    try { if let v = self._taskStart {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._taskEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._taskSubmittedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._taskEvaluatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListStudentTaskRequest, rhs: GloryApi_ListStudentTaskRequest) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.keyword != rhs.keyword {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.status != rhs.status {return false}
    if lhs._taskStart != rhs._taskStart {return false}
    if lhs._taskEnd != rhs._taskEnd {return false}
    if lhs._taskSubmittedAt != rhs._taskSubmittedAt {return false}
    if lhs._taskEvaluatedAt != rhs._taskEvaluatedAt {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "student_tasks"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.studentTasks) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.studentTasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.studentTasks, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListStudentTaskResponse, rhs: GloryApi_ListStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.studentTasks != rhs.studentTasks {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "student_task_id"),
    2: .standard(proto: "student_task_parameter"),
    3: .standard(proto: "student_task_description"),
    4: .standard(proto: "student_task_attachments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.studentTaskParameter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.studentTaskDescription) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.studentTaskAttachments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 1)
    }
    if !self.studentTaskParameter.isEmpty {
      try visitor.visitSingularStringField(value: self.studentTaskParameter, fieldNumber: 2)
    }
    if !self.studentTaskDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.studentTaskDescription, fieldNumber: 3)
    }
    if !self.studentTaskAttachments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.studentTaskAttachments, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitStudentTaskRequest, rhs: GloryApi_SubmitStudentTaskRequest) -> Bool {
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.studentTaskParameter != rhs.studentTaskParameter {return false}
    if lhs.studentTaskDescription != rhs.studentTaskDescription {return false}
    if lhs.studentTaskAttachments != rhs.studentTaskAttachments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitStudentTaskResponse, rhs: GloryApi_SubmitStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "student_task_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetStudentTaskRequest, rhs: GloryApi_GetStudentTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "student_task"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._studentTask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._studentTask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetStudentTaskResponse, rhs: GloryApi_GetStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._studentTask != rhs._studentTask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherListStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherListStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "task_evaluate_type"),
    3: .standard(proto: "task_evaluate_status"),
    4: .same(proto: "keyword"),
    5: .standard(proto: "class_ids"),
    6: .same(proto: "status"),
    7: .standard(proto: "task_start"),
    8: .standard(proto: "task_end"),
    9: .standard(proto: "task_submitted_at"),
    10: .standard(proto: "task_evaluated_at"),
    100: .same(proto: "pagination"),
  ]

  fileprivate class _StorageClass {
    var _baseRequest: Base_BaseRequest? = nil
    var _taskEvaluateType: Int32 = 0
    var _taskEvaluateStatus: Int32 = 0
    var _keyword: String = String()
    var _classIds: [Int64] = []
    var _status: String = String()
    var _taskStart: GloryApi_TimeRange? = nil
    var _taskEnd: GloryApi_TimeRange? = nil
    var _taskSubmittedAt: GloryApi_TimeRange? = nil
    var _taskEvaluatedAt: GloryApi_TimeRange? = nil
    var _pagination: Base_PaginationRequest? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseRequest = source._baseRequest
      _taskEvaluateType = source._taskEvaluateType
      _taskEvaluateStatus = source._taskEvaluateStatus
      _keyword = source._keyword
      _classIds = source._classIds
      _status = source._status
      _taskStart = source._taskStart
      _taskEnd = source._taskEnd
      _taskSubmittedAt = source._taskSubmittedAt
      _taskEvaluatedAt = source._taskEvaluatedAt
      _pagination = source._pagination
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._baseRequest) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._taskEvaluateType) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._taskEvaluateStatus) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._keyword) }()
        case 5: try { try decoder.decodeRepeatedInt64Field(value: &_storage._classIds) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._status) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._taskStart) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._taskEnd) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._taskSubmittedAt) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._taskEvaluatedAt) }()
        case 100: try { try decoder.decodeSingularMessageField(value: &_storage._pagination) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._baseRequest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._taskEvaluateType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._taskEvaluateType, fieldNumber: 2)
      }
      if _storage._taskEvaluateStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._taskEvaluateStatus, fieldNumber: 3)
      }
      if !_storage._keyword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._keyword, fieldNumber: 4)
      }
      if !_storage._classIds.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._classIds, fieldNumber: 5)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 6)
      }
      try { if let v = _storage._taskStart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._taskEnd {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._taskSubmittedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._taskEvaluatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._pagination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherListStudentTaskRequest, rhs: GloryApi_TeacherListStudentTaskRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseRequest != rhs_storage._baseRequest {return false}
        if _storage._taskEvaluateType != rhs_storage._taskEvaluateType {return false}
        if _storage._taskEvaluateStatus != rhs_storage._taskEvaluateStatus {return false}
        if _storage._keyword != rhs_storage._keyword {return false}
        if _storage._classIds != rhs_storage._classIds {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._taskStart != rhs_storage._taskStart {return false}
        if _storage._taskEnd != rhs_storage._taskEnd {return false}
        if _storage._taskSubmittedAt != rhs_storage._taskSubmittedAt {return false}
        if _storage._taskEvaluatedAt != rhs_storage._taskEvaluatedAt {return false}
        if _storage._pagination != rhs_storage._pagination {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherListStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherListStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "student_tasks"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.studentTasks) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.studentTasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.studentTasks, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherListStudentTaskResponse, rhs: GloryApi_TeacherListStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.studentTasks != rhs.studentTasks {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherEvaluateStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherEvaluateStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "student_task_id"),
    3: .standard(proto: "requirement_evaluations"),
    4: .standard(proto: "failed_reason"),
    5: .standard(proto: "evaluate_score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.requirementEvaluations) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.failedReason) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.evaluateScore) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 2)
    }
    if !self.requirementEvaluations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.requirementEvaluations, fieldNumber: 3)
    }
    if !self.failedReason.isEmpty {
      try visitor.visitSingularStringField(value: self.failedReason, fieldNumber: 4)
    }
    if self.evaluateScore != 0 {
      try visitor.visitSingularInt32Field(value: self.evaluateScore, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherEvaluateStudentTaskRequest, rhs: GloryApi_TeacherEvaluateStudentTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.requirementEvaluations != rhs.requirementEvaluations {return false}
    if lhs.failedReason != rhs.failedReason {return false}
    if lhs.evaluateScore != rhs.evaluateScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherEvaluateStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherEvaluateStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherEvaluateStudentTaskResponse, rhs: GloryApi_TeacherEvaluateStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskStatsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskStatsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskStatsRequest, rhs: GloryApi_StudentTaskStatsRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskStatsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "total_task_count"),
    3: .standard(proto: "waiting_submit_count"),
    4: .standard(proto: "waiting_evaluate_count"),
    5: .standard(proto: "evaluate_passed_count"),
    6: .standard(proto: "evaluate_failed_count"),
    7: .standard(proto: "expire_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalTaskCount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.waitingSubmitCount) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.waitingEvaluateCount) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.evaluatePassedCount) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.evaluateFailedCount) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.expireCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.totalTaskCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalTaskCount, fieldNumber: 2)
    }
    if self.waitingSubmitCount != 0 {
      try visitor.visitSingularInt64Field(value: self.waitingSubmitCount, fieldNumber: 3)
    }
    if self.waitingEvaluateCount != 0 {
      try visitor.visitSingularInt64Field(value: self.waitingEvaluateCount, fieldNumber: 4)
    }
    if self.evaluatePassedCount != 0 {
      try visitor.visitSingularInt64Field(value: self.evaluatePassedCount, fieldNumber: 5)
    }
    if self.evaluateFailedCount != 0 {
      try visitor.visitSingularInt64Field(value: self.evaluateFailedCount, fieldNumber: 6)
    }
    if self.expireCount != 0 {
      try visitor.visitSingularInt64Field(value: self.expireCount, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskStatsResponse, rhs: GloryApi_StudentTaskStatsResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.totalTaskCount != rhs.totalTaskCount {return false}
    if lhs.waitingSubmitCount != rhs.waitingSubmitCount {return false}
    if lhs.waitingEvaluateCount != rhs.waitingEvaluateCount {return false}
    if lhs.evaluatePassedCount != rhs.evaluatePassedCount {return false}
    if lhs.evaluateFailedCount != rhs.evaluateFailedCount {return false}
    if lhs.expireCount != rhs.expireCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskEvaluateStatsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskEvaluateStatsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "task_evaluate_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.taskEvaluateType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.taskEvaluateType != 0 {
      try visitor.visitSingularInt32Field(value: self.taskEvaluateType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskEvaluateStatsRequest, rhs: GloryApi_StudentTaskEvaluateStatsRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.taskEvaluateType != rhs.taskEvaluateType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_StudentTaskEvaluateStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTaskEvaluateStatsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "total_task_count"),
    3: .standard(proto: "waiting_evaluate_count"),
    4: .standard(proto: "evaluated_count"),
    5: .standard(proto: "waiting_submit_count"),
    6: .standard(proto: "expire_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalTaskCount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.waitingEvaluateCount) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.evaluatedCount) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.waitingSubmitCount) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.expireCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.totalTaskCount != 0 {
      try visitor.visitSingularInt64Field(value: self.totalTaskCount, fieldNumber: 2)
    }
    if self.waitingEvaluateCount != 0 {
      try visitor.visitSingularInt64Field(value: self.waitingEvaluateCount, fieldNumber: 3)
    }
    if self.evaluatedCount != 0 {
      try visitor.visitSingularInt64Field(value: self.evaluatedCount, fieldNumber: 4)
    }
    if self.waitingSubmitCount != 0 {
      try visitor.visitSingularInt64Field(value: self.waitingSubmitCount, fieldNumber: 5)
    }
    if self.expireCount != 0 {
      try visitor.visitSingularInt64Field(value: self.expireCount, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTaskEvaluateStatsResponse, rhs: GloryApi_StudentTaskEvaluateStatsResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.totalTaskCount != rhs.totalTaskCount {return false}
    if lhs.waitingEvaluateCount != rhs.waitingEvaluateCount {return false}
    if lhs.evaluatedCount != rhs.evaluatedCount {return false}
    if lhs.waitingSubmitCount != rhs.waitingSubmitCount {return false}
    if lhs.expireCount != rhs.expireCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
