// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: task/student_task.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_StudentTask {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var studentTaskID: Int64 = 0

  var status: String = String()

  var submittedAt: String = String()

  var submitParameter: String = String()

  var submitDescription: String = String()

  var attachments: [String] = []

  var teacherTask: GloryApi_TeacherTask {
    get {return _teacherTask ?? GloryApi_TeacherTask()}
    set {_teacherTask = newValue}
  }
  /// Returns true if `teacherTask` has been explicitly set.
  var hasTeacherTask: Bool {return self._teacherTask != nil}
  /// Clears the value of `teacherTask`. Subsequent reads from it will return its default value.
  mutating func clearTeacherTask() {self._teacherTask = nil}

  var teacher: GloryApi_User {
    get {return _teacher ?? GloryApi_User()}
    set {_teacher = newValue}
  }
  /// Returns true if `teacher` has been explicitly set.
  var hasTeacher: Bool {return self._teacher != nil}
  /// Clears the value of `teacher`. Subsequent reads from it will return its default value.
  mutating func clearTeacher() {self._teacher = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _teacherTask: GloryApi_TeacherTask? = nil
  fileprivate var _teacher: GloryApi_User? = nil
}

struct GloryApi_ListStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var studentTasks: [GloryApi_StudentTask] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_SubmitStudentTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var studentTaskID: Int64 = 0

  var studentTaskParameter: String = String()

  var studentTaskDescription: String = String()

  var studentTaskAttachments: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_SubmitStudentTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_StudentTask: @unchecked Sendable {}
extension GloryApi_ListStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_ListStudentTaskResponse: @unchecked Sendable {}
extension GloryApi_SubmitStudentTaskRequest: @unchecked Sendable {}
extension GloryApi_SubmitStudentTaskResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_StudentTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StudentTask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "student_task_id"),
    2: .same(proto: "status"),
    3: .standard(proto: "submitted_at"),
    4: .standard(proto: "submit_parameter"),
    5: .standard(proto: "submit_description"),
    6: .same(proto: "attachments"),
    7: .standard(proto: "teacher_task"),
    8: .same(proto: "teacher"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.submittedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.submitParameter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.submitDescription) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.attachments) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._teacherTask) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._teacher) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 1)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 2)
    }
    if !self.submittedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.submittedAt, fieldNumber: 3)
    }
    if !self.submitParameter.isEmpty {
      try visitor.visitSingularStringField(value: self.submitParameter, fieldNumber: 4)
    }
    if !self.submitDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.submitDescription, fieldNumber: 5)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.attachments, fieldNumber: 6)
    }
    try { if let v = self._teacherTask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._teacher {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_StudentTask, rhs: GloryApi_StudentTask) -> Bool {
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.submittedAt != rhs.submittedAt {return false}
    if lhs.submitParameter != rhs.submitParameter {return false}
    if lhs.submitDescription != rhs.submitDescription {return false}
    if lhs.attachments != rhs.attachments {return false}
    if lhs._teacherTask != rhs._teacherTask {return false}
    if lhs._teacher != rhs._teacher {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListStudentTaskRequest, rhs: GloryApi_ListStudentTaskRequest) -> Bool {
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "student_tasks"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.studentTasks) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.studentTasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.studentTasks, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListStudentTaskResponse, rhs: GloryApi_ListStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.studentTasks != rhs.studentTasks {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitStudentTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitStudentTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "student_task_id"),
    2: .standard(proto: "student_task_parameter"),
    3: .standard(proto: "student_task_description"),
    4: .standard(proto: "student_task_attachments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.studentTaskID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.studentTaskParameter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.studentTaskDescription) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.studentTaskAttachments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.studentTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.studentTaskID, fieldNumber: 1)
    }
    if !self.studentTaskParameter.isEmpty {
      try visitor.visitSingularStringField(value: self.studentTaskParameter, fieldNumber: 2)
    }
    if !self.studentTaskDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.studentTaskDescription, fieldNumber: 3)
    }
    if !self.studentTaskAttachments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.studentTaskAttachments, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitStudentTaskRequest, rhs: GloryApi_SubmitStudentTaskRequest) -> Bool {
    if lhs.studentTaskID != rhs.studentTaskID {return false}
    if lhs.studentTaskParameter != rhs.studentTaskParameter {return false}
    if lhs.studentTaskDescription != rhs.studentTaskDescription {return false}
    if lhs.studentTaskAttachments != rhs.studentTaskAttachments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_SubmitStudentTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitStudentTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_SubmitStudentTaskResponse, rhs: GloryApi_SubmitStudentTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
