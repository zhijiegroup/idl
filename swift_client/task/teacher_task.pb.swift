// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: task/teacher_task.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GloryApi_TeacherTaskParameter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var taskParameterID: Int64 = 0

  var taskParameterKey: String = String()

  var taskParameterName: String = String()

  var taskParameterOperator: String = String()

  var taskParameterValue: String = String()

  var taskParameterType: String = String()

  var children: [GloryApi_TeacherTaskParameter] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_TeacherTaskClass {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var classID: Int64 = 0

  var className: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GloryApi_TeacherTask {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var teacherTaskID: Int64 {
    get {return _storage._teacherTaskID}
    set {_uniqueStorage()._teacherTaskID = newValue}
  }

  var teacherID: Int64 {
    get {return _storage._teacherID}
    set {_uniqueStorage()._teacherID = newValue}
  }

  var teacherTaskName: String {
    get {return _storage._teacherTaskName}
    set {_uniqueStorage()._teacherTaskName = newValue}
  }

  var teacherTaskBusiness: String {
    get {return _storage._teacherTaskBusiness}
    set {_uniqueStorage()._teacherTaskBusiness = newValue}
  }

  var teacherTaskClasses: [GloryApi_TeacherTaskClass] {
    get {return _storage._teacherTaskClasses}
    set {_uniqueStorage()._teacherTaskClasses = newValue}
  }

  var teacherTaskStart: String {
    get {return _storage._teacherTaskStart}
    set {_uniqueStorage()._teacherTaskStart = newValue}
  }

  var teacherTaskEnd: String {
    get {return _storage._teacherTaskEnd}
    set {_uniqueStorage()._teacherTaskEnd = newValue}
  }

  /// 任务类型：1.模板任务；2.手动任务
  var teacherTaskType: Int32 {
    get {return _storage._teacherTaskType}
    set {_uniqueStorage()._teacherTaskType = newValue}
  }

  var teacherTaskTemplateID: Int64 {
    get {return _storage._teacherTaskTemplateID}
    set {_uniqueStorage()._teacherTaskTemplateID = newValue}
  }

  var teacherTaskContent: String {
    get {return _storage._teacherTaskContent}
    set {_uniqueStorage()._teacherTaskContent = newValue}
  }

  var teacherTaskRequirements: [String] {
    get {return _storage._teacherTaskRequirements}
    set {_uniqueStorage()._teacherTaskRequirements = newValue}
  }

  var teacherTaskLink: String {
    get {return _storage._teacherTaskLink}
    set {_uniqueStorage()._teacherTaskLink = newValue}
  }

  /// 任务状态：not_started：未开始；ongoing：进行中；ended：已结束
  var teacherTaskStatus: String {
    get {return _storage._teacherTaskStatus}
    set {_uniqueStorage()._teacherTaskStatus = newValue}
  }

  /// 总任务数
  var totalTaskCount: Int64 {
    get {return _storage._totalTaskCount}
    set {_uniqueStorage()._totalTaskCount = newValue}
  }

  /// 总提交数
  var totalSubmitCount: Int64 {
    get {return _storage._totalSubmitCount}
    set {_uniqueStorage()._totalSubmitCount = newValue}
  }

  /// 总通过数
  var totalPassCount: Int64 {
    get {return _storage._totalPassCount}
    set {_uniqueStorage()._totalPassCount = newValue}
  }

  var taskParameters: [GloryApi_TeacherTaskParameter] {
    get {return _storage._taskParameters}
    set {_uniqueStorage()._taskParameters = newValue}
  }

  var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  var updatedAt: String {
    get {return _storage._updatedAt}
    set {_uniqueStorage()._updatedAt = newValue}
  }

  var creator: GloryApi_User {
    get {return _storage._creator ?? GloryApi_User()}
    set {_uniqueStorage()._creator = newValue}
  }
  /// Returns true if `creator` has been explicitly set.
  var hasCreator: Bool {return _storage._creator != nil}
  /// Clears the value of `creator`. Subsequent reads from it will return its default value.
  mutating func clearCreator() {_uniqueStorage()._creator = nil}

  var updator: GloryApi_User {
    get {return _storage._updator ?? GloryApi_User()}
    set {_uniqueStorage()._updator = newValue}
  }
  /// Returns true if `updator` has been explicitly set.
  var hasUpdator: Bool {return _storage._updator != nil}
  /// Clears the value of `updator`. Subsequent reads from it will return its default value.
  mutating func clearUpdator() {_uniqueStorage()._updator = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GloryApi_CreateTeacherTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var teacherTask: GloryApi_TeacherTask {
    get {return _teacherTask ?? GloryApi_TeacherTask()}
    set {_teacherTask = newValue}
  }
  /// Returns true if `teacherTask` has been explicitly set.
  var hasTeacherTask: Bool {return self._teacherTask != nil}
  /// Clears the value of `teacherTask`. Subsequent reads from it will return its default value.
  mutating func clearTeacherTask() {self._teacherTask = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _teacherTask: GloryApi_TeacherTask? = nil
}

struct GloryApi_CreateTeacherTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_UpdateTeacherTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var teacherTask: GloryApi_TeacherTask {
    get {return _teacherTask ?? GloryApi_TeacherTask()}
    set {_teacherTask = newValue}
  }
  /// Returns true if `teacherTask` has been explicitly set.
  var hasTeacherTask: Bool {return self._teacherTask != nil}
  /// Clears the value of `teacherTask`. Subsequent reads from it will return its default value.
  mutating func clearTeacherTask() {self._teacherTask = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _teacherTask: GloryApi_TeacherTask? = nil
}

struct GloryApi_UpdateTeacherTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

struct GloryApi_ListTeacherTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var pagination: Base_PaginationRequest {
    get {return _pagination ?? Base_PaginationRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
  fileprivate var _pagination: Base_PaginationRequest? = nil
}

struct GloryApi_ListTeacherTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var teacherTasks: [GloryApi_TeacherTask] = []

  var pagination: Base_PaginationResponse {
    get {return _pagination ?? Base_PaginationResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _pagination: Base_PaginationResponse? = nil
}

struct GloryApi_GetTeacherTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var teacherTaskID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_GetTeacherTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var teacherTask: GloryApi_TeacherTask {
    get {return _teacherTask ?? GloryApi_TeacherTask()}
    set {_teacherTask = newValue}
  }
  /// Returns true if `teacherTask` has been explicitly set.
  var hasTeacherTask: Bool {return self._teacherTask != nil}
  /// Clears the value of `teacherTask`. Subsequent reads from it will return its default value.
  mutating func clearTeacherTask() {self._teacherTask = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
  fileprivate var _teacherTask: GloryApi_TeacherTask? = nil
}

struct GloryApi_DeleteTeacherTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRequest: Base_BaseRequest {
    get {return _baseRequest ?? Base_BaseRequest()}
    set {_baseRequest = newValue}
  }
  /// Returns true if `baseRequest` has been explicitly set.
  var hasBaseRequest: Bool {return self._baseRequest != nil}
  /// Clears the value of `baseRequest`. Subsequent reads from it will return its default value.
  mutating func clearBaseRequest() {self._baseRequest = nil}

  var teacherTaskID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseRequest: Base_BaseRequest? = nil
}

struct GloryApi_DeleteTeacherTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseResp: Base_BaseResponse {
    get {return _baseResp ?? Base_BaseResponse()}
    set {_baseResp = newValue}
  }
  /// Returns true if `baseResp` has been explicitly set.
  var hasBaseResp: Bool {return self._baseResp != nil}
  /// Clears the value of `baseResp`. Subsequent reads from it will return its default value.
  mutating func clearBaseResp() {self._baseResp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseResp: Base_BaseResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GloryApi_TeacherTaskParameter: @unchecked Sendable {}
extension GloryApi_TeacherTaskClass: @unchecked Sendable {}
extension GloryApi_TeacherTask: @unchecked Sendable {}
extension GloryApi_CreateTeacherTaskRequest: @unchecked Sendable {}
extension GloryApi_CreateTeacherTaskResponse: @unchecked Sendable {}
extension GloryApi_UpdateTeacherTaskRequest: @unchecked Sendable {}
extension GloryApi_UpdateTeacherTaskResponse: @unchecked Sendable {}
extension GloryApi_ListTeacherTaskRequest: @unchecked Sendable {}
extension GloryApi_ListTeacherTaskResponse: @unchecked Sendable {}
extension GloryApi_GetTeacherTaskRequest: @unchecked Sendable {}
extension GloryApi_GetTeacherTaskResponse: @unchecked Sendable {}
extension GloryApi_DeleteTeacherTaskRequest: @unchecked Sendable {}
extension GloryApi_DeleteTeacherTaskResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "glory_api"

extension GloryApi_TeacherTaskParameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherTaskParameter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_parameter_id"),
    2: .standard(proto: "task_parameter_key"),
    3: .standard(proto: "task_parameter_name"),
    4: .standard(proto: "task_parameter_operator"),
    5: .standard(proto: "task_parameter_value"),
    6: .standard(proto: "task_parameter_type"),
    7: .same(proto: "children"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.taskParameterID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskParameterKey) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.taskParameterName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.taskParameterOperator) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.taskParameterValue) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.taskParameterType) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.children) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.taskParameterID != 0 {
      try visitor.visitSingularInt64Field(value: self.taskParameterID, fieldNumber: 1)
    }
    if !self.taskParameterKey.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterKey, fieldNumber: 2)
    }
    if !self.taskParameterName.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterName, fieldNumber: 3)
    }
    if !self.taskParameterOperator.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterOperator, fieldNumber: 4)
    }
    if !self.taskParameterValue.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterValue, fieldNumber: 5)
    }
    if !self.taskParameterType.isEmpty {
      try visitor.visitSingularStringField(value: self.taskParameterType, fieldNumber: 6)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherTaskParameter, rhs: GloryApi_TeacherTaskParameter) -> Bool {
    if lhs.taskParameterID != rhs.taskParameterID {return false}
    if lhs.taskParameterKey != rhs.taskParameterKey {return false}
    if lhs.taskParameterName != rhs.taskParameterName {return false}
    if lhs.taskParameterOperator != rhs.taskParameterOperator {return false}
    if lhs.taskParameterValue != rhs.taskParameterValue {return false}
    if lhs.taskParameterType != rhs.taskParameterType {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherTaskClass: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherTaskClass"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "class_id"),
    2: .standard(proto: "class_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.classID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.className) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.classID != 0 {
      try visitor.visitSingularInt64Field(value: self.classID, fieldNumber: 1)
    }
    if !self.className.isEmpty {
      try visitor.visitSingularStringField(value: self.className, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherTaskClass, rhs: GloryApi_TeacherTaskClass) -> Bool {
    if lhs.classID != rhs.classID {return false}
    if lhs.className != rhs.className {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_TeacherTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TeacherTask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "teacher_task_id"),
    2: .standard(proto: "teacher_id"),
    3: .standard(proto: "teacher_task_name"),
    4: .standard(proto: "teacher_task_business"),
    5: .standard(proto: "teacher_task_classes"),
    6: .standard(proto: "teacher_task_start"),
    7: .standard(proto: "teacher_task_end"),
    8: .standard(proto: "teacher_task_type"),
    9: .standard(proto: "teacher_task_template_id"),
    10: .standard(proto: "teacher_task_content"),
    11: .standard(proto: "teacher_task_requirements"),
    12: .standard(proto: "teacher_task_link"),
    13: .standard(proto: "teacher_task_status"),
    14: .standard(proto: "total_task_count"),
    15: .standard(proto: "total_submit_count"),
    16: .standard(proto: "total_pass_count"),
    17: .standard(proto: "task_parameters"),
    18: .standard(proto: "created_at"),
    19: .standard(proto: "updated_at"),
    20: .same(proto: "creator"),
    21: .same(proto: "updator"),
  ]

  fileprivate class _StorageClass {
    var _teacherTaskID: Int64 = 0
    var _teacherID: Int64 = 0
    var _teacherTaskName: String = String()
    var _teacherTaskBusiness: String = String()
    var _teacherTaskClasses: [GloryApi_TeacherTaskClass] = []
    var _teacherTaskStart: String = String()
    var _teacherTaskEnd: String = String()
    var _teacherTaskType: Int32 = 0
    var _teacherTaskTemplateID: Int64 = 0
    var _teacherTaskContent: String = String()
    var _teacherTaskRequirements: [String] = []
    var _teacherTaskLink: String = String()
    var _teacherTaskStatus: String = String()
    var _totalTaskCount: Int64 = 0
    var _totalSubmitCount: Int64 = 0
    var _totalPassCount: Int64 = 0
    var _taskParameters: [GloryApi_TeacherTaskParameter] = []
    var _createdAt: String = String()
    var _updatedAt: String = String()
    var _creator: GloryApi_User? = nil
    var _updator: GloryApi_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _teacherTaskID = source._teacherTaskID
      _teacherID = source._teacherID
      _teacherTaskName = source._teacherTaskName
      _teacherTaskBusiness = source._teacherTaskBusiness
      _teacherTaskClasses = source._teacherTaskClasses
      _teacherTaskStart = source._teacherTaskStart
      _teacherTaskEnd = source._teacherTaskEnd
      _teacherTaskType = source._teacherTaskType
      _teacherTaskTemplateID = source._teacherTaskTemplateID
      _teacherTaskContent = source._teacherTaskContent
      _teacherTaskRequirements = source._teacherTaskRequirements
      _teacherTaskLink = source._teacherTaskLink
      _teacherTaskStatus = source._teacherTaskStatus
      _totalTaskCount = source._totalTaskCount
      _totalSubmitCount = source._totalSubmitCount
      _totalPassCount = source._totalPassCount
      _taskParameters = source._taskParameters
      _createdAt = source._createdAt
      _updatedAt = source._updatedAt
      _creator = source._creator
      _updator = source._updator
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._teacherTaskID) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._teacherID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._teacherTaskName) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._teacherTaskBusiness) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._teacherTaskClasses) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._teacherTaskStart) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._teacherTaskEnd) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._teacherTaskType) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._teacherTaskTemplateID) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._teacherTaskContent) }()
        case 11: try { try decoder.decodeRepeatedStringField(value: &_storage._teacherTaskRequirements) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._teacherTaskLink) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._teacherTaskStatus) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._totalTaskCount) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._totalSubmitCount) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._totalPassCount) }()
        case 17: try { try decoder.decodeRepeatedMessageField(value: &_storage._taskParameters) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._createdAt) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._updatedAt) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._creator) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._updator) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._teacherTaskID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._teacherTaskID, fieldNumber: 1)
      }
      if _storage._teacherID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._teacherID, fieldNumber: 2)
      }
      if !_storage._teacherTaskName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherTaskName, fieldNumber: 3)
      }
      if !_storage._teacherTaskBusiness.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherTaskBusiness, fieldNumber: 4)
      }
      if !_storage._teacherTaskClasses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._teacherTaskClasses, fieldNumber: 5)
      }
      if !_storage._teacherTaskStart.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherTaskStart, fieldNumber: 6)
      }
      if !_storage._teacherTaskEnd.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherTaskEnd, fieldNumber: 7)
      }
      if _storage._teacherTaskType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._teacherTaskType, fieldNumber: 8)
      }
      if _storage._teacherTaskTemplateID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._teacherTaskTemplateID, fieldNumber: 9)
      }
      if !_storage._teacherTaskContent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherTaskContent, fieldNumber: 10)
      }
      if !_storage._teacherTaskRequirements.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._teacherTaskRequirements, fieldNumber: 11)
      }
      if !_storage._teacherTaskLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherTaskLink, fieldNumber: 12)
      }
      if !_storage._teacherTaskStatus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._teacherTaskStatus, fieldNumber: 13)
      }
      if _storage._totalTaskCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalTaskCount, fieldNumber: 14)
      }
      if _storage._totalSubmitCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalSubmitCount, fieldNumber: 15)
      }
      if _storage._totalPassCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalPassCount, fieldNumber: 16)
      }
      if !_storage._taskParameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._taskParameters, fieldNumber: 17)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 18)
      }
      if !_storage._updatedAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updatedAt, fieldNumber: 19)
      }
      try { if let v = _storage._creator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._updator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_TeacherTask, rhs: GloryApi_TeacherTask) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._teacherTaskID != rhs_storage._teacherTaskID {return false}
        if _storage._teacherID != rhs_storage._teacherID {return false}
        if _storage._teacherTaskName != rhs_storage._teacherTaskName {return false}
        if _storage._teacherTaskBusiness != rhs_storage._teacherTaskBusiness {return false}
        if _storage._teacherTaskClasses != rhs_storage._teacherTaskClasses {return false}
        if _storage._teacherTaskStart != rhs_storage._teacherTaskStart {return false}
        if _storage._teacherTaskEnd != rhs_storage._teacherTaskEnd {return false}
        if _storage._teacherTaskType != rhs_storage._teacherTaskType {return false}
        if _storage._teacherTaskTemplateID != rhs_storage._teacherTaskTemplateID {return false}
        if _storage._teacherTaskContent != rhs_storage._teacherTaskContent {return false}
        if _storage._teacherTaskRequirements != rhs_storage._teacherTaskRequirements {return false}
        if _storage._teacherTaskLink != rhs_storage._teacherTaskLink {return false}
        if _storage._teacherTaskStatus != rhs_storage._teacherTaskStatus {return false}
        if _storage._totalTaskCount != rhs_storage._totalTaskCount {return false}
        if _storage._totalSubmitCount != rhs_storage._totalSubmitCount {return false}
        if _storage._totalPassCount != rhs_storage._totalPassCount {return false}
        if _storage._taskParameters != rhs_storage._taskParameters {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._updator != rhs_storage._updator {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateTeacherTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateTeacherTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "teacher_task"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._teacherTask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._teacherTask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateTeacherTaskRequest, rhs: GloryApi_CreateTeacherTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs._teacherTask != rhs._teacherTask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_CreateTeacherTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateTeacherTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_CreateTeacherTaskResponse, rhs: GloryApi_CreateTeacherTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateTeacherTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateTeacherTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "teacher_task"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._teacherTask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._teacherTask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateTeacherTaskRequest, rhs: GloryApi_UpdateTeacherTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs._teacherTask != rhs._teacherTask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_UpdateTeacherTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateTeacherTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_UpdateTeacherTaskResponse, rhs: GloryApi_UpdateTeacherTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListTeacherTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListTeacherTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListTeacherTaskRequest, rhs: GloryApi_ListTeacherTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_ListTeacherTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListTeacherTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "teacher_tasks"),
    100: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.teacherTasks) }()
      case 100: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.teacherTasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.teacherTasks, fieldNumber: 2)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_ListTeacherTaskResponse, rhs: GloryApi_ListTeacherTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.teacherTasks != rhs.teacherTasks {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetTeacherTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTeacherTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "teacher_task_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.teacherTaskID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.teacherTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.teacherTaskID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetTeacherTaskRequest, rhs: GloryApi_GetTeacherTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.teacherTaskID != rhs.teacherTaskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_GetTeacherTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTeacherTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
    2: .standard(proto: "teacher_task"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._teacherTask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._teacherTask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_GetTeacherTaskResponse, rhs: GloryApi_GetTeacherTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs._teacherTask != rhs._teacherTask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteTeacherTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteTeacherTaskRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_request"),
    2: .standard(proto: "teacher_task_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseRequest) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.teacherTaskID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.teacherTaskID != 0 {
      try visitor.visitSingularInt64Field(value: self.teacherTaskID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteTeacherTaskRequest, rhs: GloryApi_DeleteTeacherTaskRequest) -> Bool {
    if lhs._baseRequest != rhs._baseRequest {return false}
    if lhs.teacherTaskID != rhs.teacherTaskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GloryApi_DeleteTeacherTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteTeacherTaskResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_resp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseResp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._baseResp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GloryApi_DeleteTeacherTaskResponse, rhs: GloryApi_DeleteTeacherTaskResponse) -> Bool {
    if lhs._baseResp != rhs._baseResp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
